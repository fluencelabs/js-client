/*! For license information please see main.782b7b60.js.LICENSE.txt */
!function(){var I={5558:function(I,g){"use strict";var C=this&&this.__awaiter||function(I,g,C,A){return new(C||(C=Promise))((function(i,c){function G(I){try{b(A.next(I))}catch(g){c(g)}}function l(I){try{b(A.throw(I))}catch(g){c(g)}}function b(I){var g;I.done?i(I.value):(g=I.value,g instanceof C?g:new C((function(I){I(g)}))).then(G,l)}b((A=A.apply(I,g||[])).next())}))},A=this&&this.__generator||function(I,g){var C,A,i,c,G={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return c={next:l(0),throw:l(1),return:l(2)},"function"===typeof Symbol&&(c[Symbol.iterator]=function(){return this}),c;function l(l){return function(b){return function(l){if(C)throw new TypeError("Generator is already executing.");for(;c&&(c=0,l[0]&&(G=0)),G;)try{if(C=1,A&&(i=2&l[0]?A.return:l[0]?A.throw||((i=A.return)&&i.call(A),0):A.next)&&!(i=i.call(A,l[1])).done)return i;switch(A=0,i&&(l=[2&l[0],i.value]),l[0]){case 0:case 1:i=l;break;case 4:return G.label++,{value:l[1],done:!1};case 5:G.label++,A=l[1],l=[0];continue;case 7:l=G.ops.pop(),G.trys.pop();continue;default:if(!(i=(i=G.trys).length>0&&i[i.length-1])&&(6===l[0]||2===l[0])){G=0;continue}if(3===l[0]&&(!i||l[1]>i[0]&&l[1]<i[3])){G.label=l[1];break}if(6===l[0]&&G.label<i[1]){G.label=i[1],i=l;break}if(i&&G.label<i[2]){G.label=i[2],G.ops.push(l);break}i[2]&&G.ops.pop(),G.trys.pop();continue}l=g.call(I,G)}catch(b){l=[6,b],A=0}finally{C=i=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,b])}}};Object.defineProperty(g,"__esModule",{value:!0}),g.callAvm=g.deserializeAvmResult=g.serializeAvmArgs=void 0;var i=new TextDecoder,c=new TextEncoder;function G(I,g,C,A,i){for(var G={},l=0,b=i;l<b.length;l++){var Z=b[l],t=Z[0],o=Z[1];G[t]={ret_code:o.retCode,result:o.result}}var n=c.encode(JSON.stringify(G));return[g,Array.from(C),Array.from(A),{init_peer_id:I.initPeerId,current_peer_id:I.currentPeerId,timestamp:I.timestamp,ttl:I.ttl},Array.from(n)]}function l(I){var g,C=i.decode(new Uint8Array(I.call_requests));try{g=0===C.length?{}:JSON.parse(C)}catch(Z){throw"Couldn't parse call requests: "+Z+". Original string is: "+C}var A=[];for(var c in g){var G=g[c],l=void 0,b=void 0;try{l=JSON.parse(G.arguments)}catch(Z){throw"Couldn't parse arguments: "+Z+". Original string is: "+l}try{b=JSON.parse(G.tetraplets)}catch(Z){throw"Couldn't parse tetraplets: "+Z+". Original string is: "+b}A.push([c,{serviceId:G.service_id,functionName:G.function_name,arguments:l,tetraplets:b}])}return{retCode:I.ret_code,errorMessage:I.error_message,data:I.data,nextPeerPks:I.next_peer_pks,callRequests:A}}g.serializeAvmArgs=G,g.deserializeAvmResult=l,g.callAvm=function(I,g,i,c,b,Z){return C(this,void 0,void 0,(function(){var C;return A(this,(function(A){switch(A.label){case 0:return C=G(g,i,c,b,Z),[4,I(C)];case 1:return[2,l(A.sent())]}}))}))}},6329:function(I,g,C){"use strict";var A=this&&this.__createBinding||(Object.create?function(I,g,C,A){void 0===A&&(A=C);var i=Object.getOwnPropertyDescriptor(g,C);i&&!("get"in i?!g.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return g[C]}}),Object.defineProperty(I,A,i)}:function(I,g,C,A){void 0===A&&(A=C),I[A]=g[C]}),i=this&&this.__exportStar||function(I,g){for(var C in I)"default"===C||Object.prototype.hasOwnProperty.call(g,C)||A(g,I,C)};Object.defineProperty(g,"__esModule",{value:!0}),i(C(956),g),i(C(5558),g)},956:function(I,g){"use strict";Object.defineProperty(g,"__esModule",{value:!0})},4753:function(I,g,C){"use strict";var A=this&&this.__assign||function(){return A=Object.assign||function(I){for(var g,C=1,A=arguments.length;C<A;C++)for(var i in g=arguments[C])Object.prototype.hasOwnProperty.call(g,i)&&(I[i]=g[i]);return I},A.apply(this,arguments)},i=this&&this.__awaiter||function(I,g,C,A){return new(C||(C=Promise))((function(i,c){function G(I){try{b(A.next(I))}catch(g){c(g)}}function l(I){try{b(A.throw(I))}catch(g){c(g)}}function b(I){var g;I.done?i(I.value):(g=I.value,g instanceof C?g:new C((function(I){I(g)}))).then(G,l)}b((A=A.apply(I,g||[])).next())}))},c=this&&this.__generator||function(I,g){var C,A,i,c,G={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return c={next:l(0),throw:l(1),return:l(2)},"function"===typeof Symbol&&(c[Symbol.iterator]=function(){return this}),c;function l(c){return function(l){return function(c){if(C)throw new TypeError("Generator is already executing.");for(;G;)try{if(C=1,A&&(i=2&c[0]?A.return:c[0]?A.throw||((i=A.return)&&i.call(A),0):A.next)&&!(i=i.call(A,c[1])).done)return i;switch(A=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return G.label++,{value:c[1],done:!1};case 5:G.label++,A=c[1],c=[0];continue;case 7:c=G.ops.pop(),G.trys.pop();continue;default:if(!(i=(i=G.trys).length>0&&i[i.length-1])&&(6===c[0]||2===c[0])){G=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){G.label=c[1];break}if(6===c[0]&&G.label<i[1]){G.label=i[1],i=c;break}if(i&&G.label<i[2]){G.label=i[2],G.ops.push(c);break}i[2]&&G.ops.pop(),G.trys.pop();continue}c=g.call(I,G)}catch(l){c=[6,l],A=0}finally{C=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,l])}}},G=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0}),g.MarineService=void 0;var l=C(3962),b=G(C(5124)),Z=C(3903),t=C(3443),o=null;function n(I,g,C){return u.decode(function(I){return null!==o&&o.buffer===I.memory.buffer||(o=new Uint8Array(I.memory.buffer)),o}(I).subarray(g,g+C))}var u=new TextDecoder,d=function(){function I(I,g,C,i,c,G){this.controlModule=I,this.serviceModule=g,this.serviceId=C,this.logFunction=i,this.env={},this._controlModuleInstance="not-set",this.env=A({WASM_LOG:"off"},G)}return I.prototype.init=function(){return i(this,void 0,void 0,(function(){var I,g,C,i,G,o,u,d,e,B=this;return c(this,(function(c){switch(c.label){case 0:return I=new l.WASI({args:[],env:this.env,bindings:A(A({},b.default),{fs:(new Z.WasmFs).fs})}),g={exports:void 0},X=this.serviceModule,C=void 0!==WebAssembly.Module.imports(X).find((function(I){return"wasi_snapshot_preview1"===I.module||"wasi_unstable"===I.module}))?I.getImports(this.serviceModule):{},[4,WebAssembly.instantiate(this.serviceModule,A(A({},C),{host:{log_utf8_string:function(I,C,A,i){var c=g.exports,G=m(I);if(null!==G){var l=n(c,A,i);B.logFunction({service:B.serviceId,message:l,level:G})}}}}))];case 1:return i=c.sent(),I.start(i),g.exports=i.exports,[4,(0,t.init)(this.controlModule)];case 2:G=c.sent(),o=WebAssembly.Module.customSections(this.serviceModule,"interface-types"),u=new Uint8Array(o[0]),d=G.register_module(this.serviceId,u,i);try{return e=JSON.parse(d),this._controlModuleInstance=G,[2,e]}catch(y){throw"register_module result parsing error: "+y+", original text: "+d}return[2]}var X}))}))},I.prototype.terminate=function(){this._controlModuleInstance="not-set"},I.prototype.call=function(I,g,C){if("not-set"===this._controlModuleInstance)throw new Error("Not initialized");if("terminated"===this._controlModuleInstance)throw new Error("Terminated");var A=JSON.stringify(g),i=this._controlModuleInstance.call_module(this.serviceId,I,A),c=JSON.parse(i);if(c.error)throw new Error("marine-js failed with: ".concat(c.error));return c.result},I}();g.MarineService=d;var m=function(I){switch(I){case 1:return"error";case 2:return"warn";case 3:return"info";case 4:return"debug";case 5:return"trace"}return null}},697:function(I,g){"use strict";Object.defineProperty(g,"__esModule",{value:!0})},1901:function(I,g,C){"use strict";var A=this&&this.__createBinding||(Object.create?function(I,g,C,A){void 0===A&&(A=C);var i=Object.getOwnPropertyDescriptor(g,C);i&&!("get"in i?!g.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return g[C]}}),Object.defineProperty(I,A,i)}:function(I,g,C,A){void 0===A&&(A=C),I[A]=g[C]}),i=this&&this.__exportStar||function(I,g){for(var C in I)"default"===C||Object.prototype.hasOwnProperty.call(g,C)||A(g,I,C)};Object.defineProperty(g,"__esModule",{value:!0}),g.MarineService=void 0;var c=C(4753);Object.defineProperty(g,"MarineService",{enumerable:!0,get:function(){return c.MarineService}}),i(C(697),g),i(C(6701),g)},3443:function(I,g,C){"use strict";var A=this&&this.__awaiter||function(I,g,C,A){return new(C||(C=Promise))((function(i,c){function G(I){try{b(A.next(I))}catch(g){c(g)}}function l(I){try{b(A.throw(I))}catch(g){c(g)}}function b(I){var g;I.done?i(I.value):(g=I.value,g instanceof C?g:new C((function(I){I(g)}))).then(G,l)}b((A=A.apply(I,g||[])).next())}))},i=this&&this.__generator||function(I,g){var C,A,i,c,G={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return c={next:l(0),throw:l(1),return:l(2)},"function"===typeof Symbol&&(c[Symbol.iterator]=function(){return this}),c;function l(c){return function(l){return function(c){if(C)throw new TypeError("Generator is already executing.");for(;G;)try{if(C=1,A&&(i=2&c[0]?A.return:c[0]?A.throw||((i=A.return)&&i.call(A),0):A.next)&&!(i=i.call(A,c[1])).done)return i;switch(A=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return G.label++,{value:c[1],done:!1};case 5:G.label++,A=c[1],c=[0];continue;case 7:c=G.ops.pop(),G.trys.pop();continue;default:if(!(i=(i=G.trys).length>0&&i[i.length-1])&&(6===c[0]||2===c[0])){G=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){G.label=c[1];break}if(6===c[0]&&G.label<i[1]){G.label=i[1],i=c;break}if(i&&G.label<i[2]){G.label=i[2],G.ops.push(c);break}i[2]&&G.ops.pop(),G.trys.pop();continue}c=g.call(I,G)}catch(l){c=[6,l],A=0}finally{C=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,l])}}};Object.defineProperty(g,"__esModule",{value:!0}),g.init=void 0;var c=C(9410);g.init=function(I){return A(this,void 0,void 0,(function(){function g(I){return B[I]}function C(I){var C=g(I);return function(I){I<36||(B[I]=X,X=I)}(I),C}function G(){return 0===V.byteLength&&(V=new Uint8Array(e.memory.buffer)),V}function l(I,g){return y.decode(G().subarray(I,I+g))}function b(I){X===B.length&&B.push(B.length+1);var g=X;return X=B[g],B[g]=I,g}function Z(I,g,C){if(void 0===C){var A=a.encode(I),i=g(A.length);return G().subarray(i,i+A.length).set(A),h=A.length,i}for(var c=I.length,l=g(c),b=G(),Z=0;Z<c;Z++){var t=I.charCodeAt(Z);if(t>127)break;b[l+Z]=t}if(Z!==c){0!==Z&&(I=I.slice(Z)),l=C(l,c,c=Z+3*I.length);var o=G().subarray(l+Z,l+c);Z+=s(I,o).written}return h=Z,l}function t(){return 0===r.byteLength&&(r=new Int32Array(e.memory.buffer)),r}function o(I,g,C){try{var A=e.__wbindgen_add_to_stack_pointer(-16),i=Z(I,e.__wbindgen_malloc,e.__wbindgen_realloc),c=h,o=function(I,g){var C=g(1*I.length);return G().set(I,C/1),h=I.length,C}(g,e.__wbindgen_malloc),n=h;e.register_module(A,i,c,o,n,b(C));var u=t()[A/4+0],d=t()[A/4+1];return l(u,d)}finally{e.__wbindgen_add_to_stack_pointer(16),e.__wbindgen_free(u,d)}}function n(I,g,C){try{var A=e.__wbindgen_add_to_stack_pointer(-16),i=Z(I,e.__wbindgen_malloc,e.__wbindgen_realloc),c=h,G=Z(g,e.__wbindgen_malloc,e.__wbindgen_realloc),b=h,o=Z(C,e.__wbindgen_malloc,e.__wbindgen_realloc),n=h;e.call_module(A,i,c,G,b,o,n);var u=t()[A/4+0],d=t()[A/4+1];return l(u,d)}finally{e.__wbindgen_add_to_stack_pointer(16),e.__wbindgen_free(u,d)}}function u(I,g){return G().subarray(I/1,I/1+g)}function d(I,g){return e=I.exports,m.__wbindgen_wasm_module=g,r=new Int32Array,V=new Uint8Array,e.__wbindgen_start(),e}function m(G){return A(this,void 0,void 0,(function(){var A;return i(this,(function(i){switch(i.label){case 0:return A=function(){var I={wbg:{}};return I.wbg.__wbg_writebyterange_0c59aabc2aad1210=function(I,C,A,i){(0,c.write_byte_range)(g(I),C>>>0,u(A,i))},I.wbg.__wbg_readbyte_0b96cd62e4c1af25=function(I,C){return(0,c.read_byte)(g(I),C>>>0)},I.wbg.__wbg_readbyterange_6def5970b1aebf61=function(I,C,A,i){(0,c.read_byte_range)(g(I),C>>>0,u(A,i))},I.wbg.__wbg_getmemorysize_16d792c547469ba4=function(I){return(0,c.get_memory_size)(g(I))},I.wbg.__wbg_new_abda76e883ba8a5f=function(){return b(new Error)},I.wbg.__wbg_stack_658279fe44541cf6=function(I,C){var A=Z(g(C).stack,e.__wbindgen_malloc,e.__wbindgen_realloc),i=h;t()[I/4+1]=i,t()[I/4+0]=A},I.wbg.__wbg_error_f851667af71bcfc6=function(I,g){try{console.error(l(I,g))}finally{e.__wbindgen_free(I,g)}},I.wbg.__wbindgen_object_drop_ref=function(I){C(I)},I.wbg.__wbg_writebyte_111fe93c2b0126fe=function(I,C,A){(0,c.write_byte)(g(I),C>>>0,A)},I.wbg.__wbg_callexport_633630b9132e20a4=function(I,C,A,i,G,b){var o=Z((0,c.call_export)(g(C),l(A,i),l(G,b)),e.__wbindgen_malloc,e.__wbindgen_realloc),n=h;t()[I/4+1]=n,t()[I/4+0]=o},I}(),[4,WebAssembly.instantiate(G,A)];case 1:return[2,d(i.sent(),I)]}}))}))}var e,B,X,y,V,h,a,s,r;return i(this,(function(g){switch(g.label){case 0:return(B=new Array(32).fill(void 0)).push(void 0,null,!0,!1),X=B.length,(y=new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0})).decode(),V=new Uint8Array,h=0,a=new TextEncoder("utf-8"),s="function"===typeof a.encodeInto?function(I,g){return a.encodeInto(I,g)}:function(I,g){var C=a.encode(I);return g.set(C),{read:I.length,written:C.length}},r=new Int32Array,[4,m(I)];case 1:return g.sent(),[2,{wasm:e,register_module:o,call_module:n}]}}))}))}},9410:function(I,g){"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.read_byte_range=g.write_byte_range=g.write_byte=g.read_byte=g.get_memory_size=g.call_export=void 0,g.call_export=function(I,g,C){for(var A,i=JSON.parse(C),c=[],G=0;G<i.length;G++){var l=i[G];if(void 0!==l.I32&&c.push(l.I32),void 0!==l.I64){var b=BigInt(l.I64);c.push(b)}void 0!==l.F32&&c.push(l.F32),void 0!==l.F64&&c.push(l.F64)}var Z=(A=I.exports)[g].apply(A,c),t="[]";return void 0!==Z&&(t="bigint"==typeof Z?"["+Z.toString()+"]":"["+JSON.stringify(Z)+"]"),t},g.get_memory_size=function(I){return new Uint8Array(I.exports.memory.buffer).byteLength},g.read_byte=function(I,g){return new Uint8Array(I.exports.memory.buffer)[g]},g.write_byte=function(I,g,C){new Uint8Array(I.exports.memory.buffer)[g]=C},g.write_byte_range=function(I,g,C){for(var A=new Uint8Array(I.exports.memory.buffer),i=0;i<C.length;i++)A[g+i]=C[i]},g.read_byte_range=function(I,g,C){for(var A=new Uint8Array(I.exports.memory.buffer),i=0;i<C.length;i++)C[i]=A[g+i]}},6701:function(I,g){"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.logLevelToEnv=g.isLogLevel=g.logLevels=void 0,g.logLevels=["trace","debug","info","warn","error"];g.isLogLevel=function(I){return g.logLevels.some((function(g){return I===g}))};g.logLevelToEnv=function(I){return{WASM_LOG:I}}},5124:function(I,g,C){"use strict";Object.defineProperty(g,"__esModule",{value:!0});var A=C(6641),i=C(9770),c=C(5360),G=C(4845),l={hrtime:C(9065).default(i.default),exit:function(I){throw new G.WASIExitError(I)},kill:function(I){throw new G.WASIKillError(I)},randomFillSync:A.randomFillSync,isTTY:function(){return!0},path:c,fs:null};g.default=l},8380:function(I,g,C){"use strict";var A,i=C(8726).default;Object.defineProperty(g,"__esModule",{value:!0});var c=C(104);g.WASI_ESUCCESS=0,g.WASI_E2BIG=1,g.WASI_EACCES=2,g.WASI_EADDRINUSE=3,g.WASI_EADDRNOTAVAIL=4,g.WASI_EAFNOSUPPORT=5,g.WASI_EAGAIN=6,g.WASI_EALREADY=7,g.WASI_EBADF=8,g.WASI_EBADMSG=9,g.WASI_EBUSY=10,g.WASI_ECANCELED=11,g.WASI_ECHILD=12,g.WASI_ECONNABORTED=13,g.WASI_ECONNREFUSED=14,g.WASI_ECONNRESET=15,g.WASI_EDEADLK=16,g.WASI_EDESTADDRREQ=17,g.WASI_EDOM=18,g.WASI_EDQUOT=19,g.WASI_EEXIST=20,g.WASI_EFAULT=21,g.WASI_EFBIG=22,g.WASI_EHOSTUNREACH=23,g.WASI_EIDRM=24,g.WASI_EILSEQ=25,g.WASI_EINPROGRESS=26,g.WASI_EINTR=27,g.WASI_EINVAL=28,g.WASI_EIO=29,g.WASI_EISCONN=30,g.WASI_EISDIR=31,g.WASI_ELOOP=32,g.WASI_EMFILE=33,g.WASI_EMLINK=34,g.WASI_EMSGSIZE=35,g.WASI_EMULTIHOP=36,g.WASI_ENAMETOOLONG=37,g.WASI_ENETDOWN=38,g.WASI_ENETRESET=39,g.WASI_ENETUNREACH=40,g.WASI_ENFILE=41,g.WASI_ENOBUFS=42,g.WASI_ENODEV=43,g.WASI_ENOENT=44,g.WASI_ENOEXEC=45,g.WASI_ENOLCK=46,g.WASI_ENOLINK=47,g.WASI_ENOMEM=48,g.WASI_ENOMSG=49,g.WASI_ENOPROTOOPT=50,g.WASI_ENOSPC=51,g.WASI_ENOSYS=52,g.WASI_ENOTCONN=53,g.WASI_ENOTDIR=54,g.WASI_ENOTEMPTY=55,g.WASI_ENOTRECOVERABLE=56,g.WASI_ENOTSOCK=57,g.WASI_ENOTSUP=58,g.WASI_ENOTTY=59,g.WASI_ENXIO=60,g.WASI_EOVERFLOW=61,g.WASI_EOWNERDEAD=62,g.WASI_EPERM=63,g.WASI_EPIPE=64,g.WASI_EPROTO=65,g.WASI_EPROTONOSUPPORT=66,g.WASI_EPROTOTYPE=67,g.WASI_ERANGE=68,g.WASI_EROFS=69,g.WASI_ESPIPE=70,g.WASI_ESRCH=71,g.WASI_ESTALE=72,g.WASI_ETIMEDOUT=73,g.WASI_ETXTBSY=74,g.WASI_EXDEV=75,g.WASI_ENOTCAPABLE=76,g.WASI_SIGABRT=0,g.WASI_SIGALRM=1,g.WASI_SIGBUS=2,g.WASI_SIGCHLD=3,g.WASI_SIGCONT=4,g.WASI_SIGFPE=5,g.WASI_SIGHUP=6,g.WASI_SIGILL=7,g.WASI_SIGINT=8,g.WASI_SIGKILL=9,g.WASI_SIGPIPE=10,g.WASI_SIGQUIT=11,g.WASI_SIGSEGV=12,g.WASI_SIGSTOP=13,g.WASI_SIGTERM=14,g.WASI_SIGTRAP=15,g.WASI_SIGTSTP=16,g.WASI_SIGTTIN=17,g.WASI_SIGTTOU=18,g.WASI_SIGURG=19,g.WASI_SIGUSR1=20,g.WASI_SIGUSR2=21,g.WASI_SIGVTALRM=22,g.WASI_SIGXCPU=23,g.WASI_SIGXFSZ=24,g.WASI_FILETYPE_UNKNOWN=0,g.WASI_FILETYPE_BLOCK_DEVICE=1,g.WASI_FILETYPE_CHARACTER_DEVICE=2,g.WASI_FILETYPE_DIRECTORY=3,g.WASI_FILETYPE_REGULAR_FILE=4,g.WASI_FILETYPE_SOCKET_DGRAM=5,g.WASI_FILETYPE_SOCKET_STREAM=6,g.WASI_FILETYPE_SYMBOLIC_LINK=7,g.WASI_FDFLAG_APPEND=1,g.WASI_FDFLAG_DSYNC=2,g.WASI_FDFLAG_NONBLOCK=4,g.WASI_FDFLAG_RSYNC=8,g.WASI_FDFLAG_SYNC=16,g.WASI_RIGHT_FD_DATASYNC=c.BigIntPolyfill(1),g.WASI_RIGHT_FD_READ=c.BigIntPolyfill(2),g.WASI_RIGHT_FD_SEEK=c.BigIntPolyfill(4),g.WASI_RIGHT_FD_FDSTAT_SET_FLAGS=c.BigIntPolyfill(8),g.WASI_RIGHT_FD_SYNC=c.BigIntPolyfill(16),g.WASI_RIGHT_FD_TELL=c.BigIntPolyfill(32),g.WASI_RIGHT_FD_WRITE=c.BigIntPolyfill(64),g.WASI_RIGHT_FD_ADVISE=c.BigIntPolyfill(128),g.WASI_RIGHT_FD_ALLOCATE=c.BigIntPolyfill(256),g.WASI_RIGHT_PATH_CREATE_DIRECTORY=c.BigIntPolyfill(512),g.WASI_RIGHT_PATH_CREATE_FILE=c.BigIntPolyfill(1024),g.WASI_RIGHT_PATH_LINK_SOURCE=c.BigIntPolyfill(2048),g.WASI_RIGHT_PATH_LINK_TARGET=c.BigIntPolyfill(4096),g.WASI_RIGHT_PATH_OPEN=c.BigIntPolyfill(8192),g.WASI_RIGHT_FD_READDIR=c.BigIntPolyfill(16384),g.WASI_RIGHT_PATH_READLINK=c.BigIntPolyfill(32768),g.WASI_RIGHT_PATH_RENAME_SOURCE=c.BigIntPolyfill(65536),g.WASI_RIGHT_PATH_RENAME_TARGET=c.BigIntPolyfill(131072),g.WASI_RIGHT_PATH_FILESTAT_GET=c.BigIntPolyfill(262144),g.WASI_RIGHT_PATH_FILESTAT_SET_SIZE=c.BigIntPolyfill(524288),g.WASI_RIGHT_PATH_FILESTAT_SET_TIMES=c.BigIntPolyfill(1048576),g.WASI_RIGHT_FD_FILESTAT_GET=c.BigIntPolyfill(2097152),g.WASI_RIGHT_FD_FILESTAT_SET_SIZE=c.BigIntPolyfill(4194304),g.WASI_RIGHT_FD_FILESTAT_SET_TIMES=c.BigIntPolyfill(8388608),g.WASI_RIGHT_PATH_SYMLINK=c.BigIntPolyfill(16777216),g.WASI_RIGHT_PATH_REMOVE_DIRECTORY=c.BigIntPolyfill(33554432),g.WASI_RIGHT_PATH_UNLINK_FILE=c.BigIntPolyfill(67108864),g.WASI_RIGHT_POLL_FD_READWRITE=c.BigIntPolyfill(134217728),g.WASI_RIGHT_SOCK_SHUTDOWN=c.BigIntPolyfill(268435456),g.RIGHTS_ALL=g.WASI_RIGHT_FD_DATASYNC|g.WASI_RIGHT_FD_READ|g.WASI_RIGHT_FD_SEEK|g.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|g.WASI_RIGHT_FD_SYNC|g.WASI_RIGHT_FD_TELL|g.WASI_RIGHT_FD_WRITE|g.WASI_RIGHT_FD_ADVISE|g.WASI_RIGHT_FD_ALLOCATE|g.WASI_RIGHT_PATH_CREATE_DIRECTORY|g.WASI_RIGHT_PATH_CREATE_FILE|g.WASI_RIGHT_PATH_LINK_SOURCE|g.WASI_RIGHT_PATH_LINK_TARGET|g.WASI_RIGHT_PATH_OPEN|g.WASI_RIGHT_FD_READDIR|g.WASI_RIGHT_PATH_READLINK|g.WASI_RIGHT_PATH_RENAME_SOURCE|g.WASI_RIGHT_PATH_RENAME_TARGET|g.WASI_RIGHT_PATH_FILESTAT_GET|g.WASI_RIGHT_PATH_FILESTAT_SET_SIZE|g.WASI_RIGHT_PATH_FILESTAT_SET_TIMES|g.WASI_RIGHT_FD_FILESTAT_GET|g.WASI_RIGHT_FD_FILESTAT_SET_TIMES|g.WASI_RIGHT_FD_FILESTAT_SET_SIZE|g.WASI_RIGHT_PATH_SYMLINK|g.WASI_RIGHT_PATH_UNLINK_FILE|g.WASI_RIGHT_PATH_REMOVE_DIRECTORY|g.WASI_RIGHT_POLL_FD_READWRITE|g.WASI_RIGHT_SOCK_SHUTDOWN,g.RIGHTS_BLOCK_DEVICE_BASE=g.RIGHTS_ALL,g.RIGHTS_BLOCK_DEVICE_INHERITING=g.RIGHTS_ALL,g.RIGHTS_CHARACTER_DEVICE_BASE=g.RIGHTS_ALL,g.RIGHTS_CHARACTER_DEVICE_INHERITING=g.RIGHTS_ALL,g.RIGHTS_REGULAR_FILE_BASE=g.WASI_RIGHT_FD_DATASYNC|g.WASI_RIGHT_FD_READ|g.WASI_RIGHT_FD_SEEK|g.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|g.WASI_RIGHT_FD_SYNC|g.WASI_RIGHT_FD_TELL|g.WASI_RIGHT_FD_WRITE|g.WASI_RIGHT_FD_ADVISE|g.WASI_RIGHT_FD_ALLOCATE|g.WASI_RIGHT_FD_FILESTAT_GET|g.WASI_RIGHT_FD_FILESTAT_SET_SIZE|g.WASI_RIGHT_FD_FILESTAT_SET_TIMES|g.WASI_RIGHT_POLL_FD_READWRITE,g.RIGHTS_REGULAR_FILE_INHERITING=c.BigIntPolyfill(0),g.RIGHTS_DIRECTORY_BASE=g.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|g.WASI_RIGHT_FD_SYNC|g.WASI_RIGHT_FD_ADVISE|g.WASI_RIGHT_PATH_CREATE_DIRECTORY|g.WASI_RIGHT_PATH_CREATE_FILE|g.WASI_RIGHT_PATH_LINK_SOURCE|g.WASI_RIGHT_PATH_LINK_TARGET|g.WASI_RIGHT_PATH_OPEN|g.WASI_RIGHT_FD_READDIR|g.WASI_RIGHT_PATH_READLINK|g.WASI_RIGHT_PATH_RENAME_SOURCE|g.WASI_RIGHT_PATH_RENAME_TARGET|g.WASI_RIGHT_PATH_FILESTAT_GET|g.WASI_RIGHT_PATH_FILESTAT_SET_SIZE|g.WASI_RIGHT_PATH_FILESTAT_SET_TIMES|g.WASI_RIGHT_FD_FILESTAT_GET|g.WASI_RIGHT_FD_FILESTAT_SET_TIMES|g.WASI_RIGHT_PATH_SYMLINK|g.WASI_RIGHT_PATH_UNLINK_FILE|g.WASI_RIGHT_PATH_REMOVE_DIRECTORY|g.WASI_RIGHT_POLL_FD_READWRITE,g.RIGHTS_DIRECTORY_INHERITING=g.RIGHTS_DIRECTORY_BASE|g.RIGHTS_REGULAR_FILE_BASE,g.RIGHTS_SOCKET_BASE=g.WASI_RIGHT_FD_READ|g.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|g.WASI_RIGHT_FD_WRITE|g.WASI_RIGHT_FD_FILESTAT_GET|g.WASI_RIGHT_POLL_FD_READWRITE|g.WASI_RIGHT_SOCK_SHUTDOWN,g.RIGHTS_SOCKET_INHERITING=g.RIGHTS_ALL,g.RIGHTS_TTY_BASE=g.WASI_RIGHT_FD_READ|g.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|g.WASI_RIGHT_FD_WRITE|g.WASI_RIGHT_FD_FILESTAT_GET|g.WASI_RIGHT_POLL_FD_READWRITE,g.RIGHTS_TTY_INHERITING=c.BigIntPolyfill(0),g.WASI_CLOCK_REALTIME=0,g.WASI_CLOCK_MONOTONIC=1,g.WASI_CLOCK_PROCESS_CPUTIME_ID=2,g.WASI_CLOCK_THREAD_CPUTIME_ID=3,g.WASI_EVENTTYPE_CLOCK=0,g.WASI_EVENTTYPE_FD_READ=1,g.WASI_EVENTTYPE_FD_WRITE=2,g.WASI_FILESTAT_SET_ATIM=1,g.WASI_FILESTAT_SET_ATIM_NOW=2,g.WASI_FILESTAT_SET_MTIM=4,g.WASI_FILESTAT_SET_MTIM_NOW=8,g.WASI_O_CREAT=1,g.WASI_O_DIRECTORY=2,g.WASI_O_EXCL=4,g.WASI_O_TRUNC=8,g.WASI_PREOPENTYPE_DIR=0,g.WASI_DIRCOOKIE_START=0,g.WASI_STDIN_FILENO=0,g.WASI_STDOUT_FILENO=1,g.WASI_STDERR_FILENO=2,g.WASI_WHENCE_SET=0,g.WASI_WHENCE_CUR=1,g.WASI_WHENCE_END=2,g.ERROR_MAP={E2BIG:g.WASI_E2BIG,EACCES:g.WASI_EACCES,EADDRINUSE:g.WASI_EADDRINUSE,EADDRNOTAVAIL:g.WASI_EADDRNOTAVAIL,EAFNOSUPPORT:g.WASI_EAFNOSUPPORT,EALREADY:g.WASI_EALREADY,EAGAIN:g.WASI_EAGAIN,EBADF:g.WASI_EBADF,EBADMSG:g.WASI_EBADMSG,EBUSY:g.WASI_EBUSY,ECANCELED:g.WASI_ECANCELED,ECHILD:g.WASI_ECHILD,ECONNABORTED:g.WASI_ECONNABORTED,ECONNREFUSED:g.WASI_ECONNREFUSED,ECONNRESET:g.WASI_ECONNRESET,EDEADLOCK:g.WASI_EDEADLK,EDESTADDRREQ:g.WASI_EDESTADDRREQ,EDOM:g.WASI_EDOM,EDQUOT:g.WASI_EDQUOT,EEXIST:g.WASI_EEXIST,EFAULT:g.WASI_EFAULT,EFBIG:g.WASI_EFBIG,EHOSTDOWN:g.WASI_EHOSTUNREACH,EHOSTUNREACH:g.WASI_EHOSTUNREACH,EIDRM:g.WASI_EIDRM,EILSEQ:g.WASI_EILSEQ,EINPROGRESS:g.WASI_EINPROGRESS,EINTR:g.WASI_EINTR,EINVAL:g.WASI_EINVAL,EIO:g.WASI_EIO,EISCONN:g.WASI_EISCONN,EISDIR:g.WASI_EISDIR,ELOOP:g.WASI_ELOOP,EMFILE:g.WASI_EMFILE,EMLINK:g.WASI_EMLINK,EMSGSIZE:g.WASI_EMSGSIZE,EMULTIHOP:g.WASI_EMULTIHOP,ENAMETOOLONG:g.WASI_ENAMETOOLONG,ENETDOWN:g.WASI_ENETDOWN,ENETRESET:g.WASI_ENETRESET,ENETUNREACH:g.WASI_ENETUNREACH,ENFILE:g.WASI_ENFILE,ENOBUFS:g.WASI_ENOBUFS,ENODEV:g.WASI_ENODEV,ENOENT:g.WASI_ENOENT,ENOEXEC:g.WASI_ENOEXEC,ENOLCK:g.WASI_ENOLCK,ENOLINK:g.WASI_ENOLINK,ENOMEM:g.WASI_ENOMEM,ENOMSG:g.WASI_ENOMSG,ENOPROTOOPT:g.WASI_ENOPROTOOPT,ENOSPC:g.WASI_ENOSPC,ENOSYS:g.WASI_ENOSYS,ENOTCONN:g.WASI_ENOTCONN,ENOTDIR:g.WASI_ENOTDIR,ENOTEMPTY:g.WASI_ENOTEMPTY,ENOTRECOVERABLE:g.WASI_ENOTRECOVERABLE,ENOTSOCK:g.WASI_ENOTSOCK,ENOTTY:g.WASI_ENOTTY,ENXIO:g.WASI_ENXIO,EOVERFLOW:g.WASI_EOVERFLOW,EOWNERDEAD:g.WASI_EOWNERDEAD,EPERM:g.WASI_EPERM,EPIPE:g.WASI_EPIPE,EPROTO:g.WASI_EPROTO,EPROTONOSUPPORT:g.WASI_EPROTONOSUPPORT,EPROTOTYPE:g.WASI_EPROTOTYPE,ERANGE:g.WASI_ERANGE,EROFS:g.WASI_EROFS,ESPIPE:g.WASI_ESPIPE,ESRCH:g.WASI_ESRCH,ESTALE:g.WASI_ESTALE,ETIMEDOUT:g.WASI_ETIMEDOUT,ETXTBSY:g.WASI_ETXTBSY,EXDEV:g.WASI_EXDEV},g.SIGNAL_MAP=(i(A={},g.WASI_SIGHUP,"SIGHUP"),i(A,g.WASI_SIGINT,"SIGINT"),i(A,g.WASI_SIGQUIT,"SIGQUIT"),i(A,g.WASI_SIGILL,"SIGILL"),i(A,g.WASI_SIGTRAP,"SIGTRAP"),i(A,g.WASI_SIGABRT,"SIGABRT"),i(A,g.WASI_SIGBUS,"SIGBUS"),i(A,g.WASI_SIGFPE,"SIGFPE"),i(A,g.WASI_SIGKILL,"SIGKILL"),i(A,g.WASI_SIGUSR1,"SIGUSR1"),i(A,g.WASI_SIGSEGV,"SIGSEGV"),i(A,g.WASI_SIGUSR2,"SIGUSR2"),i(A,g.WASI_SIGPIPE,"SIGPIPE"),i(A,g.WASI_SIGALRM,"SIGALRM"),i(A,g.WASI_SIGTERM,"SIGTERM"),i(A,g.WASI_SIGCHLD,"SIGCHLD"),i(A,g.WASI_SIGCONT,"SIGCONT"),i(A,g.WASI_SIGSTOP,"SIGSTOP"),i(A,g.WASI_SIGTSTP,"SIGTSTP"),i(A,g.WASI_SIGTTIN,"SIGTTIN"),i(A,g.WASI_SIGTTOU,"SIGTTOU"),i(A,g.WASI_SIGURG,"SIGURG"),i(A,g.WASI_SIGXCPU,"SIGXCPU"),i(A,g.WASI_SIGXFSZ,"SIGXFSZ"),i(A,g.WASI_SIGVTALRM,"SIGVTALRM"),A)},3962:function(I,g,C){"use strict";function A(I,g){return A=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(I,g){I.__proto__=g}||function(I,g){for(var C in g)g.hasOwnProperty(C)&&(I[C]=g[C])},A(I,g)}function i(I,g){function C(){this.constructor=I}A(I,g),I.prototype=null===g?Object.create(g):(C.prototype=g.prototype,new C)}function c(I){var g="function"===typeof Symbol&&I[Symbol.iterator],C=0;return g?g.call(I):{next:function(){return I&&C>=I.length&&(I=void 0),{value:I&&I[C++],done:!I}}}}function G(I,g){var C="function"===typeof Symbol&&I[Symbol.iterator];if(!C)return I;I=C.call(I);var A,i=[];try{for(;(void 0===g||0<g--)&&!(A=I.next()).done;)i.push(A.value)}catch(G){var c={error:G}}finally{try{A&&!A.done&&(C=I.return)&&C.call(I)}finally{if(c)throw c.error}}return i}function l(){for(var I=[],g=0;g<arguments.length;g++)I=I.concat(G(arguments[g]));return I}C.r(g),C.d(g,{WASI:function(){return hg},WASIError:function(){return Xg},WASIExitError:function(){return yg},WASIKillError:function(){return Vg}});var b="undefined"!==typeof globalThis?globalThis:"undefined"!==typeof C.g?C.g:{},Z="undefined"!==typeof BigInt?BigInt:b.BigInt||Number,t=DataView;t.prototype.setBigUint64||(t.prototype.setBigUint64=function(I,g,C){if(g<Math.pow(2,32)){g=Number(g);var A=0}else{A=g.toString(2),g="";for(var i=0;i<64-A.length;i++)g+="0";g+=A,A=parseInt(g.substring(0,32),2),g=parseInt(g.substring(32),2)}this.setUint32(I+(C?0:4),g,C),this.setUint32(I+(C?4:0),A,C)},t.prototype.getBigUint64=function(I,g){var C=this.getUint32(I+(g?0:4),g);I=this.getUint32(I+(g?4:0),g),C=C.toString(2),I=I.toString(2),g="";for(var A=0;A<32-C.length;A++)g+="0";return Z("0b"+I+(g+C))});var o="undefined"!==typeof C.g?C.g:"undefined"!==typeof self?self:"undefined"!==typeof window?window:{},n=[],u=[],d="undefined"!==typeof Uint8Array?Uint8Array:Array,m=!1;function e(){m=!0;for(var I=0;64>I;++I)n[I]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[I],u["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charCodeAt(I)]=I;u[45]=62,u[95]=63}function B(I,g,C){for(var A=[],i=g;i<C;i+=3)g=(I[i]<<16)+(I[i+1]<<8)+I[i+2],A.push(n[g>>18&63]+n[g>>12&63]+n[g>>6&63]+n[63&g]);return A.join("")}function X(I){m||e();for(var g=I.length,C=g%3,A="",i=[],c=0,G=g-C;c<G;c+=16383)i.push(B(I,c,c+16383>G?G:c+16383));return 1===C?(I=I[g-1],A+=n[I>>2],A+=n[I<<4&63],A+="=="):2===C&&(I=(I[g-2]<<8)+I[g-1],A+=n[I>>10],A+=n[I>>4&63],A+=n[I<<2&63],A+="="),i.push(A),i.join("")}function y(I,g,C,A,i){var c=8*i-A-1,G=(1<<c)-1,l=G>>1,b=-7,Z=C?-1:1,t=I[g+(i=C?i-1:0)];for(i+=Z,C=t&(1<<-b)-1,t>>=-b,b+=c;0<b;C=256*C+I[g+i],i+=Z,b-=8);for(c=C&(1<<-b)-1,C>>=-b,b+=A;0<b;c=256*c+I[g+i],i+=Z,b-=8);if(0===C)C=1-l;else{if(C===G)return c?NaN:1/0*(t?-1:1);c+=Math.pow(2,A),C-=l}return(t?-1:1)*c*Math.pow(2,C-A)}function V(I,g,C,A,i,c){var G,l=8*c-i-1,b=(1<<l)-1,Z=b>>1,t=23===i?Math.pow(2,-24)-Math.pow(2,-77):0;c=A?0:c-1;var o=A?1:-1,n=0>g||0===g&&0>1/g?1:0;for(g=Math.abs(g),isNaN(g)||1/0===g?(g=isNaN(g)?1:0,A=b):(A=Math.floor(Math.log(g)/Math.LN2),1>g*(G=Math.pow(2,-A))&&(A--,G*=2),2<=(g=1<=A+Z?g+t/G:g+t*Math.pow(2,1-Z))*G&&(A++,G/=2),A+Z>=b?(g=0,A=b):1<=A+Z?(g=(g*G-1)*Math.pow(2,i),A+=Z):(g=g*Math.pow(2,Z-1)*Math.pow(2,i),A=0));8<=i;I[C+c]=255&g,c+=o,g/=256,i-=8);for(A=A<<i|g,l+=i;0<l;I[C+c]=255&A,c+=o,A/=256,l-=8);I[C+c-o]|=128*n}var h={}.toString,a=Array.isArray||function(I){return"[object Array]"==h.call(I)};Y.TYPED_ARRAY_SUPPORT=void 0===o.TYPED_ARRAY_SUPPORT||o.TYPED_ARRAY_SUPPORT;var s=Y.TYPED_ARRAY_SUPPORT?2147483647:1073741823;function r(I,g){if((Y.TYPED_ARRAY_SUPPORT?2147483647:1073741823)<g)throw new RangeError("Invalid typed array length");return Y.TYPED_ARRAY_SUPPORT?(I=new Uint8Array(g)).__proto__=Y.prototype:(null===I&&(I=new Y(g)),I.length=g),I}function Y(I,g,C){if(!(Y.TYPED_ARRAY_SUPPORT||this instanceof Y))return new Y(I,g,C);if("number"===typeof I){if("string"===typeof g)throw Error("If encoding is specified then the first argument must be a string");return p(this,I)}return W(this,I,g,C)}function W(I,g,C,A){if("number"===typeof g)throw new TypeError('"value" argument must not be a number');if("undefined"!==typeof ArrayBuffer&&g instanceof ArrayBuffer){if(g.byteLength,0>C||g.byteLength<C)throw new RangeError("'offset' is out of bounds");if(g.byteLength<C+(A||0))throw new RangeError("'length' is out of bounds");return g=void 0===C&&void 0===A?new Uint8Array(g):void 0===A?new Uint8Array(g,C):new Uint8Array(g,C,A),Y.TYPED_ARRAY_SUPPORT?(I=g).__proto__=Y.prototype:I=K(I,g),I}if("string"===typeof g){if(A=I,"string"===typeof(I=C)&&""!==I||(I="utf8"),!Y.isEncoding(I))throw new TypeError('"encoding" must be a valid string encoding');return(g=(A=r(A,C=0|J(g,I))).write(g,I))!==C&&(A=A.slice(0,g)),A}return function(I,g){if(H(g)){var C=0|R(g.length);return 0===(I=r(I,C)).length||g.copy(I,0,0,C),I}if(g){if("undefined"!==typeof ArrayBuffer&&g.buffer instanceof ArrayBuffer||"length"in g)return(C="number"!==typeof g.length)||(C=(C=g.length)!==C),C?r(I,0):K(I,g);if("Buffer"===g.type&&a(g.data))return K(I,g.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(I,g)}function S(I){if("number"!==typeof I)throw new TypeError('"size" argument must be a number');if(0>I)throw new RangeError('"size" argument must not be negative')}function p(I,g){if(S(g),I=r(I,0>g?0:0|R(g)),!Y.TYPED_ARRAY_SUPPORT)for(var C=0;C<g;++C)I[C]=0;return I}function K(I,g){var C=0>g.length?0:0|R(g.length);I=r(I,C);for(var A=0;A<C;A+=1)I[A]=255&g[A];return I}function R(I){if(I>=(Y.TYPED_ARRAY_SUPPORT?2147483647:1073741823))throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+(Y.TYPED_ARRAY_SUPPORT?2147483647:1073741823).toString(16)+" bytes");return 0|I}function H(I){return!(null==I||!I._isBuffer)}function J(I,g){if(H(I))return I.length;if("undefined"!==typeof ArrayBuffer&&"function"===typeof ArrayBuffer.isView&&(ArrayBuffer.isView(I)||I instanceof ArrayBuffer))return I.byteLength;"string"!==typeof I&&(I=""+I);var C=I.length;if(0===C)return 0;for(var A=!1;;)switch(g){case"ascii":case"latin1":case"binary":return C;case"utf8":case"utf-8":case void 0:return M(I).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*C;case"hex":return C>>>1;case"base64":return O(I).length;default:if(A)return M(I).length;g=(""+g).toLowerCase(),A=!0}}function F(I,g,C){var A=!1;if((void 0===g||0>g)&&(g=0),g>this.length)return"";if((void 0===C||C>this.length)&&(C=this.length),0>=C)return"";if((C>>>=0)<=(g>>>=0))return"";for(I||(I="utf8");;)switch(I){case"hex":for(I=g,g=C,C=this.length,(!I||0>I)&&(I=0),(!g||0>g||g>C)&&(g=C),A="",C=I;C<g;++C)A=(I=A)+(A=16>(A=this[C])?"0"+A.toString(16):A.toString(16));return A;case"utf8":case"utf-8":return x(this,g,C);case"ascii":for(I="",C=Math.min(this.length,C);g<C;++g)I+=String.fromCharCode(127&this[g]);return I;case"latin1":case"binary":for(I="",C=Math.min(this.length,C);g<C;++g)I+=String.fromCharCode(this[g]);return I;case"base64":return g=0===g&&C===this.length?X(this):X(this.slice(g,C));case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":for(g=this.slice(g,C),C="",I=0;I<g.length;I+=2)C+=String.fromCharCode(g[I]+256*g[I+1]);return C;default:if(A)throw new TypeError("Unknown encoding: "+I);I=(I+"").toLowerCase(),A=!0}}function w(I,g,C){var A=I[g];I[g]=I[C],I[C]=A}function f(I,g,C,A,i){if(0===I.length)return-1;if("string"===typeof C?(A=C,C=0):2147483647<C?C=2147483647:-2147483648>C&&(C=-2147483648),C=+C,isNaN(C)&&(C=i?0:I.length-1),0>C&&(C=I.length+C),C>=I.length){if(i)return-1;C=I.length-1}else if(0>C){if(!i)return-1;C=0}if("string"===typeof g&&(g=Y.from(g,A)),H(g))return 0===g.length?-1:v(I,g,C,A,i);if("number"===typeof g)return g&=255,Y.TYPED_ARRAY_SUPPORT&&"function"===typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(I,g,C):Uint8Array.prototype.lastIndexOf.call(I,g,C):v(I,[g],C,A,i);throw new TypeError("val must be string, number or Buffer")}function v(I,g,C,A,i){function c(I,g){return 1===G?I[g]:I.readUInt16BE(g*G)}var G=1,l=I.length,b=g.length;if(void 0!==A&&("ucs2"===(A=String(A).toLowerCase())||"ucs-2"===A||"utf16le"===A||"utf-16le"===A)){if(2>I.length||2>g.length)return-1;G=2,l/=2,b/=2,C/=2}if(i)for(A=-1;C<l;C++)if(c(I,C)===c(g,-1===A?0:C-A)){if(-1===A&&(A=C),C-A+1===b)return A*G}else-1!==A&&(C-=C-A),A=-1;else for(C+b>l&&(C=l-b);0<=C;C--){for(l=!0,A=0;A<b;A++)if(c(I,C+A)!==c(g,A)){l=!1;break}if(l)return C}return-1}function x(I,g,C){C=Math.min(I.length,C);for(var A=[];g<C;){var i=I[g],c=null,G=239<i?4:223<i?3:191<i?2:1;if(g+G<=C)switch(G){case 1:128>i&&(c=i);break;case 2:var l=I[g+1];128===(192&l)&&(127<(i=(31&i)<<6|63&l)&&(c=i));break;case 3:l=I[g+1];var b=I[g+2];128===(192&l)&&128===(192&b)&&(2047<(i=(15&i)<<12|(63&l)<<6|63&b)&&(55296>i||57343<i)&&(c=i));break;case 4:l=I[g+1],b=I[g+2];var Z=I[g+3];128===(192&l)&&128===(192&b)&&128===(192&Z)&&(65535<(i=(15&i)<<18|(63&l)<<12|(63&b)<<6|63&Z)&&1114112>i&&(c=i))}null===c?(c=65533,G=1):65535<c&&(c-=65536,A.push(c>>>10&1023|55296),c=56320|1023&c),A.push(c),g+=G}if((I=A.length)<=N)A=String.fromCharCode.apply(String,A);else{for(C="",g=0;g<I;)C+=String.fromCharCode.apply(String,A.slice(g,g+=N));A=C}return A}Y.poolSize=8192,Y._augment=function(I){return I.__proto__=Y.prototype,I},Y.from=function(I,g,C){return W(null,I,g,C)},Y.TYPED_ARRAY_SUPPORT&&(Y.prototype.__proto__=Uint8Array.prototype,Y.__proto__=Uint8Array),Y.alloc=function(I,g,C){return S(I),I=0>=I?r(null,I):void 0!==g?"string"===typeof C?r(null,I).fill(g,C):r(null,I).fill(g):r(null,I)},Y.allocUnsafe=function(I){return p(null,I)},Y.allocUnsafeSlow=function(I){return p(null,I)},Y.isBuffer=q,Y.compare=function(I,g){if(!H(I)||!H(g))throw new TypeError("Arguments must be Buffers");if(I===g)return 0;for(var C=I.length,A=g.length,i=0,c=Math.min(C,A);i<c;++i)if(I[i]!==g[i]){C=I[i],A=g[i];break}return C<A?-1:A<C?1:0},Y.isEncoding=function(I){switch(String(I).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Y.concat=function(I,g){if(!a(I))throw new TypeError('"list" argument must be an Array of Buffers');if(0===I.length)return Y.alloc(0);var C;if(void 0===g)for(C=g=0;C<I.length;++C)g+=I[C].length;g=Y.allocUnsafe(g);var A=0;for(C=0;C<I.length;++C){var i=I[C];if(!H(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(g,A),A+=i.length}return g},Y.byteLength=J,Y.prototype._isBuffer=!0,Y.prototype.swap16=function(){var I=this.length;if(0!==I%2)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var g=0;g<I;g+=2)w(this,g,g+1);return this},Y.prototype.swap32=function(){var I=this.length;if(0!==I%4)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var g=0;g<I;g+=4)w(this,g,g+3),w(this,g+1,g+2);return this},Y.prototype.swap64=function(){var I=this.length;if(0!==I%8)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var g=0;g<I;g+=8)w(this,g,g+7),w(this,g+1,g+6),w(this,g+2,g+5),w(this,g+3,g+4);return this},Y.prototype.toString=function(){var I=0|this.length;return 0===I?"":0===arguments.length?x(this,0,I):F.apply(this,arguments)},Y.prototype.equals=function(I){if(!H(I))throw new TypeError("Argument must be a Buffer");return this===I||0===Y.compare(this,I)},Y.prototype.inspect=function(){var I="";return 0<this.length&&(I=this.toString("hex",0,50).match(/.{2}/g).join(" "),50<this.length&&(I+=" ... ")),"<Buffer "+I+">"},Y.prototype.compare=function(I,g,C,A,i){if(!H(I))throw new TypeError("Argument must be a Buffer");if(void 0===g&&(g=0),void 0===C&&(C=I?I.length:0),void 0===A&&(A=0),void 0===i&&(i=this.length),0>g||C>I.length||0>A||i>this.length)throw new RangeError("out of range index");if(A>=i&&g>=C)return 0;if(A>=i)return-1;if(g>=C)return 1;if(this===I)return 0;var c=(i>>>=0)-(A>>>=0),G=(C>>>=0)-(g>>>=0),l=Math.min(c,G);for(A=this.slice(A,i),I=I.slice(g,C),g=0;g<l;++g)if(A[g]!==I[g]){c=A[g],G=I[g];break}return c<G?-1:G<c?1:0},Y.prototype.includes=function(I,g,C){return-1!==this.indexOf(I,g,C)},Y.prototype.indexOf=function(I,g,C){return f(this,I,g,C,!0)},Y.prototype.lastIndexOf=function(I,g,C){return f(this,I,g,C,!1)},Y.prototype.write=function(I,g,C,A){if(void 0===g)A="utf8",C=this.length,g=0;else if(void 0===C&&"string"===typeof g)A=g,C=this.length,g=0;else{if(!isFinite(g))throw Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");g|=0,isFinite(C)?(C|=0,void 0===A&&(A="utf8")):(A=C,C=void 0)}var i=this.length-g;if((void 0===C||C>i)&&(C=i),0<I.length&&(0>C||0>g)||g>this.length)throw new RangeError("Attempt to write outside buffer bounds");for(A||(A="utf8"),i=!1;;)switch(A){case"hex":I:{if(g=Number(g)||0,A=this.length-g,C?(C=Number(C))>A&&(C=A):C=A,0!==(A=I.length)%2)throw new TypeError("Invalid hex string");for(C>A/2&&(C=A/2),A=0;A<C;++A){if(i=parseInt(I.substr(2*A,2),16),isNaN(i)){I=A;break I}this[g+A]=i}I=A}return I;case"utf8":case"utf-8":return P(M(I,this.length-g),this,g,C);case"ascii":case"latin1":case"binary":return P(D(I),this,g,C);case"base64":return P(O(I),this,g,C);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":A=I,i=this.length-g;for(var c=[],G=0;G<A.length&&!(0>(i-=2));++G){var l=A.charCodeAt(G);I=l>>8,l%=256,c.push(l),c.push(I)}return P(c,this,g,C);default:if(i)throw new TypeError("Unknown encoding: "+A);A=(""+A).toLowerCase(),i=!0}},Y.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var N=4096;function L(I,g,C){if(0!==I%1||0>I)throw new RangeError("offset is not uint");if(I+g>C)throw new RangeError("Trying to access beyond buffer length")}function k(I,g,C,A,i,c){if(!H(I))throw new TypeError('"buffer" argument must be a Buffer instance');if(g>i||g<c)throw new RangeError('"value" argument is out of bounds');if(C+A>I.length)throw new RangeError("Index out of range")}function T(I,g,C,A){0>g&&(g=65535+g+1);for(var i=0,c=Math.min(I.length-C,2);i<c;++i)I[C+i]=(g&255<<8*(A?i:1-i))>>>8*(A?i:1-i)}function U(I,g,C,A){0>g&&(g=4294967295+g+1);for(var i=0,c=Math.min(I.length-C,4);i<c;++i)I[C+i]=g>>>8*(A?i:3-i)&255}function z(I,g,C,A){if(C+A>I.length)throw new RangeError("Index out of range");if(0>C)throw new RangeError("Index out of range")}Y.prototype.slice=function(I,g){var C=this.length;if(0>(I=~~I)?0>(I+=C)&&(I=0):I>C&&(I=C),0>(g=void 0===g?C:~~g)?0>(g+=C)&&(g=0):g>C&&(g=C),g<I&&(g=I),Y.TYPED_ARRAY_SUPPORT)(g=this.subarray(I,g)).__proto__=Y.prototype;else{g=new Y(C=g-I,void 0);for(var A=0;A<C;++A)g[A]=this[A+I]}return g},Y.prototype.readUIntLE=function(I,g,C){I|=0,g|=0,C||L(I,g,this.length),C=this[I];for(var A=1,i=0;++i<g&&(A*=256);)C+=this[I+i]*A;return C},Y.prototype.readUIntBE=function(I,g,C){I|=0,g|=0,C||L(I,g,this.length),C=this[I+--g];for(var A=1;0<g&&(A*=256);)C+=this[I+--g]*A;return C},Y.prototype.readUInt8=function(I,g){return g||L(I,1,this.length),this[I]},Y.prototype.readUInt16LE=function(I,g){return g||L(I,2,this.length),this[I]|this[I+1]<<8},Y.prototype.readUInt16BE=function(I,g){return g||L(I,2,this.length),this[I]<<8|this[I+1]},Y.prototype.readUInt32LE=function(I,g){return g||L(I,4,this.length),(this[I]|this[I+1]<<8|this[I+2]<<16)+16777216*this[I+3]},Y.prototype.readUInt32BE=function(I,g){return g||L(I,4,this.length),16777216*this[I]+(this[I+1]<<16|this[I+2]<<8|this[I+3])},Y.prototype.readIntLE=function(I,g,C){I|=0,g|=0,C||L(I,g,this.length),C=this[I];for(var A=1,i=0;++i<g&&(A*=256);)C+=this[I+i]*A;return C>=128*A&&(C-=Math.pow(2,8*g)),C},Y.prototype.readIntBE=function(I,g,C){I|=0,g|=0,C||L(I,g,this.length),C=g;for(var A=1,i=this[I+--C];0<C&&(A*=256);)i+=this[I+--C]*A;return i>=128*A&&(i-=Math.pow(2,8*g)),i},Y.prototype.readInt8=function(I,g){return g||L(I,1,this.length),128&this[I]?-1*(255-this[I]+1):this[I]},Y.prototype.readInt16LE=function(I,g){return g||L(I,2,this.length),32768&(I=this[I]|this[I+1]<<8)?4294901760|I:I},Y.prototype.readInt16BE=function(I,g){return g||L(I,2,this.length),32768&(I=this[I+1]|this[I]<<8)?4294901760|I:I},Y.prototype.readInt32LE=function(I,g){return g||L(I,4,this.length),this[I]|this[I+1]<<8|this[I+2]<<16|this[I+3]<<24},Y.prototype.readInt32BE=function(I,g){return g||L(I,4,this.length),this[I]<<24|this[I+1]<<16|this[I+2]<<8|this[I+3]},Y.prototype.readFloatLE=function(I,g){return g||L(I,4,this.length),y(this,I,!0,23,4)},Y.prototype.readFloatBE=function(I,g){return g||L(I,4,this.length),y(this,I,!1,23,4)},Y.prototype.readDoubleLE=function(I,g){return g||L(I,8,this.length),y(this,I,!0,52,8)},Y.prototype.readDoubleBE=function(I,g){return g||L(I,8,this.length),y(this,I,!1,52,8)},Y.prototype.writeUIntLE=function(I,g,C,A){I=+I,g|=0,C|=0,A||k(this,I,g,C,Math.pow(2,8*C)-1,0),A=1;var i=0;for(this[g]=255&I;++i<C&&(A*=256);)this[g+i]=I/A&255;return g+C},Y.prototype.writeUIntBE=function(I,g,C,A){I=+I,g|=0,C|=0,A||k(this,I,g,C,Math.pow(2,8*C)-1,0);var i=1;for(this[g+(A=C-1)]=255&I;0<=--A&&(i*=256);)this[g+A]=I/i&255;return g+C},Y.prototype.writeUInt8=function(I,g,C){return I=+I,g|=0,C||k(this,I,g,1,255,0),Y.TYPED_ARRAY_SUPPORT||(I=Math.floor(I)),this[g]=255&I,g+1},Y.prototype.writeUInt16LE=function(I,g,C){return I=+I,g|=0,C||k(this,I,g,2,65535,0),Y.TYPED_ARRAY_SUPPORT?(this[g]=255&I,this[g+1]=I>>>8):T(this,I,g,!0),g+2},Y.prototype.writeUInt16BE=function(I,g,C){return I=+I,g|=0,C||k(this,I,g,2,65535,0),Y.TYPED_ARRAY_SUPPORT?(this[g]=I>>>8,this[g+1]=255&I):T(this,I,g,!1),g+2},Y.prototype.writeUInt32LE=function(I,g,C){return I=+I,g|=0,C||k(this,I,g,4,4294967295,0),Y.TYPED_ARRAY_SUPPORT?(this[g+3]=I>>>24,this[g+2]=I>>>16,this[g+1]=I>>>8,this[g]=255&I):U(this,I,g,!0),g+4},Y.prototype.writeUInt32BE=function(I,g,C){return I=+I,g|=0,C||k(this,I,g,4,4294967295,0),Y.TYPED_ARRAY_SUPPORT?(this[g]=I>>>24,this[g+1]=I>>>16,this[g+2]=I>>>8,this[g+3]=255&I):U(this,I,g,!1),g+4},Y.prototype.writeIntLE=function(I,g,C,A){I=+I,g|=0,A||k(this,I,g,C,(A=Math.pow(2,8*C-1))-1,-A),A=0;var i=1,c=0;for(this[g]=255&I;++A<C&&(i*=256);)0>I&&0===c&&0!==this[g+A-1]&&(c=1),this[g+A]=(I/i>>0)-c&255;return g+C},Y.prototype.writeIntBE=function(I,g,C,A){I=+I,g|=0,A||k(this,I,g,C,(A=Math.pow(2,8*C-1))-1,-A);var i=1,c=0;for(this[g+(A=C-1)]=255&I;0<=--A&&(i*=256);)0>I&&0===c&&0!==this[g+A+1]&&(c=1),this[g+A]=(I/i>>0)-c&255;return g+C},Y.prototype.writeInt8=function(I,g,C){return I=+I,g|=0,C||k(this,I,g,1,127,-128),Y.TYPED_ARRAY_SUPPORT||(I=Math.floor(I)),0>I&&(I=255+I+1),this[g]=255&I,g+1},Y.prototype.writeInt16LE=function(I,g,C){return I=+I,g|=0,C||k(this,I,g,2,32767,-32768),Y.TYPED_ARRAY_SUPPORT?(this[g]=255&I,this[g+1]=I>>>8):T(this,I,g,!0),g+2},Y.prototype.writeInt16BE=function(I,g,C){return I=+I,g|=0,C||k(this,I,g,2,32767,-32768),Y.TYPED_ARRAY_SUPPORT?(this[g]=I>>>8,this[g+1]=255&I):T(this,I,g,!1),g+2},Y.prototype.writeInt32LE=function(I,g,C){return I=+I,g|=0,C||k(this,I,g,4,2147483647,-2147483648),Y.TYPED_ARRAY_SUPPORT?(this[g]=255&I,this[g+1]=I>>>8,this[g+2]=I>>>16,this[g+3]=I>>>24):U(this,I,g,!0),g+4},Y.prototype.writeInt32BE=function(I,g,C){return I=+I,g|=0,C||k(this,I,g,4,2147483647,-2147483648),0>I&&(I=4294967295+I+1),Y.TYPED_ARRAY_SUPPORT?(this[g]=I>>>24,this[g+1]=I>>>16,this[g+2]=I>>>8,this[g+3]=255&I):U(this,I,g,!1),g+4},Y.prototype.writeFloatLE=function(I,g,C){return C||z(this,0,g,4),V(this,I,g,!0,23,4),g+4},Y.prototype.writeFloatBE=function(I,g,C){return C||z(this,0,g,4),V(this,I,g,!1,23,4),g+4},Y.prototype.writeDoubleLE=function(I,g,C){return C||z(this,0,g,8),V(this,I,g,!0,52,8),g+8},Y.prototype.writeDoubleBE=function(I,g,C){return C||z(this,0,g,8),V(this,I,g,!1,52,8),g+8},Y.prototype.copy=function(I,g,C,A){if(C||(C=0),A||0===A||(A=this.length),g>=I.length&&(g=I.length),g||(g=0),0<A&&A<C&&(A=C),A===C||0===I.length||0===this.length)return 0;if(0>g)throw new RangeError("targetStart out of bounds");if(0>C||C>=this.length)throw new RangeError("sourceStart out of bounds");if(0>A)throw new RangeError("sourceEnd out of bounds");A>this.length&&(A=this.length),I.length-g<A-C&&(A=I.length-g+C);var i=A-C;if(this===I&&C<g&&g<A)for(A=i-1;0<=A;--A)I[A+g]=this[A+C];else if(1e3>i||!Y.TYPED_ARRAY_SUPPORT)for(A=0;A<i;++A)I[A+g]=this[A+C];else Uint8Array.prototype.set.call(I,this.subarray(C,C+i),g);return i},Y.prototype.fill=function(I,g,C,A){if("string"===typeof I){if("string"===typeof g?(A=g,g=0,C=this.length):"string"===typeof C&&(A=C,C=this.length),1===I.length){var i=I.charCodeAt(0);256>i&&(I=i)}if(void 0!==A&&"string"!==typeof A)throw new TypeError("encoding must be a string");if("string"===typeof A&&!Y.isEncoding(A))throw new TypeError("Unknown encoding: "+A)}else"number"===typeof I&&(I&=255);if(0>g||this.length<g||this.length<C)throw new RangeError("Out of range index");if(C<=g)return this;if(g>>>=0,C=void 0===C?this.length:C>>>0,I||(I=0),"number"===typeof I)for(A=g;A<C;++A)this[A]=I;else for(i=(I=H(I)?I:M(new Y(I,A).toString())).length,A=0;A<C-g;++A)this[A+g]=I[A%i];return this};var E=/[^+\/0-9A-Za-z-_]/g;function M(I,g){g=g||1/0;for(var C,A=I.length,i=null,c=[],G=0;G<A;++G){if(55295<(C=I.charCodeAt(G))&&57344>C){if(!i){if(56319<C){-1<(g-=3)&&c.push(239,191,189);continue}if(G+1===A){-1<(g-=3)&&c.push(239,191,189);continue}i=C;continue}if(56320>C){-1<(g-=3)&&c.push(239,191,189),i=C;continue}C=65536+(i-55296<<10|C-56320)}else i&&-1<(g-=3)&&c.push(239,191,189);if(i=null,128>C){if(0>--g)break;c.push(C)}else if(2048>C){if(0>(g-=2))break;c.push(C>>6|192,63&C|128)}else if(65536>C){if(0>(g-=3))break;c.push(C>>12|224,C>>6&63|128,63&C|128)}else{if(!(1114112>C))throw Error("Invalid code point");if(0>(g-=4))break;c.push(C>>18|240,C>>12&63|128,C>>6&63|128,63&C|128)}}return c}function D(I){for(var g=[],C=0;C<I.length;++C)g.push(255&I.charCodeAt(C));return g}function O(I){if(2>(I=(I.trim?I.trim():I.replace(/^\s+|\s+$/g,"")).replace(E,"")).length)I="";else for(;0!==I.length%4;)I+="=";m||e();var g=I.length;if(0<g%4)throw Error("Invalid string. Length must be a multiple of 4");var C="="===I[g-2]?2:"="===I[g-1]?1:0,A=new d(3*g/4-C),i=0<C?g-4:g,c=0;for(g=0;g<i;g+=4){var G=u[I.charCodeAt(g)]<<18|u[I.charCodeAt(g+1)]<<12|u[I.charCodeAt(g+2)]<<6|u[I.charCodeAt(g+3)];A[c++]=G>>16&255,A[c++]=G>>8&255,A[c++]=255&G}return 2===C?(G=u[I.charCodeAt(g)]<<2|u[I.charCodeAt(g+1)]>>4,A[c++]=255&G):1===C&&(G=u[I.charCodeAt(g)]<<10|u[I.charCodeAt(g+1)]<<4|u[I.charCodeAt(g+2)]>>2,A[c++]=G>>8&255,A[c++]=255&G),A}function P(I,g,C,A){for(var i=0;i<A&&!(i+C>=g.length||i>=I.length);++i)g[i+C]=I[i];return i}function q(I){return null!=I&&(!!I._isBuffer||j(I)||"function"===typeof I.readFloatLE&&"function"===typeof I.slice&&j(I.slice(0,0)))}function j(I){return!!I.constructor&&"function"===typeof I.constructor.isBuffer&&I.constructor.isBuffer(I)}var Q=Object.freeze({__proto__:null,INSPECT_MAX_BYTES:50,kMaxLength:s,Buffer:Y,SlowBuffer:function(I){return+I!=I&&(I=0),Y.alloc(+I)},isBuffer:q}),_=Y,$="undefined"!==typeof globalThis?globalThis:"undefined"!==typeof window?window:"undefined"!==typeof C.g?C.g:"undefined"!==typeof self?self:{};function II(I,g){return I(g={exports:{}},g.exports),g.exports}function gI(){throw Error("setTimeout has not been defined")}function CI(){throw Error("clearTimeout has not been defined")}var AI=gI,iI=CI;function cI(I){if(AI===setTimeout)return setTimeout(I,0);if((AI===gI||!AI)&&setTimeout)return AI=setTimeout,setTimeout(I,0);try{return AI(I,0)}catch(g){try{return AI.call(null,I,0)}catch(C){return AI.call(this,I,0)}}}"function"===typeof o.setTimeout&&(AI=setTimeout),"function"===typeof o.clearTimeout&&(iI=clearTimeout);var GI,lI=[],bI=!1,ZI=-1;function tI(){bI&&GI&&(bI=!1,GI.length?lI=GI.concat(lI):ZI=-1,lI.length&&oI())}function oI(){if(!bI){var I=cI(tI);bI=!0;for(var g=lI.length;g;){for(GI=lI,lI=[];++ZI<g;)GI&&GI[ZI].run();ZI=-1,g=lI.length}GI=null,bI=!1,function(I){if(iI===clearTimeout)return clearTimeout(I);if((iI===CI||!iI)&&clearTimeout)return iI=clearTimeout,clearTimeout(I);try{iI(I)}catch(g){try{return iI.call(null,I)}catch(C){return iI.call(this,I)}}}(I)}}function nI(I){var g=Array(arguments.length-1);if(1<arguments.length)for(var C=1;C<arguments.length;C++)g[C-1]=arguments[C];lI.push(new uI(I,g)),1!==lI.length||bI||cI(oI)}function uI(I,g){this.fun=I,this.array=g}uI.prototype.run=function(){this.fun.apply(null,this.array)};var dI=o.performance||{},mI=(dI.now||dI.mozNow||dI.msNow||dI.oNow||dI.webkitNow,new Date,function(){return"/"}),eI=II((function(I,g){function C(I,g){for(var C in I)g[C]=I[C]}function A(I,g,C){return i(I,g,C)}var i=Q.Buffer;i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?I.exports=Q:(C(Q,g),g.Buffer=A),A.prototype=Object.create(i.prototype),C(i,A),A.from=function(I,g,C){if("number"===typeof I)throw new TypeError("Argument must not be a number");return i(I,g,C)},A.alloc=function(I,g,C){if("number"!==typeof I)throw new TypeError("Argument must be a number");return I=i(I),void 0!==g?"string"===typeof C?I.fill(g,C):I.fill(g):I.fill(0),I},A.allocUnsafe=function(I){if("number"!==typeof I)throw new TypeError("Argument must be a number");return i(I)},A.allocUnsafeSlow=function(I){if("number"!==typeof I)throw new TypeError("Argument must be a number");return Q.SlowBuffer(I)}})),BI=II((function(I,g){function C(){throw Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11")}function A(I,g){if("number"!==typeof I||I!==I)throw new TypeError("offset must be a number");if(I>Z||0>I)throw new TypeError("offset must be a uint32");if(I>l||I>g)throw new RangeError("offset out of range")}function i(I,g,C){if("number"!==typeof I||I!==I)throw new TypeError("size must be a number");if(I>Z||0>I)throw new TypeError("size must be a uint32");if(I+g>C||I>l)throw new RangeError("buffer too small")}function c(I,g,C,A){if(g=new Uint8Array(I.buffer,g,C),b.getRandomValues(g),!A)return I;nI((function(){A(null,I)}))}var G=eI.Buffer,l=eI.kMaxLength,b=$.crypto||$.msCrypto,Z=Math.pow(2,32)-1;b&&b.getRandomValues?(g.randomFill=function(I,g,C,l){if(!(G.isBuffer(I)||I instanceof $.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');if("function"===typeof g)l=g,g=0,C=I.length;else if("function"===typeof C)l=C,C=I.length-g;else if("function"!==typeof l)throw new TypeError('"cb" argument must be a function');return A(g,I.length),i(C,g,I.length),c(I,g,C,l)},g.randomFillSync=function(I,g,C){if("undefined"===typeof g&&(g=0),!(G.isBuffer(I)||I instanceof $.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');return A(g,I.length),void 0===C&&(C=I.length-g),i(C,g,I.length),c(I,g,C)}):(g.randomFill=C,g.randomFillSync=C)})),XI=II((function(I){I.exports=BI})).randomFillSync,yI=Math.floor(.001*(Date.now()-performance.now()));function VI(I){if("string"!==typeof I)throw new TypeError("Path must be a string. Received "+JSON.stringify(I))}function hI(I,g){for(var C,A="",i=0,c=-1,G=0,l=0;l<=I.length;++l){if(l<I.length)C=I.charCodeAt(l);else{if(47===C)break;C=47}if(47===C){if(c!==l-1&&1!==G)if(c!==l-1&&2===G){if(2>A.length||2!==i||46!==A.charCodeAt(A.length-1)||46!==A.charCodeAt(A.length-2))if(2<A.length){if((c=A.lastIndexOf("/"))!==A.length-1){-1===c?(A="",i=0):i=(A=A.slice(0,c)).length-1-A.lastIndexOf("/"),c=l,G=0;continue}}else if(2===A.length||1===A.length){A="",i=0,c=l,G=0;continue}g&&(A=0<A.length?A+"/..":"..",i=2)}else A=0<A.length?A+"/"+I.slice(c+1,l):I.slice(c+1,l),i=l-c-1;c=l,G=0}else 46===C&&-1!==G?++G:G=-1}return A}var aI,sI={resolve:function(){for(var I,g="",C=!1,A=arguments.length-1;-1<=A&&!C;A--){if(0<=A)var i=arguments[A];else void 0===I&&(I=mI()),i=I;VI(i),0!==i.length&&(g=i+"/"+g,C=47===i.charCodeAt(0))}return g=hI(g,!C),C?0<g.length?"/"+g:"/":0<g.length?g:"."},normalize:function(I){if(VI(I),0===I.length)return".";var g=47===I.charCodeAt(0),C=47===I.charCodeAt(I.length-1);return 0!==(I=hI(I,!g)).length||g||(I="."),0<I.length&&C&&(I+="/"),g?"/"+I:I},isAbsolute:function(I){return VI(I),0<I.length&&47===I.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var I,g=0;g<arguments.length;++g){var C=arguments[g];VI(C),0<C.length&&(I=void 0===I?C:I+"/"+C)}return void 0===I?".":sI.normalize(I)},relative:function(I,g){if(VI(I),VI(g),I===g)return"";if((I=sI.resolve(I))===(g=sI.resolve(g)))return"";for(var C=1;C<I.length&&47===I.charCodeAt(C);++C);for(var A=I.length,i=A-C,c=1;c<g.length&&47===g.charCodeAt(c);++c);for(var G=g.length-c,l=i<G?i:G,b=-1,Z=0;Z<=l;++Z){if(Z===l){if(G>l){if(47===g.charCodeAt(c+Z))return g.slice(c+Z+1);if(0===Z)return g.slice(c+Z)}else i>l&&(47===I.charCodeAt(C+Z)?b=Z:0===Z&&(b=0));break}var t=I.charCodeAt(C+Z);if(t!==g.charCodeAt(c+Z))break;47===t&&(b=Z)}for(i="",Z=C+b+1;Z<=A;++Z)Z!==A&&47!==I.charCodeAt(Z)||(i=0===i.length?i+"..":i+"/..");return 0<i.length?i+g.slice(c+b):(c+=b,47===g.charCodeAt(c)&&++c,g.slice(c))},_makeLong:function(I){return I},dirname:function(I){if(VI(I),0===I.length)return".";for(var g=I.charCodeAt(0),C=47===g,A=-1,i=!0,c=I.length-1;1<=c;--c)if(47===(g=I.charCodeAt(c))){if(!i){A=c;break}}else i=!1;return-1===A?C?"/":".":C&&1===A?"//":I.slice(0,A)},basename:function(I,g){if(void 0!==g&&"string"!==typeof g)throw new TypeError('"ext" argument must be a string');VI(I);var C,A=0,i=-1,c=!0;if(void 0!==g&&0<g.length&&g.length<=I.length){if(g.length===I.length&&g===I)return"";var G=g.length-1,l=-1;for(C=I.length-1;0<=C;--C){var b=I.charCodeAt(C);if(47===b){if(!c){A=C+1;break}}else-1===l&&(c=!1,l=C+1),0<=G&&(b===g.charCodeAt(G)?-1===--G&&(i=C):(G=-1,i=l))}return A===i?i=l:-1===i&&(i=I.length),I.slice(A,i)}for(C=I.length-1;0<=C;--C)if(47===I.charCodeAt(C)){if(!c){A=C+1;break}}else-1===i&&(c=!1,i=C+1);return-1===i?"":I.slice(A,i)},extname:function(I){VI(I);for(var g=-1,C=0,A=-1,i=!0,c=0,G=I.length-1;0<=G;--G){var l=I.charCodeAt(G);if(47===l){if(!i){C=G+1;break}}else-1===A&&(i=!1,A=G+1),46===l?-1===g?g=G:1!==c&&(c=1):-1!==g&&(c=-1)}return-1===g||-1===A||0===c||1===c&&g===A-1&&g===C+1?"":I.slice(g,A)},format:function(I){if(null===I||"object"!==typeof I)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof I);var g=I.dir||I.root,C=I.base||(I.name||"")+(I.ext||"");return I=g?g===I.root?g+C:g+"/"+C:C},parse:function(I){VI(I);var g={root:"",dir:"",base:"",ext:"",name:""};if(0===I.length)return g;var C=I.charCodeAt(0),A=47===C;if(A){g.root="/";var i=1}else i=0;for(var c=-1,G=0,l=-1,b=!0,Z=I.length-1,t=0;Z>=i;--Z)if(47===(C=I.charCodeAt(Z))){if(!b){G=Z+1;break}}else-1===l&&(b=!1,l=Z+1),46===C?-1===c?c=Z:1!==t&&(t=1):-1!==c&&(t=-1);return-1===c||-1===l||0===t||1===t&&c===l-1&&c===G+1?-1!==l&&(g.base=g.name=0===G&&A?I.slice(1,l):I.slice(G,l)):(0===G&&A?(g.name=I.slice(1,c),g.base=I.slice(1,l)):(g.name=I.slice(G,c),g.base=I.slice(G,l)),g.ext=I.slice(c,l)),0<G?g.dir=I.slice(0,G-1):A&&(g.dir="/"),g},sep:"/",delimiter:":",win32:null,posix:null},rI=sI.posix=sI,YI={hrtime:function(I){return 1e9*(I=function(I){var g=.001*performance.now(),C=Math.floor(g)+yI;return g=Math.floor(g%1*1e9),I&&(C-=I[0],0>(g-=I[1])&&(C--,g+=1e9)),[C,g]}(I))[0]+I[1]},exit:function(I){throw new yg(I)},kill:function(I){throw new Vg(I)},randomFillSync:XI,isTTY:function(){return!0},path:Object.freeze({__proto__:null,default:rI,__moduleExports:rI}),fs:null},WI=Z(1),SI=Z(2),pI=Z(4),KI=Z(8),RI=Z(16),HI=Z(32),JI=Z(64),FI=Z(128),wI=Z(256),fI=Z(512),vI=Z(1024),xI=Z(2048),NI=Z(4096),LI=Z(8192),kI=Z(16384),TI=Z(32768),UI=Z(65536),zI=Z(131072),EI=Z(262144),MI=Z(524288),DI=Z(1048576),OI=Z(2097152),PI=Z(4194304),qI=Z(8388608),jI=Z(16777216),QI=Z(33554432),_I=Z(67108864),$I=Z(134217728),Ig=Z(268435456),gg=WI|SI|pI|KI|RI|HI|JI|FI|wI|fI|vI|xI|NI|LI|kI|TI|UI|zI|EI|MI|DI|OI|qI|PI|jI|_I|QI|$I|Ig,Cg=WI|SI|pI|KI|RI|HI|JI|FI|wI|OI|PI|qI|$I,Ag=Z(0),ig=KI|RI|FI|fI|vI|xI|NI|LI|kI|TI|UI|zI|EI|MI|DI|OI|qI|jI|_I|QI|$I,cg=ig|Cg,Gg=SI|KI|JI|OI|$I|Ig,lg=SI|KI|JI|OI|$I,bg=Z(0),Zg={E2BIG:1,EACCES:2,EADDRINUSE:3,EADDRNOTAVAIL:4,EAFNOSUPPORT:5,EALREADY:7,EAGAIN:6,EBADF:8,EBADMSG:9,EBUSY:10,ECANCELED:11,ECHILD:12,ECONNABORTED:13,ECONNREFUSED:14,ECONNRESET:15,EDEADLOCK:16,EDESTADDRREQ:17,EDOM:18,EDQUOT:19,EEXIST:20,EFAULT:21,EFBIG:22,EHOSTDOWN:23,EHOSTUNREACH:23,EIDRM:24,EILSEQ:25,EINPROGRESS:26,EINTR:27,EINVAL:28,EIO:29,EISCONN:30,EISDIR:31,ELOOP:32,EMFILE:33,EMLINK:34,EMSGSIZE:35,EMULTIHOP:36,ENAMETOOLONG:37,ENETDOWN:38,ENETRESET:39,ENETUNREACH:40,ENFILE:41,ENOBUFS:42,ENODEV:43,ENOENT:44,ENOEXEC:45,ENOLCK:46,ENOLINK:47,ENOMEM:48,ENOMSG:49,ENOPROTOOPT:50,ENOSPC:51,ENOSYS:52,ENOTCONN:53,ENOTDIR:54,ENOTEMPTY:55,ENOTRECOVERABLE:56,ENOTSOCK:57,ENOTTY:59,ENXIO:60,EOVERFLOW:61,EOWNERDEAD:62,EPERM:63,EPIPE:64,EPROTO:65,EPROTONOSUPPORT:66,EPROTOTYPE:67,ERANGE:68,EROFS:69,ESPIPE:70,ESRCH:71,ESTALE:72,ETIMEDOUT:73,ETXTBSY:74,EXDEV:75},tg=((aI={})[6]="SIGHUP",aI[8]="SIGINT",aI[11]="SIGQUIT",aI[7]="SIGILL",aI[15]="SIGTRAP",aI[0]="SIGABRT",aI[2]="SIGBUS",aI[5]="SIGFPE",aI[9]="SIGKILL",aI[20]="SIGUSR1",aI[12]="SIGSEGV",aI[21]="SIGUSR2",aI[10]="SIGPIPE",aI[1]="SIGALRM",aI[14]="SIGTERM",aI[3]="SIGCHLD",aI[4]="SIGCONT",aI[13]="SIGSTOP",aI[16]="SIGTSTP",aI[17]="SIGTTIN",aI[18]="SIGTTOU",aI[19]="SIGURG",aI[23]="SIGXCPU",aI[24]="SIGXFSZ",aI[22]="SIGVTALRM",aI),og=WI|SI|RI|FI|OI|$I,ng=WI|JI|RI|FI|OI|$I;function ug(I){var g=Math.trunc(I);return I=Z(Math.round(1e6*(I-g))),Z(g)*Z(1e6)+I}function dg(I){return"number"===typeof I&&(I=Math.trunc(I)),I=Z(I),Number(I/Z(1e6))}function mg(I){return function(){for(var g=[],C=0;C<arguments.length;C++)g[C]=arguments[C];try{return I.apply(void 0,l(g))}catch(A){if(A&&A.code&&"string"===typeof A.code)return Zg[A.code]||28;if(A instanceof Xg)return A.errno;throw A}}}function eg(I,g){var C=I.FD_MAP.get(g);if(!C)throw new Xg(8);if(void 0===C.filetype){var A=I.bindings.fs.fstatSync(C.real);g=(I=Bg(I,g,A)).rightsBase,A=I.rightsInheriting,C.filetype=I.filetype,C.rights||(C.rights={base:g,inheriting:A})}return C}function Bg(I,g,C){switch(!0){case C.isBlockDevice():return{filetype:1,rightsBase:gg,rightsInheriting:gg};case C.isCharacterDevice():return void 0!==g&&I.bindings.isTTY(g)?{filetype:2,rightsBase:lg,rightsInheriting:bg}:{filetype:2,rightsBase:gg,rightsInheriting:gg};case C.isDirectory():return{filetype:3,rightsBase:ig,rightsInheriting:cg};case C.isFIFO():return{filetype:6,rightsBase:Gg,rightsInheriting:gg};case C.isFile():return{filetype:4,rightsBase:Cg,rightsInheriting:Ag};case C.isSocket():return{filetype:6,rightsBase:Gg,rightsInheriting:gg};case C.isSymbolicLink():return{filetype:7,rightsBase:Z(0),rightsInheriting:Z(0)};default:return{filetype:0,rightsBase:Z(0),rightsInheriting:Z(0)}}}var Xg=function(I){function g(C){var A=I.call(this)||this;return A.errno=C,Object.setPrototypeOf(A,g.prototype),A}return i(g,I),g}(Error),yg=function(I){function g(C){var A=I.call(this,"WASI Exit error: "+C)||this;return A.code=C,Object.setPrototypeOf(A,g.prototype),A}return i(g,I),g}(Error),Vg=function(I){function g(C){var A=I.call(this,"WASI Kill signal: "+C)||this;return A.signal=C,Object.setPrototypeOf(A,g.prototype),A}return i(g,I),g}(Error),hg=function(){function I(I){function g(I){switch(I){case 1:return u.hrtime();case 0:return ug(Date.now());case 2:case 3:return u.hrtime()-r;default:return null}}function C(I,g){if(I=eg(b,I),g!==Z(0)&&(I.rights.base&g)===Z(0))throw new Xg(63);return I}function A(I,g){return b.refreshMemory(),Array.from({length:g},(function(g,C){return C=I+8*C,g=b.view.getUint32(C,!0),C=b.view.getUint32(C+4,!0),new Uint8Array(b.memory.buffer,g,C)}))}var i,b=this,t={};I&&I.preopens?t=I.preopens:I&&I.preopenDirectories&&(t=I.preopenDirectories);var o={};I&&I.env&&(o=I.env);var n=[];I&&I.args&&(n=I.args);var u=YI;I&&I.bindings&&(u=I.bindings),this.view=this.memory=void 0,this.bindings=u,this.FD_MAP=new Map([[0,{real:0,filetype:2,rights:{base:og,inheriting:Z(0)},path:void 0}],[1,{real:1,filetype:2,rights:{base:ng,inheriting:Z(0)},path:void 0}],[2,{real:2,filetype:2,rights:{base:ng,inheriting:Z(0)},path:void 0}]]);var d=this.bindings.fs,m=this.bindings.path;try{for(var e=c(Object.entries(t)),B=e.next();!B.done;B=e.next()){var X=G(B.value,2),y=X[0],V=X[1],h=d.openSync(V,d.constants.O_RDONLY),a=l(this.FD_MAP.keys()).reverse()[0]+1;this.FD_MAP.set(a,{real:h,filetype:3,rights:{base:ig,inheriting:cg},fakePath:y,path:V})}}catch(Y){var s={error:Y}}finally{try{B&&!B.done&&(i=e.return)&&i.call(e)}finally{if(s)throw s.error}}var r=u.hrtime();this.wasiImport={args_get:function(I,g){b.refreshMemory();var C=I,A=g;return n.forEach((function(I){b.view.setUint32(C,A,!0),C+=4,A+=_.from(b.memory.buffer).write(I+"\0",A)})),0},args_sizes_get:function(I,g){return b.refreshMemory(),b.view.setUint32(I,n.length,!0),I=n.reduce((function(I,g){return I+_.byteLength(g)+1}),0),b.view.setUint32(g,I,!0),0},environ_get:function(I,g){b.refreshMemory();var C=I,A=g;return Object.entries(o).forEach((function(I){var g=G(I,2);I=g[0],g=g[1],b.view.setUint32(C,A,!0),C+=4,A+=_.from(b.memory.buffer).write(I+"="+g+"\0",A)})),0},environ_sizes_get:function(I,g){b.refreshMemory();var C=Object.entries(o).map((function(I){return(I=G(I,2))[0]+"="+I[1]+"\0"})),A=C.reduce((function(I,g){return I+_.byteLength(g)}),0);return b.view.setUint32(I,C.length,!0),b.view.setUint32(g,A,!0),0},clock_res_get:function(I,g){switch(I){case 1:case 2:case 3:var C=Z(1);break;case 0:C=Z(1e3)}return b.view.setBigUint64(g,C),0},clock_time_get:function(I,C,A){return b.refreshMemory(),null===(I=g(I))?28:(b.view.setBigUint64(A,Z(I),!0),0)},fd_advise:mg((function(I){return C(I,FI),52})),fd_allocate:mg((function(I){return C(I,wI),52})),fd_close:mg((function(I){var g=C(I,Z(0));return d.closeSync(g.real),b.FD_MAP.delete(I),0})),fd_datasync:mg((function(I){return I=C(I,WI),d.fdatasyncSync(I.real),0})),fd_fdstat_get:mg((function(I,g){return I=C(I,Z(0)),b.refreshMemory(),b.view.setUint8(g,I.filetype),b.view.setUint16(g+2,0,!0),b.view.setUint16(g+4,0,!0),b.view.setBigUint64(g+8,Z(I.rights.base),!0),b.view.setBigUint64(g+8+8,Z(I.rights.inheriting),!0),0})),fd_fdstat_set_flags:mg((function(I){return C(I,KI),52})),fd_fdstat_set_rights:mg((function(I,g,A){return((I=C(I,Z(0))).rights.base|g)>I.rights.base||(I.rights.inheriting|A)>I.rights.inheriting?63:(I.rights.base=g,I.rights.inheriting=A,0)})),fd_filestat_get:mg((function(I,g){I=C(I,OI);var A=d.fstatSync(I.real);return b.refreshMemory(),b.view.setBigUint64(g,Z(A.dev),!0),g+=8,b.view.setBigUint64(g,Z(A.ino),!0),g+=8,b.view.setUint8(g,I.filetype),g+=8,b.view.setBigUint64(g,Z(A.nlink),!0),g+=8,b.view.setBigUint64(g,Z(A.size),!0),g+=8,b.view.setBigUint64(g,ug(A.atimeMs),!0),g+=8,b.view.setBigUint64(g,ug(A.mtimeMs),!0),b.view.setBigUint64(g+8,ug(A.ctimeMs),!0),0})),fd_filestat_set_size:mg((function(I,g){return I=C(I,PI),d.ftruncateSync(I.real,Number(g)),0})),fd_filestat_set_times:mg((function(I,A,i,c){I=C(I,qI);var G=d.fstatSync(I.real),l=G.atime;G=G.mtime;var b=dg(g(0));return 3===(3&c)||12===(12&c)?28:(1===(1&c)?l=dg(A):2===(2&c)&&(l=b),4===(4&c)?G=dg(i):8===(8&c)&&(G=b),d.futimesSync(I.real,new Date(l),new Date(G)),0)})),fd_prestat_get:mg((function(I,g){return(I=C(I,Z(0))).path?(b.refreshMemory(),b.view.setUint8(g,0),b.view.setUint32(g+4,_.byteLength(I.fakePath),!0),0):28})),fd_prestat_dir_name:mg((function(I,g,A){return(I=C(I,Z(0))).path?(b.refreshMemory(),_.from(b.memory.buffer).write(I.fakePath,g,A,"utf8"),0):28})),fd_pwrite:mg((function(I,g,i,c,G){var l=C(I,JI|pI),Z=0;return A(g,i).forEach((function(I){for(var g=0;g<I.byteLength;)g+=d.writeSync(l.real,I,g,I.byteLength-g,Number(c)+Z+g);Z+=g})),b.view.setUint32(G,Z,!0),0})),fd_write:mg((function(I,g,i,c){var G=C(I,JI),l=0;return A(g,i).forEach((function(I){for(var g=0;g<I.byteLength;){var C=d.writeSync(G.real,I,g,I.byteLength-g,G.offset?Number(G.offset):null);G.offset&&(G.offset+=Z(C)),g+=C}l+=g})),b.view.setUint32(c,l,!0),0})),fd_pread:mg((function(I,g,i,G,l){var Z;I=C(I,SI|pI);var t=0;try{var o=c(A(g,i)),n=o.next();I:for(;!n.done;n=o.next()){var u=n.value;for(g=0;g<u.byteLength;){var m=u.byteLength-g,e=d.readSync(I.real,u,g,u.byteLength-g,Number(G)+t+g);if(g+=e,t+=e,0===e||e<m)break I}t+=g}}catch(X){var B={error:X}}finally{try{n&&!n.done&&(Z=o.return)&&Z.call(o)}finally{if(B)throw B.error}}return b.view.setUint32(l,t,!0),0})),fd_read:mg((function(I,g,i,G){var l,t=0===(I=C(I,SI)).real,o=0;try{var n=c(A(g,i)),u=n.next();I:for(;!u.done;u=n.next()){var m=u.value;for(g=0;g<m.byteLength;){var e=m.byteLength-g,B=d.readSync(I.real,m,g,e,t||void 0===I.offset?null:Number(I.offset));if(t||(I.offset=(I.offset?I.offset:Z(0))+Z(B)),g+=B,o+=B,0===B||B<e)break I}}}catch(y){var X={error:y}}finally{try{u&&!u.done&&(l=n.return)&&l.call(n)}finally{if(X)throw X.error}}return b.view.setUint32(G,o,!0),0})),fd_readdir:mg((function(I,g,A,i,c){I=C(I,kI),b.refreshMemory();var G=d.readdirSync(I.path,{withFileTypes:!0}),l=g;for(i=Number(i);i<G.length;i+=1){var t=G[i],o=_.byteLength(t.name);if(g-l>A)break;if(b.view.setBigUint64(g,Z(i+1),!0),(g+=8)-l>A)break;var n=d.statSync(m.resolve(I.path,t.name));if(b.view.setBigUint64(g,Z(n.ino),!0),(g+=8)-l>A)break;if(b.view.setUint32(g,o,!0),(g+=4)-l>A)break;switch(!0){case n.isBlockDevice():n=1;break;case n.isCharacterDevice():n=2;break;case n.isDirectory():n=3;break;case n.isFIFO():n=6;break;case n.isFile():n=4;break;case n.isSocket():n=6;break;case n.isSymbolicLink():n=7;break;default:n=0}if(b.view.setUint8(g,n),g+=1,(g+=3)+o>=l+A)break;_.from(b.memory.buffer).write(t.name,g),g+=o}return b.view.setUint32(c,Math.min(g-l,A),!0),0})),fd_renumber:mg((function(I,g){return C(I,Z(0)),C(g,Z(0)),d.closeSync(b.FD_MAP.get(I).real),b.FD_MAP.set(I,b.FD_MAP.get(g)),b.FD_MAP.delete(g),0})),fd_seek:mg((function(I,g,A,i){switch(I=C(I,pI),b.refreshMemory(),A){case 1:I.offset=(I.offset?I.offset:Z(0))+Z(g);break;case 2:A=d.fstatSync(I.real).size,I.offset=Z(A)+Z(g);break;case 0:I.offset=Z(g)}return b.view.setBigUint64(i,I.offset,!0),0})),fd_tell:mg((function(I,g){return I=C(I,HI),b.refreshMemory(),I.offset||(I.offset=Z(0)),b.view.setBigUint64(g,I.offset,!0),0})),fd_sync:mg((function(I){return I=C(I,RI),d.fsyncSync(I.real),0})),path_create_directory:mg((function(I,g,A){return(I=C(I,fI)).path?(b.refreshMemory(),g=_.from(b.memory.buffer,g,A).toString(),d.mkdirSync(m.resolve(I.path,g)),0):28})),path_filestat_get:mg((function(I,g,A,i,c){return(I=C(I,EI)).path?(b.refreshMemory(),A=_.from(b.memory.buffer,A,i).toString(),A=d.statSync(m.resolve(I.path,A)),b.view.setBigUint64(c,Z(A.dev),!0),c+=8,b.view.setBigUint64(c,Z(A.ino),!0),c+=8,b.view.setUint8(c,Bg(b,void 0,A).filetype),c+=8,b.view.setBigUint64(c,Z(A.nlink),!0),c+=8,b.view.setBigUint64(c,Z(A.size),!0),c+=8,b.view.setBigUint64(c,ug(A.atimeMs),!0),c+=8,b.view.setBigUint64(c,ug(A.mtimeMs),!0),b.view.setBigUint64(c+8,ug(A.ctimeMs),!0),0):28})),path_filestat_set_times:mg((function(I,A,i,c,G,l,Z){if(!(I=C(I,DI)).path)return 28;b.refreshMemory();var t=d.fstatSync(I.real);A=t.atime,t=t.mtime;var o=dg(g(0));return 3===(3&Z)||12===(12&Z)?28:(1===(1&Z)?A=dg(G):2===(2&Z)&&(A=o),4===(4&Z)?t=dg(l):8===(8&Z)&&(t=o),i=_.from(b.memory.buffer,i,c).toString(),d.utimesSync(m.resolve(I.path,i),new Date(A),new Date(t)),0)})),path_link:mg((function(I,g,A,i,c,G,l){return I=C(I,xI),c=C(c,NI),I.path&&c.path?(b.refreshMemory(),A=_.from(b.memory.buffer,A,i).toString(),G=_.from(b.memory.buffer,G,l).toString(),d.linkSync(m.resolve(I.path,A),m.resolve(c.path,G)),0):28})),path_open:mg((function(I,g,A,i,c,G,t,o,n){g=C(I,LI),G=Z(G),t=Z(t),I=(G&(SI|kI))!==Z(0);var u=(G&(WI|JI|wI|PI))!==Z(0);if(u&&I)var e=d.constants.O_RDWR;else I?e=d.constants.O_RDONLY:u&&(e=d.constants.O_WRONLY);if(I=G|LI,G|=t,0!==(1&c)&&(e|=d.constants.O_CREAT,I|=vI),0!==(2&c)&&(e|=d.constants.O_DIRECTORY),0!==(4&c)&&(e|=d.constants.O_EXCL),0!==(8&c)&&(e|=d.constants.O_TRUNC,I|=MI),0!==(1&o)&&(e|=d.constants.O_APPEND),0!==(2&o)&&(e=d.constants.O_DSYNC?e|d.constants.O_DSYNC:e|d.constants.O_SYNC,G|=WI),0!==(4&o)&&(e|=d.constants.O_NONBLOCK),0!==(8&o)&&(e=d.constants.O_RSYNC?e|d.constants.O_RSYNC:e|d.constants.O_SYNC,G|=RI),0!==(16&o)&&(e|=d.constants.O_SYNC,G|=RI),u&&0===(e&(d.constants.O_APPEND|d.constants.O_TRUNC))&&(G|=pI),b.refreshMemory(),A=_.from(b.memory.buffer,A,i).toString(),A=m.resolve(g.path,A),m.relative(g.path,A).startsWith(".."))return 76;try{var B=d.realpathSync(A);if(m.relative(g.path,B).startsWith(".."))return 76}catch(y){if("ENOENT"!==y.code)throw y;B=A}try{var X=d.statSync(B).isDirectory()}catch(y){}return e=!u&&X?d.openSync(B,d.constants.O_RDONLY):d.openSync(B,e),X=l(b.FD_MAP.keys()).reverse()[0]+1,b.FD_MAP.set(X,{real:e,filetype:void 0,rights:{base:I,inheriting:G},path:B}),eg(b,X),b.view.setUint32(n,X,!0),0})),path_readlink:mg((function(I,g,A,i,c,G){return(I=C(I,TI)).path?(b.refreshMemory(),g=_.from(b.memory.buffer,g,A).toString(),g=m.resolve(I.path,g),g=d.readlinkSync(g),i=_.from(b.memory.buffer).write(g,i,c),b.view.setUint32(G,i,!0),0):28})),path_remove_directory:mg((function(I,g,A){return(I=C(I,QI)).path?(b.refreshMemory(),g=_.from(b.memory.buffer,g,A).toString(),d.rmdirSync(m.resolve(I.path,g)),0):28})),path_rename:mg((function(I,g,A,i,c,G){return I=C(I,UI),i=C(i,zI),I.path&&i.path?(b.refreshMemory(),g=_.from(b.memory.buffer,g,A).toString(),c=_.from(b.memory.buffer,c,G).toString(),d.renameSync(m.resolve(I.path,g),m.resolve(i.path,c)),0):28})),path_symlink:mg((function(I,g,A,i,c){return(A=C(A,jI)).path?(b.refreshMemory(),I=_.from(b.memory.buffer,I,g).toString(),i=_.from(b.memory.buffer,i,c).toString(),d.symlinkSync(I,m.resolve(A.path,i)),0):28})),path_unlink_file:mg((function(I,g,A){return(I=C(I,_I)).path?(b.refreshMemory(),g=_.from(b.memory.buffer,g,A).toString(),d.unlinkSync(m.resolve(I.path,g)),0):28})),poll_oneoff:function(I,C,A,i){var c=0,G=0;b.refreshMemory();for(var l=0;l<A;l+=1){var t=b.view.getBigUint64(I,!0);I+=8;var o=b.view.getUint8(I);switch(I+=1,o){case 0:I+=7,b.view.getBigUint64(I,!0),I+=8;var n=b.view.getUint32(I,!0);I+=4,I+=4,o=b.view.getBigUint64(I,!0),I+=8,b.view.getBigUint64(I,!0),I+=8;var d=b.view.getUint16(I,!0);I+=2,I+=6;var m=1===d;d=0,null===(n=Z(g(n)))?d=28:G=(o=m?o:n+o)>G?o:G,b.view.setBigUint64(C,t,!0),C+=8,b.view.setUint16(C,d,!0),C+=2,b.view.setUint8(C,0),C+=1,C+=5,c+=1;break;case 1:case 2:I+=3,b.view.getUint32(I,!0),I+=4,b.view.setBigUint64(C,t,!0),C+=8,b.view.setUint16(C,52,!0),C+=2,b.view.setUint8(C,o),C+=1,C+=5,c+=1;break;default:return 28}}for(b.view.setUint32(i,c,!0);u.hrtime()<G;);return 0},proc_exit:function(I){return u.exit(I),0},proc_raise:function(I){return I in tg?(u.kill(tg[I]),0):28},random_get:function(I,g){return b.refreshMemory(),u.randomFillSync(new Uint8Array(b.memory.buffer),I,g),0},sched_yield:function(){return 0},sock_recv:function(){return 52},sock_send:function(){return 52},sock_shutdown:function(){return 52}},I.traceSyscalls&&Object.keys(this.wasiImport).forEach((function(I){var g=b.wasiImport[I];b.wasiImport[I]=function(){for(var C=[],A=0;A<arguments.length;A++)C[A]=arguments[A];console.log("WASI: wasiImport called: "+I+" ("+C+")");try{var i=g.apply(void 0,l(C));return console.log("WASI:  => "+i),i}catch(c){throw console.log("Catched error: "+c),c}}}))}return I.prototype.refreshMemory=function(){this.view&&0!==this.view.buffer.byteLength||(this.view=new t(this.memory.buffer))},I.prototype.setMemory=function(I){this.memory=I},I.prototype.start=function(I){if(null===(I=I.exports)||"object"!==typeof I)throw Error("instance.exports must be an Object. Received "+I+".");var g=I.memory;if(!(g instanceof WebAssembly.Memory))throw Error("instance.exports.memory must be a WebAssembly.Memory. Recceived "+g+".");this.setMemory(g),I._start&&I._start()},I.prototype.getImportNamespace=function(I){var g,C=null;try{for(var A=c(WebAssembly.Module.imports(I)),i=A.next();!i.done;i=A.next()){var G=i.value;if("function"===G.kind&&G.module.startsWith("wasi_"))if(C){if(C!==G.module)throw Error("Multiple namespaces detected.")}else C=G.module}}catch(b){var l={error:b}}finally{try{i&&!i.done&&(g=A.return)&&g.call(A)}finally{if(l)throw l.error}}return C},I.prototype.getImports=function(I){switch(this.getImportNamespace(I)){case"wasi_unstable":return{wasi_unstable:this.wasiImport};case"wasi_snapshot_preview1":return{wasi_snapshot_preview1:this.wasiImport};default:throw Error("Can't detect a WASI namespace for the WebAssembly Module")}},I.defaultBindings=YI,I}();g.default=hg},4845:function(I,g,C){"use strict";var A=C(1187).default,i=C(7329).default,c=C(6843).default,G=C(7868).default,l=C(4837).default,b=C(36).default,Z=C(9823).default,t=C(6982).default,o=C(2975).default;Object.defineProperty(g,"__esModule",{value:!0});var n,u=C(104),d=C(2399),m=C(4343),e=C(8380),B=e.WASI_RIGHT_FD_DATASYNC|e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_POLL_FD_READWRITE,X=e.WASI_RIGHT_FD_DATASYNC|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_POLL_FD_READWRITE,y=X,V=function(I){var g=Math.trunc(I),C=u.BigIntPolyfill(Math.round(1e6*(I-g)));return u.BigIntPolyfill(g)*u.BigIntPolyfill(1e6)+C},h=function(I){"number"===typeof I&&(I=Math.trunc(I));var g=u.BigIntPolyfill(I);return Number(g/u.BigIntPolyfill(1e6))},a=function(I){return function(){try{return I.apply(void 0,arguments)}catch(g){if(g&&g.code&&"string"===typeof g.code)return e.ERROR_MAP[g.code]||e.WASI_EINVAL;if(g instanceof Y)return g.errno;throw g}}},s=function(I,g){var C=I.FD_MAP.get(g);if(!C)throw new Y(e.WASI_EBADF);if(void 0===C.filetype){var A=I.bindings.fs.fstatSync(C.real),i=r(I,g,A),c=i.filetype,G=i.rightsBase,l=i.rightsInheriting;C.filetype=c,C.rights||(C.rights={base:G,inheriting:l})}return C},r=function(I,g,C){switch(!0){case C.isBlockDevice():return{filetype:e.WASI_FILETYPE_BLOCK_DEVICE,rightsBase:e.RIGHTS_BLOCK_DEVICE_BASE,rightsInheriting:e.RIGHTS_BLOCK_DEVICE_INHERITING};case C.isCharacterDevice():var A=e.WASI_FILETYPE_CHARACTER_DEVICE;return void 0!==g&&I.bindings.isTTY(g)?{filetype:A,rightsBase:e.RIGHTS_TTY_BASE,rightsInheriting:e.RIGHTS_TTY_INHERITING}:{filetype:A,rightsBase:e.RIGHTS_CHARACTER_DEVICE_BASE,rightsInheriting:e.RIGHTS_CHARACTER_DEVICE_INHERITING};case C.isDirectory():return{filetype:e.WASI_FILETYPE_DIRECTORY,rightsBase:e.RIGHTS_DIRECTORY_BASE,rightsInheriting:e.RIGHTS_DIRECTORY_INHERITING};case C.isFIFO():return{filetype:e.WASI_FILETYPE_SOCKET_STREAM,rightsBase:e.RIGHTS_SOCKET_BASE,rightsInheriting:e.RIGHTS_SOCKET_INHERITING};case C.isFile():return{filetype:e.WASI_FILETYPE_REGULAR_FILE,rightsBase:e.RIGHTS_REGULAR_FILE_BASE,rightsInheriting:e.RIGHTS_REGULAR_FILE_INHERITING};case C.isSocket():return{filetype:e.WASI_FILETYPE_SOCKET_STREAM,rightsBase:e.RIGHTS_SOCKET_BASE,rightsInheriting:e.RIGHTS_SOCKET_INHERITING};case C.isSymbolicLink():return{filetype:e.WASI_FILETYPE_SYMBOLIC_LINK,rightsBase:u.BigIntPolyfill(0),rightsInheriting:u.BigIntPolyfill(0)};default:return{filetype:e.WASI_FILETYPE_UNKNOWN,rightsBase:u.BigIntPolyfill(0),rightsInheriting:u.BigIntPolyfill(0)}}},Y=function(I){Z(C,I);var g=t(C);function C(I){var A;return l(this,C),(A=g.call(this)).errno=I,Object.setPrototypeOf(b(A),C.prototype),A}return G(C)}(o(Error));g.WASIError=Y;var W=function(I){Z(C,I);var g=t(C);function C(I){var A;return l(this,C),(A=g.call(this,"WASI Exit error: ".concat(I))).code=I,Object.setPrototypeOf(b(A),C.prototype),A}return G(C)}(o(Error));g.WASIExitError=W;var S=function(I){Z(C,I);var g=t(C);function C(I){var A;return l(this,C),(A=g.call(this,"WASI Kill signal: ".concat(I))).signal=I,Object.setPrototypeOf(b(A),C.prototype),A}return G(C)}(o(Error));g.WASIKillError=S;var p=function(){function I(g){var C=this;l(this,I);var G={};g&&g.preopens?G=g.preopens:g&&g.preopenDirectories&&(G=g.preopenDirectories);var b={};g&&g.env&&(b=g.env);var Z=[];g&&g.args&&(Z=g.args);var t=n;g&&g.bindings&&(t=g.bindings),this.memory=void 0,this.view=void 0,this.bindings=t,this.FD_MAP=new Map([[e.WASI_STDIN_FILENO,{real:0,filetype:e.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:B,inheriting:u.BigIntPolyfill(0)},path:void 0}],[e.WASI_STDOUT_FILENO,{real:1,filetype:e.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:X,inheriting:u.BigIntPolyfill(0)},path:void 0}],[e.WASI_STDERR_FILENO,{real:2,filetype:e.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:y,inheriting:u.BigIntPolyfill(0)},path:void 0}]]);for(var o=this.bindings.fs,d=this.bindings.path,W=0,S=Object.entries(G);W<S.length;W++){var p=c(S[W],2),K=p[0],R=p[1],H=o.openSync(R,o.constants.O_RDONLY),J=i(this.FD_MAP.keys()).reverse()[0]+1;this.FD_MAP.set(J,{real:H,filetype:e.WASI_FILETYPE_DIRECTORY,rights:{base:e.RIGHTS_DIRECTORY_BASE,inheriting:e.RIGHTS_DIRECTORY_INHERITING},fakePath:K,path:R})}var F=function(I,g){return C.refreshMemory(),Array.from({length:g},(function(g,A){var i=I+8*A,c=C.view.getUint32(i,!0),G=C.view.getUint32(i+4,!0);return new Uint8Array(C.memory.buffer,c,G)}))},w=function(I,g){var A=s(C,I);if(g!==u.BigIntPolyfill(0)&&(A.rights.base&g)===u.BigIntPolyfill(0))throw new Y(e.WASI_EPERM);return A},f=t.hrtime(),v=function(I){switch(I){case e.WASI_CLOCK_MONOTONIC:return t.hrtime();case e.WASI_CLOCK_REALTIME:return V(Date.now());case e.WASI_CLOCK_PROCESS_CPUTIME_ID:case e.WASI_CLOCK_THREAD_CPUTIME_ID:return t.hrtime()-f;default:return null}};this.wasiImport={args_get:function(I,g){C.refreshMemory();var A=I,i=g;return Z.forEach((function(I){C.view.setUint32(A,i,!0),A+=4,i+=m.default.from(C.memory.buffer).write("".concat(I,"\0"),i)})),e.WASI_ESUCCESS},args_sizes_get:function(I,g){C.refreshMemory(),C.view.setUint32(I,Z.length,!0);var A=Z.reduce((function(I,g){return I+m.default.byteLength(g)+1}),0);return C.view.setUint32(g,A,!0),e.WASI_ESUCCESS},environ_get:function(I,g){C.refreshMemory();var A=I,i=g;return Object.entries(b).forEach((function(I){var g=c(I,2),G=g[0],l=g[1];C.view.setUint32(A,i,!0),A+=4,i+=m.default.from(C.memory.buffer).write("".concat(G,"=").concat(l,"\0"),i)})),e.WASI_ESUCCESS},environ_sizes_get:function(I,g){C.refreshMemory();var A=Object.entries(b).map((function(I){var g=c(I,2),C=g[0],A=g[1];return"".concat(C,"=").concat(A,"\0")})),i=A.reduce((function(I,g){return I+m.default.byteLength(g)}),0);return C.view.setUint32(I,A.length,!0),C.view.setUint32(g,i,!0),e.WASI_ESUCCESS},clock_res_get:function(I,g){var A;switch(I){case e.WASI_CLOCK_MONOTONIC:case e.WASI_CLOCK_PROCESS_CPUTIME_ID:case e.WASI_CLOCK_THREAD_CPUTIME_ID:A=u.BigIntPolyfill(1);break;case e.WASI_CLOCK_REALTIME:A=u.BigIntPolyfill(1e3)}return C.view.setBigUint64(g,A),e.WASI_ESUCCESS},clock_time_get:function(I,g,A){C.refreshMemory();var i=v(I);return null===i?e.WASI_EINVAL:(C.view.setBigUint64(A,u.BigIntPolyfill(i),!0),e.WASI_ESUCCESS)},fd_advise:a((function(I,g,C,A){return w(I,e.WASI_RIGHT_FD_ADVISE),e.WASI_ENOSYS})),fd_allocate:a((function(I,g,C){return w(I,e.WASI_RIGHT_FD_ALLOCATE),e.WASI_ENOSYS})),fd_close:a((function(I){var g=w(I,u.BigIntPolyfill(0));return o.closeSync(g.real),C.FD_MAP.delete(I),e.WASI_ESUCCESS})),fd_datasync:a((function(I){var g=w(I,e.WASI_RIGHT_FD_DATASYNC);return o.fdatasyncSync(g.real),e.WASI_ESUCCESS})),fd_fdstat_get:a((function(I,g){var A=w(I,u.BigIntPolyfill(0));return C.refreshMemory(),C.view.setUint8(g,A.filetype),C.view.setUint16(g+2,0,!0),C.view.setUint16(g+4,0,!0),C.view.setBigUint64(g+8,u.BigIntPolyfill(A.rights.base),!0),C.view.setBigUint64(g+8+8,u.BigIntPolyfill(A.rights.inheriting),!0),e.WASI_ESUCCESS})),fd_fdstat_set_flags:a((function(I,g){return w(I,e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS),e.WASI_ENOSYS})),fd_fdstat_set_rights:a((function(I,g,C){var A=w(I,u.BigIntPolyfill(0));return(A.rights.base|g)>A.rights.base||(A.rights.inheriting|C)>A.rights.inheriting?e.WASI_EPERM:(A.rights.base=g,A.rights.inheriting=C,e.WASI_ESUCCESS)})),fd_filestat_get:a((function(I,g){var A=w(I,e.WASI_RIGHT_FD_FILESTAT_GET),i=o.fstatSync(A.real);return C.refreshMemory(),C.view.setBigUint64(g,u.BigIntPolyfill(i.dev),!0),g+=8,C.view.setBigUint64(g,u.BigIntPolyfill(i.ino),!0),g+=8,C.view.setUint8(g,A.filetype),g+=8,C.view.setBigUint64(g,u.BigIntPolyfill(i.nlink),!0),g+=8,C.view.setBigUint64(g,u.BigIntPolyfill(i.size),!0),g+=8,C.view.setBigUint64(g,V(i.atimeMs),!0),g+=8,C.view.setBigUint64(g,V(i.mtimeMs),!0),g+=8,C.view.setBigUint64(g,V(i.ctimeMs),!0),e.WASI_ESUCCESS})),fd_filestat_set_size:a((function(I,g){var C=w(I,e.WASI_RIGHT_FD_FILESTAT_SET_SIZE);return o.ftruncateSync(C.real,Number(g)),e.WASI_ESUCCESS})),fd_filestat_set_times:a((function(I,g,C,A){var i=w(I,e.WASI_RIGHT_FD_FILESTAT_SET_TIMES),c=o.fstatSync(i.real),G=c.atime,l=c.mtime,b=h(v(e.WASI_CLOCK_REALTIME)),Z=e.WASI_FILESTAT_SET_ATIM|e.WASI_FILESTAT_SET_ATIM_NOW;if((A&Z)===Z)return e.WASI_EINVAL;var t=e.WASI_FILESTAT_SET_MTIM|e.WASI_FILESTAT_SET_MTIM_NOW;return(A&t)===t?e.WASI_EINVAL:((A&e.WASI_FILESTAT_SET_ATIM)===e.WASI_FILESTAT_SET_ATIM?G=h(g):(A&e.WASI_FILESTAT_SET_ATIM_NOW)===e.WASI_FILESTAT_SET_ATIM_NOW&&(G=b),(A&e.WASI_FILESTAT_SET_MTIM)===e.WASI_FILESTAT_SET_MTIM?l=h(C):(A&e.WASI_FILESTAT_SET_MTIM_NOW)===e.WASI_FILESTAT_SET_MTIM_NOW&&(l=b),o.futimesSync(i.real,new Date(G),new Date(l)),e.WASI_ESUCCESS)})),fd_prestat_get:a((function(I,g){var A=w(I,u.BigIntPolyfill(0));return A.path?(C.refreshMemory(),C.view.setUint8(g,e.WASI_PREOPENTYPE_DIR),C.view.setUint32(g+4,m.default.byteLength(A.fakePath),!0),e.WASI_ESUCCESS):e.WASI_EINVAL})),fd_prestat_dir_name:a((function(I,g,A){var i=w(I,u.BigIntPolyfill(0));return i.path?(C.refreshMemory(),m.default.from(C.memory.buffer).write(i.fakePath,g,A,"utf8"),e.WASI_ESUCCESS):e.WASI_EINVAL})),fd_pwrite:a((function(I,g,A,i,c){var G=w(I,e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_SEEK),l=0;return F(g,A).forEach((function(I){for(var g=0;g<I.byteLength;)g+=o.writeSync(G.real,I,g,I.byteLength-g,Number(i)+l+g);l+=g})),C.view.setUint32(c,l,!0),e.WASI_ESUCCESS})),fd_write:a((function(I,g,A,i){var c=w(I,e.WASI_RIGHT_FD_WRITE),G=0;return F(g,A).forEach((function(I){for(var g=0;g<I.byteLength;){var C=o.writeSync(c.real,I,g,I.byteLength-g,c.offset?Number(c.offset):null);c.offset&&(c.offset+=u.BigIntPolyfill(C)),g+=C}G+=g})),C.view.setUint32(i,G,!0),e.WASI_ESUCCESS})),fd_pread:a((function(I,g,i,c,G){var l,b=w(I,e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_SEEK),Z=0,t=A(F(g,i));try{I:for(t.s();!(l=t.n()).done;){for(var n=l.value,u=0;u<n.byteLength;){var d=n.byteLength-u,m=o.readSync(b.real,n,u,n.byteLength-u,Number(c)+Z+u);if(u+=m,Z+=m,0===m||m<d)break I}Z+=u}}catch(B){t.e(B)}finally{t.f()}return C.view.setUint32(G,Z,!0),e.WASI_ESUCCESS})),fd_read:a((function(I,g,i,c){var G,l=w(I,e.WASI_RIGHT_FD_READ),b=0===l.real,Z=0,t=A(F(g,i));try{I:for(t.s();!(G=t.n()).done;)for(var n=G.value,d=0;d<n.byteLength;){var m=n.byteLength-d,B=b||void 0===l.offset?null:Number(l.offset),X=o.readSync(l.real,n,d,m,B);if(b||(l.offset=(l.offset?l.offset:u.BigIntPolyfill(0))+u.BigIntPolyfill(X)),d+=X,Z+=X,0===X||X<m)break I}}catch(y){t.e(y)}finally{t.f()}return C.view.setUint32(c,Z,!0),e.WASI_ESUCCESS})),fd_readdir:a((function(I,g,A,i,c){var G=w(I,e.WASI_RIGHT_FD_READDIR);C.refreshMemory();for(var l=o.readdirSync(G.path,{withFileTypes:!0}),b=g,Z=Number(i);Z<l.length;Z+=1){var t=l[Z],n=m.default.byteLength(t.name);if(g-b>A)break;if(C.view.setBigUint64(g,u.BigIntPolyfill(Z+1),!0),(g+=8)-b>A)break;var B=o.statSync(d.resolve(G.path,t.name));if(C.view.setBigUint64(g,u.BigIntPolyfill(B.ino),!0),(g+=8)-b>A)break;if(C.view.setUint32(g,n,!0),(g+=4)-b>A)break;var X=void 0;switch(!0){case B.isBlockDevice():X=e.WASI_FILETYPE_BLOCK_DEVICE;break;case B.isCharacterDevice():X=e.WASI_FILETYPE_CHARACTER_DEVICE;break;case B.isDirectory():X=e.WASI_FILETYPE_DIRECTORY;break;case B.isFIFO():X=e.WASI_FILETYPE_SOCKET_STREAM;break;case B.isFile():X=e.WASI_FILETYPE_REGULAR_FILE;break;case B.isSocket():X=e.WASI_FILETYPE_SOCKET_STREAM;break;case B.isSymbolicLink():X=e.WASI_FILETYPE_SYMBOLIC_LINK;break;default:X=e.WASI_FILETYPE_UNKNOWN}if(C.view.setUint8(g,X),g+=1,(g+=3)+n>=b+A)break;m.default.from(C.memory.buffer).write(t.name,g),g+=n}var y=g-b;return C.view.setUint32(c,Math.min(y,A),!0),e.WASI_ESUCCESS})),fd_renumber:a((function(I,g){return w(I,u.BigIntPolyfill(0)),w(g,u.BigIntPolyfill(0)),o.closeSync(C.FD_MAP.get(I).real),C.FD_MAP.set(I,C.FD_MAP.get(g)),C.FD_MAP.delete(g),e.WASI_ESUCCESS})),fd_seek:a((function(I,g,A,i){var c=w(I,e.WASI_RIGHT_FD_SEEK);switch(C.refreshMemory(),A){case e.WASI_WHENCE_CUR:c.offset=(c.offset?c.offset:u.BigIntPolyfill(0))+u.BigIntPolyfill(g);break;case e.WASI_WHENCE_END:var G=o.fstatSync(c.real).size;c.offset=u.BigIntPolyfill(G)+u.BigIntPolyfill(g);break;case e.WASI_WHENCE_SET:c.offset=u.BigIntPolyfill(g)}return C.view.setBigUint64(i,c.offset,!0),e.WASI_ESUCCESS})),fd_tell:a((function(I,g){var A=w(I,e.WASI_RIGHT_FD_TELL);return C.refreshMemory(),A.offset||(A.offset=u.BigIntPolyfill(0)),C.view.setBigUint64(g,A.offset,!0),e.WASI_ESUCCESS})),fd_sync:a((function(I){var g=w(I,e.WASI_RIGHT_FD_SYNC);return o.fsyncSync(g.real),e.WASI_ESUCCESS})),path_create_directory:a((function(I,g,A){var i=w(I,e.WASI_RIGHT_PATH_CREATE_DIRECTORY);if(!i.path)return e.WASI_EINVAL;C.refreshMemory();var c=m.default.from(C.memory.buffer,g,A).toString();return o.mkdirSync(d.resolve(i.path,c)),e.WASI_ESUCCESS})),path_filestat_get:a((function(I,g,A,i,c){var G=w(I,e.WASI_RIGHT_PATH_FILESTAT_GET);if(!G.path)return e.WASI_EINVAL;C.refreshMemory();var l=m.default.from(C.memory.buffer,A,i).toString(),b=o.statSync(d.resolve(G.path,l));return C.view.setBigUint64(c,u.BigIntPolyfill(b.dev),!0),c+=8,C.view.setBigUint64(c,u.BigIntPolyfill(b.ino),!0),c+=8,C.view.setUint8(c,r(C,void 0,b).filetype),c+=8,C.view.setBigUint64(c,u.BigIntPolyfill(b.nlink),!0),c+=8,C.view.setBigUint64(c,u.BigIntPolyfill(b.size),!0),c+=8,C.view.setBigUint64(c,V(b.atimeMs),!0),c+=8,C.view.setBigUint64(c,V(b.mtimeMs),!0),c+=8,C.view.setBigUint64(c,V(b.ctimeMs),!0),e.WASI_ESUCCESS})),path_filestat_set_times:a((function(I,g,A,i,c,G,l){var b=w(I,e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES);if(!b.path)return e.WASI_EINVAL;C.refreshMemory();var Z=o.fstatSync(b.real),t=Z.atime,n=Z.mtime,u=h(v(e.WASI_CLOCK_REALTIME)),B=e.WASI_FILESTAT_SET_ATIM|e.WASI_FILESTAT_SET_ATIM_NOW;if((l&B)===B)return e.WASI_EINVAL;var X=e.WASI_FILESTAT_SET_MTIM|e.WASI_FILESTAT_SET_MTIM_NOW;if((l&X)===X)return e.WASI_EINVAL;(l&e.WASI_FILESTAT_SET_ATIM)===e.WASI_FILESTAT_SET_ATIM?t=h(c):(l&e.WASI_FILESTAT_SET_ATIM_NOW)===e.WASI_FILESTAT_SET_ATIM_NOW&&(t=u),(l&e.WASI_FILESTAT_SET_MTIM)===e.WASI_FILESTAT_SET_MTIM?n=h(G):(l&e.WASI_FILESTAT_SET_MTIM_NOW)===e.WASI_FILESTAT_SET_MTIM_NOW&&(n=u);var y=m.default.from(C.memory.buffer,A,i).toString();return o.utimesSync(d.resolve(b.path,y),new Date(t),new Date(n)),e.WASI_ESUCCESS})),path_link:a((function(I,g,A,i,c,G,l){var b=w(I,e.WASI_RIGHT_PATH_LINK_SOURCE),Z=w(c,e.WASI_RIGHT_PATH_LINK_TARGET);if(!b.path||!Z.path)return e.WASI_EINVAL;C.refreshMemory();var t=m.default.from(C.memory.buffer,A,i).toString(),n=m.default.from(C.memory.buffer,G,l).toString();return o.linkSync(d.resolve(b.path,t),d.resolve(Z.path,n)),e.WASI_ESUCCESS})),path_open:a((function(I,g,A,c,G,l,b,Z,t){var n=w(I,e.WASI_RIGHT_PATH_OPEN);l=u.BigIntPolyfill(l),b=u.BigIntPolyfill(b);var B,X=(l&(e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_READDIR))!==u.BigIntPolyfill(0),y=(l&(e.WASI_RIGHT_FD_DATASYNC|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_ALLOCATE|e.WASI_RIGHT_FD_FILESTAT_SET_SIZE))!==u.BigIntPolyfill(0);y&&X?B=o.constants.O_RDWR:X?B=o.constants.O_RDONLY:y&&(B=o.constants.O_WRONLY);var V=l|e.WASI_RIGHT_PATH_OPEN,h=l|b;0!==(G&e.WASI_O_CREAT)&&(B|=o.constants.O_CREAT,V|=e.WASI_RIGHT_PATH_CREATE_FILE),0!==(G&e.WASI_O_DIRECTORY)&&(B|=o.constants.O_DIRECTORY),0!==(G&e.WASI_O_EXCL)&&(B|=o.constants.O_EXCL),0!==(G&e.WASI_O_TRUNC)&&(B|=o.constants.O_TRUNC,V|=e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE),0!==(Z&e.WASI_FDFLAG_APPEND)&&(B|=o.constants.O_APPEND),0!==(Z&e.WASI_FDFLAG_DSYNC)&&(o.constants.O_DSYNC?B|=o.constants.O_DSYNC:B|=o.constants.O_SYNC,h|=e.WASI_RIGHT_FD_DATASYNC),0!==(Z&e.WASI_FDFLAG_NONBLOCK)&&(B|=o.constants.O_NONBLOCK),0!==(Z&e.WASI_FDFLAG_RSYNC)&&(o.constants.O_RSYNC?B|=o.constants.O_RSYNC:B|=o.constants.O_SYNC,h|=e.WASI_RIGHT_FD_SYNC),0!==(Z&e.WASI_FDFLAG_SYNC)&&(B|=o.constants.O_SYNC,h|=e.WASI_RIGHT_FD_SYNC),y&&0===(B&(o.constants.O_APPEND|o.constants.O_TRUNC))&&(h|=e.WASI_RIGHT_FD_SEEK),C.refreshMemory();var a,r,Y,W=m.default.from(C.memory.buffer,A,c).toString(),S=d.resolve(n.path,W);if(d.relative(n.path,S).startsWith(".."))return e.WASI_ENOTCAPABLE;try{if(a=o.realpathSync(S),d.relative(n.path,a).startsWith(".."))return e.WASI_ENOTCAPABLE}catch(K){if("ENOENT"!==K.code)throw K;a=S}try{r=o.statSync(a).isDirectory()}catch(K){}Y=!y&&r?o.openSync(a,o.constants.O_RDONLY):o.openSync(a,B);var p=i(C.FD_MAP.keys()).reverse()[0]+1;return C.FD_MAP.set(p,{real:Y,filetype:void 0,rights:{base:V,inheriting:h},path:a}),s(C,p),C.view.setUint32(t,p,!0),e.WASI_ESUCCESS})),path_readlink:a((function(I,g,A,i,c,G){var l=w(I,e.WASI_RIGHT_PATH_READLINK);if(!l.path)return e.WASI_EINVAL;C.refreshMemory();var b=m.default.from(C.memory.buffer,g,A).toString(),Z=d.resolve(l.path,b),t=o.readlinkSync(Z),n=m.default.from(C.memory.buffer).write(t,i,c);return C.view.setUint32(G,n,!0),e.WASI_ESUCCESS})),path_remove_directory:a((function(I,g,A){var i=w(I,e.WASI_RIGHT_PATH_REMOVE_DIRECTORY);if(!i.path)return e.WASI_EINVAL;C.refreshMemory();var c=m.default.from(C.memory.buffer,g,A).toString();return o.rmdirSync(d.resolve(i.path,c)),e.WASI_ESUCCESS})),path_rename:a((function(I,g,A,i,c,G){var l=w(I,e.WASI_RIGHT_PATH_RENAME_SOURCE),b=w(i,e.WASI_RIGHT_PATH_RENAME_TARGET);if(!l.path||!b.path)return e.WASI_EINVAL;C.refreshMemory();var Z=m.default.from(C.memory.buffer,g,A).toString(),t=m.default.from(C.memory.buffer,c,G).toString();return o.renameSync(d.resolve(l.path,Z),d.resolve(b.path,t)),e.WASI_ESUCCESS})),path_symlink:a((function(I,g,A,i,c){var G=w(A,e.WASI_RIGHT_PATH_SYMLINK);if(!G.path)return e.WASI_EINVAL;C.refreshMemory();var l=m.default.from(C.memory.buffer,I,g).toString(),b=m.default.from(C.memory.buffer,i,c).toString();return o.symlinkSync(l,d.resolve(G.path,b)),e.WASI_ESUCCESS})),path_unlink_file:a((function(I,g,A){var i=w(I,e.WASI_RIGHT_PATH_UNLINK_FILE);if(!i.path)return e.WASI_EINVAL;C.refreshMemory();var c=m.default.from(C.memory.buffer,g,A).toString();return o.unlinkSync(d.resolve(i.path,c)),e.WASI_ESUCCESS})),poll_oneoff:function(I,g,A,i){var c=0,G=0;C.refreshMemory();for(var l=0;l<A;l+=1){var b=C.view.getBigUint64(I,!0);I+=8;var Z=C.view.getUint8(I);switch(I+=1,Z){case e.WASI_EVENTTYPE_CLOCK:I+=7;C.view.getBigUint64(I,!0);I+=8;var o=C.view.getUint32(I,!0);I+=4,I+=4;var n=C.view.getBigUint64(I,!0);I+=8;C.view.getBigUint64(I,!0);I+=8;var d=C.view.getUint16(I,!0);I+=2,I+=6;var m=1===d,B=e.WASI_ESUCCESS,X=u.BigIntPolyfill(v(o));if(null===X)B=e.WASI_EINVAL;else{var y=m?n:X+n;G=y>G?y:G}C.view.setBigUint64(g,b,!0),g+=8,C.view.setUint16(g,B,!0),g+=2,C.view.setUint8(g,e.WASI_EVENTTYPE_CLOCK),g+=1,g+=5,c+=1;break;case e.WASI_EVENTTYPE_FD_READ:case e.WASI_EVENTTYPE_FD_WRITE:I+=3;C.view.getUint32(I,!0);I+=4,C.view.setBigUint64(g,b,!0),g+=8,C.view.setUint16(g,e.WASI_ENOSYS,!0),g+=2,C.view.setUint8(g,Z),g+=1,g+=5,c+=1;break;default:return e.WASI_EINVAL}}for(C.view.setUint32(i,c,!0);t.hrtime()<G;);return e.WASI_ESUCCESS},proc_exit:function(I){return t.exit(I),e.WASI_ESUCCESS},proc_raise:function(I){return I in e.SIGNAL_MAP?(t.kill(e.SIGNAL_MAP[I]),e.WASI_ESUCCESS):e.WASI_EINVAL},random_get:function(I,g){return C.refreshMemory(),t.randomFillSync(new Uint8Array(C.memory.buffer),I,g),e.WASI_ESUCCESS},sched_yield:function(){return e.WASI_ESUCCESS},sock_recv:function(){return e.WASI_ENOSYS},sock_send:function(){return e.WASI_ENOSYS},sock_shutdown:function(){return e.WASI_ENOSYS}},g.traceSyscalls&&Object.keys(this.wasiImport).forEach((function(I){var g=C.wasiImport[I];C.wasiImport[I]=function(){for(var C=arguments.length,A=new Array(C),i=0;i<C;i++)A[i]=arguments[i];console.log("WASI: wasiImport called: ".concat(I," (").concat(A,")"));try{var c=g.apply(void 0,A);return console.log("WASI:  => ".concat(c)),c}catch(G){throw console.log("Catched error: ".concat(G)),G}}}))}return G(I,[{key:"refreshMemory",value:function(){this.view&&0!==this.view.buffer.byteLength||(this.view=new d.DataViewPolyfill(this.memory.buffer))}},{key:"setMemory",value:function(I){this.memory=I}},{key:"start",value:function(I){var g=I.exports;if(null===g||"object"!==typeof g)throw new Error("instance.exports must be an Object. Received ".concat(g,"."));var C=g.memory;if(!(C instanceof WebAssembly.Memory))throw new Error("instance.exports.memory must be a WebAssembly.Memory. Recceived ".concat(C,"."));this.setMemory(C),g._start&&g._start()}},{key:"getImportNamespace",value:function(I){var g,C=null,i=A(WebAssembly.Module.imports(I));try{for(i.s();!(g=i.n()).done;){var c=g.value;if("function"===c.kind&&c.module.startsWith("wasi_"))if(C){if(C!==c.module)throw new Error("Multiple namespaces detected.")}else C=c.module}}catch(G){i.e(G)}finally{i.f()}return C}},{key:"getImports",value:function(I){switch(this.getImportNamespace(I)){case"wasi_unstable":return{wasi_unstable:this.wasiImport};case"wasi_snapshot_preview1":return{wasi_snapshot_preview1:this.wasiImport};default:throw new Error("Can't detect a WASI namespace for the WebAssembly Module")}}}]),I}();g.default=p,p.defaultBindings=n,g.WASI=p},104:function(I,g,C){"use strict";Object.defineProperty(g,"__esModule",{value:!0});var A="undefined"!==typeof globalThis?globalThis:"undefined"!==typeof C.g?C.g:{};g.BigIntPolyfill="undefined"!==typeof BigInt?BigInt:A.BigInt||Number},9770:function(I,g){"use strict";Object.defineProperty(g,"__esModule",{value:!0});var C=Math.floor(.001*(Date.now()-performance.now()));g.default=function(I){var g=.001*performance.now(),A=Math.floor(g)+C,i=Math.floor(g%1*1e9);return I&&(A-=I[0],(i-=I[1])<0&&(A--,i+=1e9)),[A,i]}},4343:function(I,g){"use strict";Object.defineProperty(g,"__esModule",{value:!0});var C=Buffer;g.default=C},2399:function(I,g,C){"use strict";Object.defineProperty(g,"__esModule",{value:!0});var A=C(104),i=DataView;i.prototype.setBigUint64||(i.prototype.setBigUint64=function(I,g,C){var A,i;if(g<Math.pow(2,32))A=Number(g),i=0;else{for(var c=g.toString(2),G="",l=0;l<64-c.length;l++)G+="0";G+=c,i=parseInt(G.substring(0,32),2),A=parseInt(G.substring(32),2)}this.setUint32(I+(C?0:4),A,C),this.setUint32(I+(C?4:0),i,C)},i.prototype.getBigUint64=function(I,g){for(var C=this.getUint32(I+(g?0:4),g),i=this.getUint32(I+(g?4:0),g),c=C.toString(2),G=i.toString(2),l="",b=0;b<32-c.length;b++)l+="0";return l+=c,A.BigIntPolyfill("0b"+G+l)}),g.DataViewPolyfill=i},9065:function(I,g){"use strict";Object.defineProperty(g,"__esModule",{value:!0});g.default=function(I){return function(g){var C=I(g);return 1e9*C[0]+C[1]}}},3903:function(I,g,C){"use strict";function A(I){var g="function"===typeof Symbol&&I[Symbol.iterator],C=0;return g?g.call(I):{next:function(){return I&&C>=I.length&&(I=void 0),{value:I&&I[C++],done:!I}}}}function i(I,g){var C="function"===typeof Symbol&&I[Symbol.iterator];if(!C)return I;I=C.call(I);var A,i=[];try{for(;(void 0===g||0<g--)&&!(A=I.next()).done;)i.push(A.value)}catch(G){var c={error:G}}finally{try{A&&!A.done&&(C=I.return)&&C.call(I)}finally{if(c)throw c.error}}return i}function c(){for(var I=[],g=0;g<arguments.length;g++)I=I.concat(i(arguments[g]));return I}C.r(g),C.d(g,{WasmFs:function(){return bA}});var G="undefined"!==typeof globalThis?globalThis:"undefined"!==typeof window?window:"undefined"!==typeof C.g?C.g:"undefined"!==typeof self?self:{};function l(I){return I&&I.__esModule&&Object.prototype.hasOwnProperty.call(I,"default")?I.default:I}function b(I,g){return I(g={exports:{}},g.exports),g.exports}var Z=b((function(I,g){Object.defineProperty(g,"__esModule",{value:!0}),g.constants={O_RDONLY:0,O_WRONLY:1,O_RDWR:2,S_IFMT:61440,S_IFREG:32768,S_IFDIR:16384,S_IFCHR:8192,S_IFBLK:24576,S_IFIFO:4096,S_IFLNK:40960,S_IFSOCK:49152,O_CREAT:64,O_EXCL:128,O_NOCTTY:256,O_TRUNC:512,O_APPEND:1024,O_DIRECTORY:65536,O_NOATIME:262144,O_NOFOLLOW:131072,O_SYNC:1052672,O_DIRECT:16384,O_NONBLOCK:2048,S_IRWXU:448,S_IRUSR:256,S_IWUSR:128,S_IXUSR:64,S_IRWXG:56,S_IRGRP:32,S_IWGRP:16,S_IXGRP:8,S_IRWXO:7,S_IROTH:4,S_IWOTH:2,S_IXOTH:1,F_OK:0,R_OK:4,W_OK:2,X_OK:1,UV_FS_SYMLINK_DIR:1,UV_FS_SYMLINK_JUNCTION:2,UV_FS_COPYFILE_EXCL:1,UV_FS_COPYFILE_FICLONE:2,UV_FS_COPYFILE_FICLONE_FORCE:4,COPYFILE_EXCL:1,COPYFILE_FICLONE:2,COPYFILE_FICLONE_FORCE:4}}));l(Z);var t=b((function(I,g){g.default="function"===typeof BigInt?BigInt:function(){throw Error("BigInt is not supported in this environment.")}})),o=b((function(I,g){Object.defineProperty(g,"__esModule",{value:!0});var C=Z.constants.S_IFMT,A=Z.constants.S_IFDIR,i=Z.constants.S_IFREG,c=Z.constants.S_IFBLK,G=Z.constants.S_IFCHR,l=Z.constants.S_IFLNK,b=Z.constants.S_IFIFO,o=Z.constants.S_IFSOCK;I=function(){function I(){}return I.build=function(g,C){void 0===C&&(C=!1);var A=new I,i=g.gid,c=g.atime,G=g.mtime,l=g.ctime;return C=C?t.default:function(I){return I},A.uid=C(g.uid),A.gid=C(i),A.rdev=C(0),A.blksize=C(4096),A.ino=C(g.ino),A.size=C(g.getSize()),A.blocks=C(1),A.atime=c,A.mtime=G,A.ctime=l,A.birthtime=l,A.atimeMs=C(c.getTime()),A.mtimeMs=C(G.getTime()),i=C(l.getTime()),A.ctimeMs=i,A.birthtimeMs=i,A.dev=C(0),A.mode=C(g.mode),A.nlink=C(g.nlink),A},I.prototype._checkModeProperty=function(I){return(Number(this.mode)&C)===I},I.prototype.isDirectory=function(){return this._checkModeProperty(A)},I.prototype.isFile=function(){return this._checkModeProperty(i)},I.prototype.isBlockDevice=function(){return this._checkModeProperty(c)},I.prototype.isCharacterDevice=function(){return this._checkModeProperty(G)},I.prototype.isSymbolicLink=function(){return this._checkModeProperty(l)},I.prototype.isFIFO=function(){return this._checkModeProperty(b)},I.prototype.isSocket=function(){return this._checkModeProperty(o)},I}(),g.Stats=I,g.default=I}));l(o);var n="undefined"!==typeof C.g?C.g:"undefined"!==typeof self?self:"undefined"!==typeof window?window:{},u=[],d=[],m="undefined"!==typeof Uint8Array?Uint8Array:Array,e=!1;function B(){e=!0;for(var I=0;64>I;++I)u[I]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[I],d["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charCodeAt(I)]=I;d[45]=62,d[95]=63}function X(I,g,C){for(var A=[],i=g;i<C;i+=3)g=(I[i]<<16)+(I[i+1]<<8)+I[i+2],A.push(u[g>>18&63]+u[g>>12&63]+u[g>>6&63]+u[63&g]);return A.join("")}function y(I){e||B();for(var g=I.length,C=g%3,A="",i=[],c=0,G=g-C;c<G;c+=16383)i.push(X(I,c,c+16383>G?G:c+16383));return 1===C?(I=I[g-1],A+=u[I>>2],A+=u[I<<4&63],A+="=="):2===C&&(I=(I[g-2]<<8)+I[g-1],A+=u[I>>10],A+=u[I>>4&63],A+=u[I<<2&63],A+="="),i.push(A),i.join("")}function V(I,g,C,A,i){var c=8*i-A-1,G=(1<<c)-1,l=G>>1,b=-7,Z=C?-1:1,t=I[g+(i=C?i-1:0)];for(i+=Z,C=t&(1<<-b)-1,t>>=-b,b+=c;0<b;C=256*C+I[g+i],i+=Z,b-=8);for(c=C&(1<<-b)-1,C>>=-b,b+=A;0<b;c=256*c+I[g+i],i+=Z,b-=8);if(0===C)C=1-l;else{if(C===G)return c?NaN:1/0*(t?-1:1);c+=Math.pow(2,A),C-=l}return(t?-1:1)*c*Math.pow(2,C-A)}function h(I,g,C,A,i,c){var G,l=8*c-i-1,b=(1<<l)-1,Z=b>>1,t=23===i?Math.pow(2,-24)-Math.pow(2,-77):0;c=A?0:c-1;var o=A?1:-1,n=0>g||0===g&&0>1/g?1:0;for(g=Math.abs(g),isNaN(g)||1/0===g?(g=isNaN(g)?1:0,A=b):(A=Math.floor(Math.log(g)/Math.LN2),1>g*(G=Math.pow(2,-A))&&(A--,G*=2),2<=(g=1<=A+Z?g+t/G:g+t*Math.pow(2,1-Z))*G&&(A++,G/=2),A+Z>=b?(g=0,A=b):1<=A+Z?(g=(g*G-1)*Math.pow(2,i),A+=Z):(g=g*Math.pow(2,Z-1)*Math.pow(2,i),A=0));8<=i;I[C+c]=255&g,c+=o,g/=256,i-=8);for(A=A<<i|g,l+=i;0<l;I[C+c]=255&A,c+=o,A/=256,l-=8);I[C+c-o]|=128*n}var a={}.toString,s=Array.isArray||function(I){return"[object Array]"==a.call(I)};W.TYPED_ARRAY_SUPPORT=void 0===n.TYPED_ARRAY_SUPPORT||n.TYPED_ARRAY_SUPPORT;var r=W.TYPED_ARRAY_SUPPORT?2147483647:1073741823;function Y(I,g){if((W.TYPED_ARRAY_SUPPORT?2147483647:1073741823)<g)throw new RangeError("Invalid typed array length");return W.TYPED_ARRAY_SUPPORT?(I=new Uint8Array(g)).__proto__=W.prototype:(null===I&&(I=new W(g)),I.length=g),I}function W(I,g,C){if(!(W.TYPED_ARRAY_SUPPORT||this instanceof W))return new W(I,g,C);if("number"===typeof I){if("string"===typeof g)throw Error("If encoding is specified then the first argument must be a string");return K(this,I)}return S(this,I,g,C)}function S(I,g,C,A){if("number"===typeof g)throw new TypeError('"value" argument must not be a number');if("undefined"!==typeof ArrayBuffer&&g instanceof ArrayBuffer){if(g.byteLength,0>C||g.byteLength<C)throw new RangeError("'offset' is out of bounds");if(g.byteLength<C+(A||0))throw new RangeError("'length' is out of bounds");return g=void 0===C&&void 0===A?new Uint8Array(g):void 0===A?new Uint8Array(g,C):new Uint8Array(g,C,A),W.TYPED_ARRAY_SUPPORT?(I=g).__proto__=W.prototype:I=R(I,g),I}if("string"===typeof g){if(A=I,"string"===typeof(I=C)&&""!==I||(I="utf8"),!W.isEncoding(I))throw new TypeError('"encoding" must be a valid string encoding');return(g=(A=Y(A,C=0|F(g,I))).write(g,I))!==C&&(A=A.slice(0,g)),A}return function(I,g){if(J(g)){var C=0|H(g.length);return 0===(I=Y(I,C)).length||g.copy(I,0,0,C),I}if(g){if("undefined"!==typeof ArrayBuffer&&g.buffer instanceof ArrayBuffer||"length"in g)return(C="number"!==typeof g.length)||(C=(C=g.length)!==C),C?Y(I,0):R(I,g);if("Buffer"===g.type&&s(g.data))return R(I,g.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(I,g)}function p(I){if("number"!==typeof I)throw new TypeError('"size" argument must be a number');if(0>I)throw new RangeError('"size" argument must not be negative')}function K(I,g){if(p(g),I=Y(I,0>g?0:0|H(g)),!W.TYPED_ARRAY_SUPPORT)for(var C=0;C<g;++C)I[C]=0;return I}function R(I,g){var C=0>g.length?0:0|H(g.length);I=Y(I,C);for(var A=0;A<C;A+=1)I[A]=255&g[A];return I}function H(I){if(I>=(W.TYPED_ARRAY_SUPPORT?2147483647:1073741823))throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+(W.TYPED_ARRAY_SUPPORT?2147483647:1073741823).toString(16)+" bytes");return 0|I}function J(I){return!(null==I||!I._isBuffer)}function F(I,g){if(J(I))return I.length;if("undefined"!==typeof ArrayBuffer&&"function"===typeof ArrayBuffer.isView&&(ArrayBuffer.isView(I)||I instanceof ArrayBuffer))return I.byteLength;"string"!==typeof I&&(I=""+I);var C=I.length;if(0===C)return 0;for(var A=!1;;)switch(g){case"ascii":case"latin1":case"binary":return C;case"utf8":case"utf-8":case void 0:return D(I).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*C;case"hex":return C>>>1;case"base64":return P(I).length;default:if(A)return D(I).length;g=(""+g).toLowerCase(),A=!0}}function w(I,g,C){var A=!1;if((void 0===g||0>g)&&(g=0),g>this.length)return"";if((void 0===C||C>this.length)&&(C=this.length),0>=C)return"";if((C>>>=0)<=(g>>>=0))return"";for(I||(I="utf8");;)switch(I){case"hex":for(I=g,g=C,C=this.length,(!I||0>I)&&(I=0),(!g||0>g||g>C)&&(g=C),A="",C=I;C<g;++C)A=(I=A)+(A=16>(A=this[C])?"0"+A.toString(16):A.toString(16));return A;case"utf8":case"utf-8":return N(this,g,C);case"ascii":for(I="",C=Math.min(this.length,C);g<C;++g)I+=String.fromCharCode(127&this[g]);return I;case"latin1":case"binary":for(I="",C=Math.min(this.length,C);g<C;++g)I+=String.fromCharCode(this[g]);return I;case"base64":return g=0===g&&C===this.length?y(this):y(this.slice(g,C));case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":for(g=this.slice(g,C),C="",I=0;I<g.length;I+=2)C+=String.fromCharCode(g[I]+256*g[I+1]);return C;default:if(A)throw new TypeError("Unknown encoding: "+I);I=(I+"").toLowerCase(),A=!0}}function f(I,g,C){var A=I[g];I[g]=I[C],I[C]=A}function v(I,g,C,A,i){if(0===I.length)return-1;if("string"===typeof C?(A=C,C=0):2147483647<C?C=2147483647:-2147483648>C&&(C=-2147483648),C=+C,isNaN(C)&&(C=i?0:I.length-1),0>C&&(C=I.length+C),C>=I.length){if(i)return-1;C=I.length-1}else if(0>C){if(!i)return-1;C=0}if("string"===typeof g&&(g=W.from(g,A)),J(g))return 0===g.length?-1:x(I,g,C,A,i);if("number"===typeof g)return g&=255,W.TYPED_ARRAY_SUPPORT&&"function"===typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(I,g,C):Uint8Array.prototype.lastIndexOf.call(I,g,C):x(I,[g],C,A,i);throw new TypeError("val must be string, number or Buffer")}function x(I,g,C,A,i){function c(I,g){return 1===G?I[g]:I.readUInt16BE(g*G)}var G=1,l=I.length,b=g.length;if(void 0!==A&&("ucs2"===(A=String(A).toLowerCase())||"ucs-2"===A||"utf16le"===A||"utf-16le"===A)){if(2>I.length||2>g.length)return-1;G=2,l/=2,b/=2,C/=2}if(i)for(A=-1;C<l;C++)if(c(I,C)===c(g,-1===A?0:C-A)){if(-1===A&&(A=C),C-A+1===b)return A*G}else-1!==A&&(C-=C-A),A=-1;else for(C+b>l&&(C=l-b);0<=C;C--){for(l=!0,A=0;A<b;A++)if(c(I,C+A)!==c(g,A)){l=!1;break}if(l)return C}return-1}function N(I,g,C){C=Math.min(I.length,C);for(var A=[];g<C;){var i=I[g],c=null,G=239<i?4:223<i?3:191<i?2:1;if(g+G<=C)switch(G){case 1:128>i&&(c=i);break;case 2:var l=I[g+1];128===(192&l)&&(127<(i=(31&i)<<6|63&l)&&(c=i));break;case 3:l=I[g+1];var b=I[g+2];128===(192&l)&&128===(192&b)&&(2047<(i=(15&i)<<12|(63&l)<<6|63&b)&&(55296>i||57343<i)&&(c=i));break;case 4:l=I[g+1],b=I[g+2];var Z=I[g+3];128===(192&l)&&128===(192&b)&&128===(192&Z)&&(65535<(i=(15&i)<<18|(63&l)<<12|(63&b)<<6|63&Z)&&1114112>i&&(c=i))}null===c?(c=65533,G=1):65535<c&&(c-=65536,A.push(c>>>10&1023|55296),c=56320|1023&c),A.push(c),g+=G}if((I=A.length)<=L)A=String.fromCharCode.apply(String,A);else{for(C="",g=0;g<I;)C+=String.fromCharCode.apply(String,A.slice(g,g+=L));A=C}return A}W.poolSize=8192,W._augment=function(I){return I.__proto__=W.prototype,I},W.from=function(I,g,C){return S(null,I,g,C)},W.TYPED_ARRAY_SUPPORT&&(W.prototype.__proto__=Uint8Array.prototype,W.__proto__=Uint8Array),W.alloc=function(I,g,C){return p(I),I=0>=I?Y(null,I):void 0!==g?"string"===typeof C?Y(null,I).fill(g,C):Y(null,I).fill(g):Y(null,I)},W.allocUnsafe=function(I){return K(null,I)},W.allocUnsafeSlow=function(I){return K(null,I)},W.isBuffer=j,W.compare=function(I,g){if(!J(I)||!J(g))throw new TypeError("Arguments must be Buffers");if(I===g)return 0;for(var C=I.length,A=g.length,i=0,c=Math.min(C,A);i<c;++i)if(I[i]!==g[i]){C=I[i],A=g[i];break}return C<A?-1:A<C?1:0},W.isEncoding=function(I){switch(String(I).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},W.concat=function(I,g){if(!s(I))throw new TypeError('"list" argument must be an Array of Buffers');if(0===I.length)return W.alloc(0);var C;if(void 0===g)for(C=g=0;C<I.length;++C)g+=I[C].length;g=W.allocUnsafe(g);var A=0;for(C=0;C<I.length;++C){var i=I[C];if(!J(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(g,A),A+=i.length}return g},W.byteLength=F,W.prototype._isBuffer=!0,W.prototype.swap16=function(){var I=this.length;if(0!==I%2)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var g=0;g<I;g+=2)f(this,g,g+1);return this},W.prototype.swap32=function(){var I=this.length;if(0!==I%4)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var g=0;g<I;g+=4)f(this,g,g+3),f(this,g+1,g+2);return this},W.prototype.swap64=function(){var I=this.length;if(0!==I%8)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var g=0;g<I;g+=8)f(this,g,g+7),f(this,g+1,g+6),f(this,g+2,g+5),f(this,g+3,g+4);return this},W.prototype.toString=function(){var I=0|this.length;return 0===I?"":0===arguments.length?N(this,0,I):w.apply(this,arguments)},W.prototype.equals=function(I){if(!J(I))throw new TypeError("Argument must be a Buffer");return this===I||0===W.compare(this,I)},W.prototype.inspect=function(){var I="";return 0<this.length&&(I=this.toString("hex",0,50).match(/.{2}/g).join(" "),50<this.length&&(I+=" ... ")),"<Buffer "+I+">"},W.prototype.compare=function(I,g,C,A,i){if(!J(I))throw new TypeError("Argument must be a Buffer");if(void 0===g&&(g=0),void 0===C&&(C=I?I.length:0),void 0===A&&(A=0),void 0===i&&(i=this.length),0>g||C>I.length||0>A||i>this.length)throw new RangeError("out of range index");if(A>=i&&g>=C)return 0;if(A>=i)return-1;if(g>=C)return 1;if(this===I)return 0;var c=(i>>>=0)-(A>>>=0),G=(C>>>=0)-(g>>>=0),l=Math.min(c,G);for(A=this.slice(A,i),I=I.slice(g,C),g=0;g<l;++g)if(A[g]!==I[g]){c=A[g],G=I[g];break}return c<G?-1:G<c?1:0},W.prototype.includes=function(I,g,C){return-1!==this.indexOf(I,g,C)},W.prototype.indexOf=function(I,g,C){return v(this,I,g,C,!0)},W.prototype.lastIndexOf=function(I,g,C){return v(this,I,g,C,!1)},W.prototype.write=function(I,g,C,A){if(void 0===g)A="utf8",C=this.length,g=0;else if(void 0===C&&"string"===typeof g)A=g,C=this.length,g=0;else{if(!isFinite(g))throw Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");g|=0,isFinite(C)?(C|=0,void 0===A&&(A="utf8")):(A=C,C=void 0)}var i=this.length-g;if((void 0===C||C>i)&&(C=i),0<I.length&&(0>C||0>g)||g>this.length)throw new RangeError("Attempt to write outside buffer bounds");for(A||(A="utf8"),i=!1;;)switch(A){case"hex":I:{if(g=Number(g)||0,A=this.length-g,C?(C=Number(C))>A&&(C=A):C=A,0!==(A=I.length)%2)throw new TypeError("Invalid hex string");for(C>A/2&&(C=A/2),A=0;A<C;++A){if(i=parseInt(I.substr(2*A,2),16),isNaN(i)){I=A;break I}this[g+A]=i}I=A}return I;case"utf8":case"utf-8":return q(D(I,this.length-g),this,g,C);case"ascii":case"latin1":case"binary":return q(O(I),this,g,C);case"base64":return q(P(I),this,g,C);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":A=I,i=this.length-g;for(var c=[],G=0;G<A.length&&!(0>(i-=2));++G){var l=A.charCodeAt(G);I=l>>8,l%=256,c.push(l),c.push(I)}return q(c,this,g,C);default:if(i)throw new TypeError("Unknown encoding: "+A);A=(""+A).toLowerCase(),i=!0}},W.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var L=4096;function k(I,g,C){if(0!==I%1||0>I)throw new RangeError("offset is not uint");if(I+g>C)throw new RangeError("Trying to access beyond buffer length")}function T(I,g,C,A,i,c){if(!J(I))throw new TypeError('"buffer" argument must be a Buffer instance');if(g>i||g<c)throw new RangeError('"value" argument is out of bounds');if(C+A>I.length)throw new RangeError("Index out of range")}function U(I,g,C,A){0>g&&(g=65535+g+1);for(var i=0,c=Math.min(I.length-C,2);i<c;++i)I[C+i]=(g&255<<8*(A?i:1-i))>>>8*(A?i:1-i)}function z(I,g,C,A){0>g&&(g=4294967295+g+1);for(var i=0,c=Math.min(I.length-C,4);i<c;++i)I[C+i]=g>>>8*(A?i:3-i)&255}function E(I,g,C,A){if(C+A>I.length)throw new RangeError("Index out of range");if(0>C)throw new RangeError("Index out of range")}W.prototype.slice=function(I,g){var C=this.length;if(0>(I=~~I)?0>(I+=C)&&(I=0):I>C&&(I=C),0>(g=void 0===g?C:~~g)?0>(g+=C)&&(g=0):g>C&&(g=C),g<I&&(g=I),W.TYPED_ARRAY_SUPPORT)(g=this.subarray(I,g)).__proto__=W.prototype;else{g=new W(C=g-I,void 0);for(var A=0;A<C;++A)g[A]=this[A+I]}return g},W.prototype.readUIntLE=function(I,g,C){I|=0,g|=0,C||k(I,g,this.length),C=this[I];for(var A=1,i=0;++i<g&&(A*=256);)C+=this[I+i]*A;return C},W.prototype.readUIntBE=function(I,g,C){I|=0,g|=0,C||k(I,g,this.length),C=this[I+--g];for(var A=1;0<g&&(A*=256);)C+=this[I+--g]*A;return C},W.prototype.readUInt8=function(I,g){return g||k(I,1,this.length),this[I]},W.prototype.readUInt16LE=function(I,g){return g||k(I,2,this.length),this[I]|this[I+1]<<8},W.prototype.readUInt16BE=function(I,g){return g||k(I,2,this.length),this[I]<<8|this[I+1]},W.prototype.readUInt32LE=function(I,g){return g||k(I,4,this.length),(this[I]|this[I+1]<<8|this[I+2]<<16)+16777216*this[I+3]},W.prototype.readUInt32BE=function(I,g){return g||k(I,4,this.length),16777216*this[I]+(this[I+1]<<16|this[I+2]<<8|this[I+3])},W.prototype.readIntLE=function(I,g,C){I|=0,g|=0,C||k(I,g,this.length),C=this[I];for(var A=1,i=0;++i<g&&(A*=256);)C+=this[I+i]*A;return C>=128*A&&(C-=Math.pow(2,8*g)),C},W.prototype.readIntBE=function(I,g,C){I|=0,g|=0,C||k(I,g,this.length),C=g;for(var A=1,i=this[I+--C];0<C&&(A*=256);)i+=this[I+--C]*A;return i>=128*A&&(i-=Math.pow(2,8*g)),i},W.prototype.readInt8=function(I,g){return g||k(I,1,this.length),128&this[I]?-1*(255-this[I]+1):this[I]},W.prototype.readInt16LE=function(I,g){return g||k(I,2,this.length),32768&(I=this[I]|this[I+1]<<8)?4294901760|I:I},W.prototype.readInt16BE=function(I,g){return g||k(I,2,this.length),32768&(I=this[I+1]|this[I]<<8)?4294901760|I:I},W.prototype.readInt32LE=function(I,g){return g||k(I,4,this.length),this[I]|this[I+1]<<8|this[I+2]<<16|this[I+3]<<24},W.prototype.readInt32BE=function(I,g){return g||k(I,4,this.length),this[I]<<24|this[I+1]<<16|this[I+2]<<8|this[I+3]},W.prototype.readFloatLE=function(I,g){return g||k(I,4,this.length),V(this,I,!0,23,4)},W.prototype.readFloatBE=function(I,g){return g||k(I,4,this.length),V(this,I,!1,23,4)},W.prototype.readDoubleLE=function(I,g){return g||k(I,8,this.length),V(this,I,!0,52,8)},W.prototype.readDoubleBE=function(I,g){return g||k(I,8,this.length),V(this,I,!1,52,8)},W.prototype.writeUIntLE=function(I,g,C,A){I=+I,g|=0,C|=0,A||T(this,I,g,C,Math.pow(2,8*C)-1,0),A=1;var i=0;for(this[g]=255&I;++i<C&&(A*=256);)this[g+i]=I/A&255;return g+C},W.prototype.writeUIntBE=function(I,g,C,A){I=+I,g|=0,C|=0,A||T(this,I,g,C,Math.pow(2,8*C)-1,0);var i=1;for(this[g+(A=C-1)]=255&I;0<=--A&&(i*=256);)this[g+A]=I/i&255;return g+C},W.prototype.writeUInt8=function(I,g,C){return I=+I,g|=0,C||T(this,I,g,1,255,0),W.TYPED_ARRAY_SUPPORT||(I=Math.floor(I)),this[g]=255&I,g+1},W.prototype.writeUInt16LE=function(I,g,C){return I=+I,g|=0,C||T(this,I,g,2,65535,0),W.TYPED_ARRAY_SUPPORT?(this[g]=255&I,this[g+1]=I>>>8):U(this,I,g,!0),g+2},W.prototype.writeUInt16BE=function(I,g,C){return I=+I,g|=0,C||T(this,I,g,2,65535,0),W.TYPED_ARRAY_SUPPORT?(this[g]=I>>>8,this[g+1]=255&I):U(this,I,g,!1),g+2},W.prototype.writeUInt32LE=function(I,g,C){return I=+I,g|=0,C||T(this,I,g,4,4294967295,0),W.TYPED_ARRAY_SUPPORT?(this[g+3]=I>>>24,this[g+2]=I>>>16,this[g+1]=I>>>8,this[g]=255&I):z(this,I,g,!0),g+4},W.prototype.writeUInt32BE=function(I,g,C){return I=+I,g|=0,C||T(this,I,g,4,4294967295,0),W.TYPED_ARRAY_SUPPORT?(this[g]=I>>>24,this[g+1]=I>>>16,this[g+2]=I>>>8,this[g+3]=255&I):z(this,I,g,!1),g+4},W.prototype.writeIntLE=function(I,g,C,A){I=+I,g|=0,A||T(this,I,g,C,(A=Math.pow(2,8*C-1))-1,-A),A=0;var i=1,c=0;for(this[g]=255&I;++A<C&&(i*=256);)0>I&&0===c&&0!==this[g+A-1]&&(c=1),this[g+A]=(I/i>>0)-c&255;return g+C},W.prototype.writeIntBE=function(I,g,C,A){I=+I,g|=0,A||T(this,I,g,C,(A=Math.pow(2,8*C-1))-1,-A);var i=1,c=0;for(this[g+(A=C-1)]=255&I;0<=--A&&(i*=256);)0>I&&0===c&&0!==this[g+A+1]&&(c=1),this[g+A]=(I/i>>0)-c&255;return g+C},W.prototype.writeInt8=function(I,g,C){return I=+I,g|=0,C||T(this,I,g,1,127,-128),W.TYPED_ARRAY_SUPPORT||(I=Math.floor(I)),0>I&&(I=255+I+1),this[g]=255&I,g+1},W.prototype.writeInt16LE=function(I,g,C){return I=+I,g|=0,C||T(this,I,g,2,32767,-32768),W.TYPED_ARRAY_SUPPORT?(this[g]=255&I,this[g+1]=I>>>8):U(this,I,g,!0),g+2},W.prototype.writeInt16BE=function(I,g,C){return I=+I,g|=0,C||T(this,I,g,2,32767,-32768),W.TYPED_ARRAY_SUPPORT?(this[g]=I>>>8,this[g+1]=255&I):U(this,I,g,!1),g+2},W.prototype.writeInt32LE=function(I,g,C){return I=+I,g|=0,C||T(this,I,g,4,2147483647,-2147483648),W.TYPED_ARRAY_SUPPORT?(this[g]=255&I,this[g+1]=I>>>8,this[g+2]=I>>>16,this[g+3]=I>>>24):z(this,I,g,!0),g+4},W.prototype.writeInt32BE=function(I,g,C){return I=+I,g|=0,C||T(this,I,g,4,2147483647,-2147483648),0>I&&(I=4294967295+I+1),W.TYPED_ARRAY_SUPPORT?(this[g]=I>>>24,this[g+1]=I>>>16,this[g+2]=I>>>8,this[g+3]=255&I):z(this,I,g,!1),g+4},W.prototype.writeFloatLE=function(I,g,C){return C||E(this,0,g,4),h(this,I,g,!0,23,4),g+4},W.prototype.writeFloatBE=function(I,g,C){return C||E(this,0,g,4),h(this,I,g,!1,23,4),g+4},W.prototype.writeDoubleLE=function(I,g,C){return C||E(this,0,g,8),h(this,I,g,!0,52,8),g+8},W.prototype.writeDoubleBE=function(I,g,C){return C||E(this,0,g,8),h(this,I,g,!1,52,8),g+8},W.prototype.copy=function(I,g,C,A){if(C||(C=0),A||0===A||(A=this.length),g>=I.length&&(g=I.length),g||(g=0),0<A&&A<C&&(A=C),A===C||0===I.length||0===this.length)return 0;if(0>g)throw new RangeError("targetStart out of bounds");if(0>C||C>=this.length)throw new RangeError("sourceStart out of bounds");if(0>A)throw new RangeError("sourceEnd out of bounds");A>this.length&&(A=this.length),I.length-g<A-C&&(A=I.length-g+C);var i=A-C;if(this===I&&C<g&&g<A)for(A=i-1;0<=A;--A)I[A+g]=this[A+C];else if(1e3>i||!W.TYPED_ARRAY_SUPPORT)for(A=0;A<i;++A)I[A+g]=this[A+C];else Uint8Array.prototype.set.call(I,this.subarray(C,C+i),g);return i},W.prototype.fill=function(I,g,C,A){if("string"===typeof I){if("string"===typeof g?(A=g,g=0,C=this.length):"string"===typeof C&&(A=C,C=this.length),1===I.length){var i=I.charCodeAt(0);256>i&&(I=i)}if(void 0!==A&&"string"!==typeof A)throw new TypeError("encoding must be a string");if("string"===typeof A&&!W.isEncoding(A))throw new TypeError("Unknown encoding: "+A)}else"number"===typeof I&&(I&=255);if(0>g||this.length<g||this.length<C)throw new RangeError("Out of range index");if(C<=g)return this;if(g>>>=0,C=void 0===C?this.length:C>>>0,I||(I=0),"number"===typeof I)for(A=g;A<C;++A)this[A]=I;else for(i=(I=J(I)?I:D(new W(I,A).toString())).length,A=0;A<C-g;++A)this[A+g]=I[A%i];return this};var M=/[^+\/0-9A-Za-z-_]/g;function D(I,g){g=g||1/0;for(var C,A=I.length,i=null,c=[],G=0;G<A;++G){if(55295<(C=I.charCodeAt(G))&&57344>C){if(!i){if(56319<C){-1<(g-=3)&&c.push(239,191,189);continue}if(G+1===A){-1<(g-=3)&&c.push(239,191,189);continue}i=C;continue}if(56320>C){-1<(g-=3)&&c.push(239,191,189),i=C;continue}C=65536+(i-55296<<10|C-56320)}else i&&-1<(g-=3)&&c.push(239,191,189);if(i=null,128>C){if(0>--g)break;c.push(C)}else if(2048>C){if(0>(g-=2))break;c.push(C>>6|192,63&C|128)}else if(65536>C){if(0>(g-=3))break;c.push(C>>12|224,C>>6&63|128,63&C|128)}else{if(!(1114112>C))throw Error("Invalid code point");if(0>(g-=4))break;c.push(C>>18|240,C>>12&63|128,C>>6&63|128,63&C|128)}}return c}function O(I){for(var g=[],C=0;C<I.length;++C)g.push(255&I.charCodeAt(C));return g}function P(I){if(2>(I=(I.trim?I.trim():I.replace(/^\s+|\s+$/g,"")).replace(M,"")).length)I="";else for(;0!==I.length%4;)I+="=";e||B();var g=I.length;if(0<g%4)throw Error("Invalid string. Length must be a multiple of 4");var C="="===I[g-2]?2:"="===I[g-1]?1:0,A=new m(3*g/4-C),i=0<C?g-4:g,c=0;for(g=0;g<i;g+=4){var G=d[I.charCodeAt(g)]<<18|d[I.charCodeAt(g+1)]<<12|d[I.charCodeAt(g+2)]<<6|d[I.charCodeAt(g+3)];A[c++]=G>>16&255,A[c++]=G>>8&255,A[c++]=255&G}return 2===C?(G=d[I.charCodeAt(g)]<<2|d[I.charCodeAt(g+1)]>>4,A[c++]=255&G):1===C&&(G=d[I.charCodeAt(g)]<<10|d[I.charCodeAt(g+1)]<<4|d[I.charCodeAt(g+2)]>>2,A[c++]=G>>8&255,A[c++]=255&G),A}function q(I,g,C,A){for(var i=0;i<A&&!(i+C>=g.length||i>=I.length);++i)g[i+C]=I[i];return i}function j(I){return null!=I&&(!!I._isBuffer||Q(I)||"function"===typeof I.readFloatLE&&"function"===typeof I.slice&&Q(I.slice(0,0)))}function Q(I){return!!I.constructor&&"function"===typeof I.constructor.isBuffer&&I.constructor.isBuffer(I)}var _=Object.freeze({__proto__:null,INSPECT_MAX_BYTES:50,kMaxLength:r,Buffer:W,SlowBuffer:function(I){return+I!=I&&(I=0),W.alloc(+I)},isBuffer:j}),$=b((function(I,g){function C(I){for(var g=[],C=1;C<arguments.length;C++)g[C-1]=arguments[C];return new(_.Buffer.bind.apply(_.Buffer,A([void 0,I],g)))}var A=G&&G.__spreadArrays||function(){for(var I=0,g=0,C=arguments.length;g<C;g++)I+=arguments[g].length;I=Array(I);var A=0;for(g=0;g<C;g++)for(var i=arguments[g],c=0,G=i.length;c<G;c++,A++)I[A]=i[c];return I};Object.defineProperty(g,"__esModule",{value:!0}),g.Buffer=_.Buffer,g.bufferAllocUnsafe=_.Buffer.allocUnsafe||C,g.bufferFrom=_.Buffer.from||C}));function II(){throw Error("setTimeout has not been defined")}function gI(){throw Error("clearTimeout has not been defined")}l($);var CI=II,AI=gI;function iI(I){if(CI===setTimeout)return setTimeout(I,0);if((CI===II||!CI)&&setTimeout)return CI=setTimeout,setTimeout(I,0);try{return CI(I,0)}catch(g){try{return CI.call(null,I,0)}catch(C){return CI.call(this,I,0)}}}"function"===typeof n.setTimeout&&(CI=setTimeout),"function"===typeof n.clearTimeout&&(AI=clearTimeout);var cI,GI=[],lI=!1,bI=-1;function ZI(){lI&&cI&&(lI=!1,cI.length?GI=cI.concat(GI):bI=-1,GI.length&&tI())}function tI(){if(!lI){var I=iI(ZI);lI=!0;for(var g=GI.length;g;){for(cI=GI,GI=[];++bI<g;)cI&&cI[bI].run();bI=-1,g=GI.length}cI=null,lI=!1,function(I){if(AI===clearTimeout)return clearTimeout(I);if((AI===gI||!AI)&&clearTimeout)return AI=clearTimeout,clearTimeout(I);try{AI(I)}catch(g){try{return AI.call(null,I)}catch(C){return AI.call(this,I)}}}(I)}}function oI(I){var g=Array(arguments.length-1);if(1<arguments.length)for(var C=1;C<arguments.length;C++)g[C-1]=arguments[C];GI.push(new nI(I,g)),1!==GI.length||lI||iI(tI)}function nI(I,g){this.fun=I,this.array=g}function uI(){}nI.prototype.run=function(){this.fun.apply(null,this.array)};var dI=n.performance||{},mI=dI.now||dI.mozNow||dI.msNow||dI.oNow||dI.webkitNow||function(){return(new Date).getTime()},eI=new Date,BI={nextTick:oI,title:"browser",browser:!0,env:{},argv:[],version:"",versions:{},on:uI,addListener:uI,once:uI,off:uI,removeListener:uI,removeAllListeners:uI,emit:uI,binding:function(){throw Error("process.binding is not supported")},cwd:function(){return"/"},chdir:function(){throw Error("process.chdir is not supported")},umask:function(){return 0},hrtime:function(I){var g=.001*mI.call(dI),C=Math.floor(g);return g=Math.floor(g%1*1e9),I&&(C-=I[0],0>(g-=I[1])&&(C--,g+=1e9)),[C,g]},platform:"browser",release:{},config:{},uptime:function(){return(new Date-eI)/1e3}},XI="function"===typeof Object.create?function(I,g){I.super_=g,I.prototype=Object.create(g.prototype,{constructor:{value:I,enumerable:!1,writable:!0,configurable:!0}})}:function(I,g){function C(){}I.super_=g,C.prototype=g.prototype,I.prototype=new C,I.prototype.constructor=I},yI=/%[sdj%]/g;function VI(I){if(!wI(I)){for(var g=[],C=0;C<arguments.length;C++)g.push(YI(arguments[C]));return g.join(" ")}C=1;var A=arguments,i=A.length;g=String(I).replace(yI,(function(I){if("%%"===I)return"%";if(C>=i)return I;switch(I){case"%s":return String(A[C++]);case"%d":return Number(A[C++]);case"%j":try{return JSON.stringify(A[C++])}catch(g){return"[Circular]"}default:return I}}));for(var c=A[C];C<i;c=A[++C])g=null!==c&&xI(c)?g+" "+YI(c):g+" "+c;return g}function hI(I,g){if(fI(n.process))return function(){return hI(I,g).apply(this,arguments)};if(!0===BI.noDeprecation)return I;var C=!1;return function(){if(!C){if(BI.throwDeprecation)throw Error(g);BI.traceDeprecation?console.trace(g):console.error(g),C=!0}return I.apply(this,arguments)}}var aI,sI={};function rI(I){return fI(aI)&&(aI=BI.env.NODE_DEBUG||""),I=I.toUpperCase(),sI[I]||(new RegExp("\\b"+I+"\\b","i").test(aI)?sI[I]=function(){var g=VI.apply(null,arguments);console.error("%s %d: %s",I,0,g)}:sI[I]=function(){}),sI[I]}function YI(I,g){var C={seen:[],stylize:SI};return 3<=arguments.length&&(C.depth=arguments[2]),4<=arguments.length&&(C.colors=arguments[3]),JI(g)?C.showHidden=g:g&&MI(C,g),fI(C.showHidden)&&(C.showHidden=!1),fI(C.depth)&&(C.depth=2),fI(C.colors)&&(C.colors=!1),fI(C.customInspect)&&(C.customInspect=!0),C.colors&&(C.stylize=WI),pI(C,I,C.depth)}function WI(I,g){return(g=YI.styles[g])?"\x1b["+YI.colors[g][0]+"m"+I+"\x1b["+YI.colors[g][1]+"m":I}function SI(I){return I}function pI(I,g,C){if(I.customInspect&&g&&kI(g.inspect)&&g.inspect!==YI&&(!g.constructor||g.constructor.prototype!==g)){var A=g.inspect(C,I);return wI(A)||(A=pI(I,A,C)),A}if(A=function(I,g){if(fI(g))return I.stylize("undefined","undefined");if(wI(g))return g="'"+JSON.stringify(g).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'",I.stylize(g,"string");if(FI(g))return I.stylize(""+g,"number");if(JI(g))return I.stylize(""+g,"boolean");if(null===g)return I.stylize("null","null")}(I,g))return A;var i=Object.keys(g),c=function(I){var g={};return I.forEach((function(I){g[I]=!0})),g}(i);if(I.showHidden&&(i=Object.getOwnPropertyNames(g)),LI(g)&&(0<=i.indexOf("message")||0<=i.indexOf("description")))return KI(g);if(0===i.length){if(kI(g))return I.stylize("[Function"+(g.name?": "+g.name:"")+"]","special");if(vI(g))return I.stylize(RegExp.prototype.toString.call(g),"regexp");if(NI(g))return I.stylize(Date.prototype.toString.call(g),"date");if(LI(g))return KI(g)}A="";var G=!1,l=["{","}"];return HI(g)&&(G=!0,l=["[","]"]),kI(g)&&(A=" [Function"+(g.name?": "+g.name:"")+"]"),vI(g)&&(A=" "+RegExp.prototype.toString.call(g)),NI(g)&&(A=" "+Date.prototype.toUTCString.call(g)),LI(g)&&(A=" "+KI(g)),0!==i.length||G&&0!=g.length?0>C?vI(g)?I.stylize(RegExp.prototype.toString.call(g),"regexp"):I.stylize("[Object]","special"):(I.seen.push(g),i=G?function(I,g,C,A,i){for(var c=[],G=0,l=g.length;G<l;++G)Object.prototype.hasOwnProperty.call(g,String(G))?c.push(RI(I,g,C,A,String(G),!0)):c.push("");return i.forEach((function(i){i.match(/^\d+$/)||c.push(RI(I,g,C,A,i,!0))})),c}(I,g,C,c,i):i.map((function(A){return RI(I,g,C,c,A,G)})),I.seen.pop(),function(I,g,C){return 60<I.reduce((function(I,g){return g.indexOf("\n"),I+g.replace(/\u001b\[\d\d?m/g,"").length+1}),0)?C[0]+(""===g?"":g+"\n ")+" "+I.join(",\n  ")+" "+C[1]:C[0]+g+" "+I.join(", ")+" "+C[1]}(i,A,l)):l[0]+A+l[1]}function KI(I){return"["+Error.prototype.toString.call(I)+"]"}function RI(I,g,C,A,i,c){var G,l;if((g=Object.getOwnPropertyDescriptor(g,i)||{value:g[i]}).get?l=g.set?I.stylize("[Getter/Setter]","special"):I.stylize("[Getter]","special"):g.set&&(l=I.stylize("[Setter]","special")),Object.prototype.hasOwnProperty.call(A,i)||(G="["+i+"]"),l||(0>I.seen.indexOf(g.value)?-1<(l=pI(I,g.value,null===C?null:C-1)).indexOf("\n")&&(l=c?l.split("\n").map((function(I){return"  "+I})).join("\n").substr(2):"\n"+l.split("\n").map((function(I){return"   "+I})).join("\n")):l=I.stylize("[Circular]","special")),fI(G)){if(c&&i.match(/^\d+$/))return l;(G=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(G=G.substr(1,G.length-2),G=I.stylize(G,"name")):(G=G.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),G=I.stylize(G,"string"))}return G+": "+l}function HI(I){return Array.isArray(I)}function JI(I){return"boolean"===typeof I}function FI(I){return"number"===typeof I}function wI(I){return"string"===typeof I}function fI(I){return void 0===I}function vI(I){return xI(I)&&"[object RegExp]"===Object.prototype.toString.call(I)}function xI(I){return"object"===typeof I&&null!==I}function NI(I){return xI(I)&&"[object Date]"===Object.prototype.toString.call(I)}function LI(I){return xI(I)&&("[object Error]"===Object.prototype.toString.call(I)||I instanceof Error)}function kI(I){return"function"===typeof I}function TI(I){return null===I||"boolean"===typeof I||"number"===typeof I||"string"===typeof I||"symbol"===typeof I||"undefined"===typeof I}function UI(I){return 10>I?"0"+I.toString(10):I.toString(10)}YI.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},YI.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};var zI="Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" ");function EI(){var I=new Date,g=[UI(I.getHours()),UI(I.getMinutes()),UI(I.getSeconds())].join(":");return[I.getDate(),zI[I.getMonth()],g].join(" ")}function MI(I,g){if(!g||!xI(g))return I;for(var C=Object.keys(g),A=C.length;A--;)I[C[A]]=g[C[A]];return I}var DI={inherits:XI,_extend:MI,log:function(){console.log("%s - %s",EI(),VI.apply(null,arguments))},isBuffer:function(I){return j(I)},isPrimitive:TI,isFunction:kI,isError:LI,isDate:NI,isObject:xI,isRegExp:vI,isUndefined:fI,isSymbol:function(I){return"symbol"===typeof I},isString:wI,isNumber:FI,isNullOrUndefined:function(I){return null==I},isNull:function(I){return null===I},isBoolean:JI,isArray:HI,inspect:YI,deprecate:hI,format:VI,debuglog:rI};function OI(I,g){if(I===g)return 0;for(var C=I.length,A=g.length,i=0,c=Math.min(C,A);i<c;++i)if(I[i]!==g[i]){C=I[i],A=g[i];break}return C<A?-1:A<C?1:0}var PI,qI=Object.prototype.hasOwnProperty,jI=Object.keys||function(I){var g,C=[];for(g in I)qI.call(I,g)&&C.push(g);return C},QI=Array.prototype.slice;function _I(){return"undefined"!==typeof PI?PI:PI="foo"===function(){}.name}function $I(I){return!j(I)&&"function"===typeof n.ArrayBuffer&&("function"===typeof ArrayBuffer.isView?ArrayBuffer.isView(I):!!I&&!!(I instanceof DataView||I.buffer&&I.buffer instanceof ArrayBuffer))}function Ig(I,g){I||Gg(I,!0,g,"==",lg)}var gg=/\s*function\s+([^\(\s]*)\s*/;function Cg(I){if(kI(I))return _I()?I.name:(I=I.toString().match(gg))&&I[1]}function Ag(I){this.name="AssertionError",this.actual=I.actual,this.expected=I.expected,this.operator=I.operator,I.message?(this.message=I.message,this.generatedMessage=!1):(this.message=ig(cg(this.actual),128)+" "+this.operator+" "+ig(cg(this.expected),128),this.generatedMessage=!0);var g=I.stackStartFunction||Gg;Error.captureStackTrace?Error.captureStackTrace(this,g):(I=Error()).stack&&(I=I.stack,g=Cg(g),0<=(g=I.indexOf("\n"+g))&&(g=I.indexOf("\n",g+1),I=I.substring(g+1)),this.stack=I)}function ig(I,g){return"string"===typeof I?I.length<g?I:I.slice(0,g):I}function cg(I){return _I()||!kI(I)?YI(I):"[Function"+((I=Cg(I))?": "+I:"")+"]"}function Gg(I,g,C,A,i){throw new Ag({message:C,actual:I,expected:g,operator:A,stackStartFunction:i})}function lg(I,g){I||Gg(I,!0,g,"==",lg)}function bg(I,g,C,A){if(I===g)return!0;if(j(I)&&j(g))return 0===OI(I,g);if(NI(I)&&NI(g))return I.getTime()===g.getTime();if(vI(I)&&vI(g))return I.source===g.source&&I.global===g.global&&I.multiline===g.multiline&&I.lastIndex===g.lastIndex&&I.ignoreCase===g.ignoreCase;if(null!==I&&"object"===typeof I||null!==g&&"object"===typeof g){if(!$I(I)||!$I(g)||Object.prototype.toString.call(I)!==Object.prototype.toString.call(g)||I instanceof Float32Array||I instanceof Float64Array){if(j(I)!==j(g))return!1;var i=(A=A||{actual:[],expected:[]}).actual.indexOf(I);return-1!==i&&i===A.expected.indexOf(g)||(A.actual.push(I),A.expected.push(g),function(I,g,C,A){if(null===I||void 0===I||null===g||void 0===g)return!1;if(TI(I)||TI(g))return I===g;if(C&&Object.getPrototypeOf(I)!==Object.getPrototypeOf(g))return!1;var i=Zg(I),c=Zg(g);if(i&&!c||!i&&c)return!1;if(i)return I=QI.call(I),g=QI.call(g),bg(I,g,C);i=jI(I);var G=jI(g);if(i.length!==G.length)return!1;for(i.sort(),G.sort(),c=i.length-1;0<=c;c--)if(i[c]!==G[c])return!1;for(c=i.length-1;0<=c;c--)if(G=i[c],!bg(I[G],g[G],C,A))return!1;return!0}(I,g,C,A))}return 0===OI(new Uint8Array(I.buffer),new Uint8Array(g.buffer))}return C?I===g:I==g}function Zg(I){return"[object Arguments]"==Object.prototype.toString.call(I)}function tg(I,g){if(!I||!g)return!1;if("[object RegExp]"==Object.prototype.toString.call(g))return g.test(I);try{if(I instanceof g)return!0}catch(C){}return!Error.isPrototypeOf(g)&&!0===g.call({},I)}function og(I,g,C,A){if("function"!==typeof g)throw new TypeError('"block" argument must be a function');"string"===typeof C&&(A=C,C=null);try{g()}catch(G){var i=G}g=i,A=(C&&C.name?" ("+C.name+").":".")+(A?" "+A:"."),I&&!g&&Gg(g,C,"Missing expected exception"+A),i="string"===typeof A;var c=!I&&g&&!C;if((!I&&LI(g)&&i&&tg(g,C)||c)&&Gg(g,C,"Got unwanted exception"+A),I&&g&&C&&!tg(g,C)||!I&&g)throw g}Ig.AssertionError=Ag,XI(Ag,Error),Ig.fail=Gg,Ig.ok=lg,Ig.equal=function I(g,C,A){g!=C&&Gg(g,C,A,"==",I)},Ig.notEqual=function I(g,C,A){g==C&&Gg(g,C,A,"!=",I)},Ig.deepEqual=function I(g,C,A){bg(g,C,!1)||Gg(g,C,A,"deepEqual",I)},Ig.deepStrictEqual=function I(g,C,A){bg(g,C,!0)||Gg(g,C,A,"deepStrictEqual",I)},Ig.notDeepEqual=function I(g,C,A){bg(g,C,!1)&&Gg(g,C,A,"notDeepEqual",I)},Ig.notDeepStrictEqual=function I(g,C,A){bg(g,C,!0)&&Gg(g,C,A,"notDeepStrictEqual",I)},Ig.strictEqual=function I(g,C,A){g!==C&&Gg(g,C,A,"===",I)},Ig.notStrictEqual=function I(g,C,A){g===C&&Gg(g,C,A,"!==",I)},Ig.throws=function(I,g,C){og(!0,I,g,C)},Ig.doesNotThrow=function(I,g,C){og(!1,I,g,C)},Ig.ifError=function(I){if(I)throw I};var ng=b((function(I,g){function C(I){return function(I){function g(g){for(var C=[],i=1;i<arguments.length;i++)C[i-1]=arguments[i];return(C=I.call(this,A(g,C))||this).code=g,C[b]=g,C.name=I.prototype.name+" ["+C[b]+"]",C}return l(g,I),g}(I)}function A(I,g){Ig.strictEqual(typeof I,"string");var C=Z[I];if(Ig(C,"An invalid error message key was used: "+I+"."),"function"===typeof C)I=C;else{if(I=DI.format,void 0===g||0===g.length)return C;g.unshift(C)}return String(I.apply(null,g))}function i(I,g){Z[I]="function"===typeof g?g:String(g)}function c(I,g){if(Ig(I,"expected is required"),Ig("string"===typeof g,"thing is required"),Array.isArray(I)){var C=I.length;return Ig(0<C,"At least one expected value needs to be specified"),I=I.map((function(I){return String(I)})),2<C?"one of "+g+" "+I.slice(0,C-1).join(", ")+", or "+I[C-1]:2===C?"one of "+g+" "+I[0]+" or "+I[1]:"of "+g+" "+I[0]}return"of "+g+" "+String(I)}var l=G&&G.__extends||function(){function I(g,C){return I=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(I,g){I.__proto__=g}||function(I,g){for(var C in g)g.hasOwnProperty(C)&&(I[C]=g[C])},I(g,C)}return function(g,C){function A(){this.constructor=g}I(g,C),g.prototype=null===C?Object.create(C):(A.prototype=C.prototype,new A)}}();Object.defineProperty(g,"__esModule",{value:!0});var b="undefined"===typeof Symbol?"_kCode":Symbol("code"),Z={};I=function(I){function C(C){if("object"!==typeof C||null===C)throw new g.TypeError("ERR_INVALID_ARG_TYPE","options","object");var A=C.message?I.call(this,C.message)||this:I.call(this,DI.inspect(C.actual).slice(0,128)+" "+C.operator+" "+DI.inspect(C.expected).slice(0,128))||this;return A.generatedMessage=!C.message,A.name="AssertionError [ERR_ASSERTION]",A.code="ERR_ASSERTION",A.actual=C.actual,A.expected=C.expected,A.operator=C.operator,g.Error.captureStackTrace(A,C.stackStartFunction),A}return l(C,I),C}(G.Error),g.AssertionError=I,g.message=A,g.E=i,g.Error=C(G.Error),g.TypeError=C(G.TypeError),g.RangeError=C(G.RangeError),i("ERR_ARG_NOT_ITERABLE","%s must be iterable"),i("ERR_ASSERTION","%s"),i("ERR_BUFFER_OUT_OF_BOUNDS",(function(I,g){return g?"Attempt to write outside buffer bounds":'"'+I+'" is outside of buffer bounds'})),i("ERR_CHILD_CLOSED_BEFORE_REPLY","Child closed before reply received"),i("ERR_CONSOLE_WRITABLE_STREAM","Console expects a writable stream instance for %s"),i("ERR_CPU_USAGE","Unable to obtain cpu usage %s"),i("ERR_DNS_SET_SERVERS_FAILED",(function(I,g){return'c-ares failed to set servers: "'+I+'" ['+g+"]"})),i("ERR_FALSY_VALUE_REJECTION","Promise was rejected with falsy value"),i("ERR_ENCODING_NOT_SUPPORTED",(function(I){return'The "'+I+'" encoding is not supported'})),i("ERR_ENCODING_INVALID_ENCODED_DATA",(function(I){return"The encoded data was not valid for encoding "+I})),i("ERR_HTTP_HEADERS_SENT","Cannot render headers after they are sent to the client"),i("ERR_HTTP_INVALID_STATUS_CODE","Invalid status code: %s"),i("ERR_HTTP_TRAILER_INVALID","Trailers are invalid with this transfer encoding"),i("ERR_INDEX_OUT_OF_RANGE","Index out of range"),i("ERR_INVALID_ARG_TYPE",(function(I,g,C){if(Ig(I,"name is required"),g.includes("not ")){var A="must not be";g=g.split("not ")[1]}else A="must be";if(Array.isArray(I))A="The "+I.map((function(I){return'"'+I+'"'})).join(", ")+" arguments "+A+" "+c(g,"type");else if(I.includes(" argument"))A="The "+I+" "+A+" "+c(g,"type");else{var i=I.includes(".")?"property":"argument";A='The "'+I+'" '+i+" "+A+" "+c(g,"type")}return 3<=arguments.length&&(A+=". Received type "+(null!==C?typeof C:"null")),A})),i("ERR_INVALID_ARRAY_LENGTH",(function(I,g,C){return Ig.strictEqual(typeof C,"number"),'The array "'+I+'" (length '+C+") must be of length "+g+"."})),i("ERR_INVALID_BUFFER_SIZE","Buffer size must be a multiple of %s"),i("ERR_INVALID_CALLBACK","Callback must be a function"),i("ERR_INVALID_CHAR","Invalid character in %s"),i("ERR_INVALID_CURSOR_POS","Cannot set cursor row without setting its column"),i("ERR_INVALID_FD",'"fd" must be a positive integer: %s'),i("ERR_INVALID_FILE_URL_HOST",'File URL host must be "localhost" or empty on %s'),i("ERR_INVALID_FILE_URL_PATH","File URL path %s"),i("ERR_INVALID_HANDLE_TYPE","This handle type cannot be sent"),i("ERR_INVALID_IP_ADDRESS","Invalid IP address: %s"),i("ERR_INVALID_OPT_VALUE",(function(I,g){return'The value "'+String(g)+'" is invalid for option "'+I+'"'})),i("ERR_INVALID_OPT_VALUE_ENCODING",(function(I){return'The value "'+String(I)+'" is invalid for option "encoding"'})),i("ERR_INVALID_REPL_EVAL_CONFIG",'Cannot specify both "breakEvalOnSigint" and "eval" for REPL'),i("ERR_INVALID_SYNC_FORK_INPUT","Asynchronous forks do not support Buffer, Uint8Array or string input: %s"),i("ERR_INVALID_THIS",'Value of "this" must be of type %s'),i("ERR_INVALID_TUPLE","%s must be an iterable %s tuple"),i("ERR_INVALID_URL","Invalid URL: %s"),i("ERR_INVALID_URL_SCHEME",(function(I){return"The URL must be "+c(I,"scheme")})),i("ERR_IPC_CHANNEL_CLOSED","Channel closed"),i("ERR_IPC_DISCONNECTED","IPC channel is already disconnected"),i("ERR_IPC_ONE_PIPE","Child process can have only one IPC pipe"),i("ERR_IPC_SYNC_FORK","IPC cannot be used with synchronous forks"),i("ERR_MISSING_ARGS",(function(){for(var I=[],g=0;g<arguments.length;g++)I[g]=arguments[g];Ig(0<I.length,"At least one arg needs to be specified"),g="The ";var C=I.length;switch(I=I.map((function(I){return'"'+I+'"'})),C){case 1:g+=I[0]+" argument";break;case 2:g+=I[0]+" and "+I[1]+" arguments";break;default:g+=I.slice(0,C-1).join(", "),g+=", and "+I[C-1]+" arguments"}return g+" must be specified"})),i("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),i("ERR_NAPI_CONS_FUNCTION","Constructor must be a function"),i("ERR_NAPI_CONS_PROTOTYPE_OBJECT","Constructor.prototype must be an object"),i("ERR_NO_CRYPTO","Node.js is not compiled with OpenSSL crypto support"),i("ERR_NO_LONGER_SUPPORTED","%s is no longer supported"),i("ERR_PARSE_HISTORY_DATA","Could not parse history data in %s"),i("ERR_SOCKET_ALREADY_BOUND","Socket is already bound"),i("ERR_SOCKET_BAD_PORT","Port should be > 0 and < 65536"),i("ERR_SOCKET_BAD_TYPE","Bad socket type specified. Valid types are: udp4, udp6"),i("ERR_SOCKET_CANNOT_SEND","Unable to send data"),i("ERR_SOCKET_CLOSED","Socket is closed"),i("ERR_SOCKET_DGRAM_NOT_RUNNING","Not running"),i("ERR_STDERR_CLOSE","process.stderr cannot be closed"),i("ERR_STDOUT_CLOSE","process.stdout cannot be closed"),i("ERR_STREAM_WRAP","Stream has StringDecoder set or is in objectMode"),i("ERR_TLS_CERT_ALTNAME_INVALID","Hostname/IP does not match certificate's altnames: %s"),i("ERR_TLS_DH_PARAM_SIZE",(function(I){return"DH parameter size "+I+" is less than 2048"})),i("ERR_TLS_HANDSHAKE_TIMEOUT","TLS handshake timeout"),i("ERR_TLS_RENEGOTIATION_FAILED","Failed to renegotiate"),i("ERR_TLS_REQUIRED_SERVER_NAME",'"servername" is required parameter for Server.addContext'),i("ERR_TLS_SESSION_ATTACK","TSL session renegotiation attack detected"),i("ERR_TRANSFORM_ALREADY_TRANSFORMING","Calling transform done when still transforming"),i("ERR_TRANSFORM_WITH_LENGTH_0","Calling transform done when writableState.length != 0"),i("ERR_UNKNOWN_ENCODING","Unknown encoding: %s"),i("ERR_UNKNOWN_SIGNAL","Unknown signal: %s"),i("ERR_UNKNOWN_STDIN_TYPE","Unknown stdin file type"),i("ERR_UNKNOWN_STREAM_TYPE","Unknown stream file type"),i("ERR_V8BREAKITERATOR","Full ICU data not installed. See https://github.com/nodejs/node/wiki/Intl")}));l(ng);var ug=b((function(I,g){Object.defineProperty(g,"__esModule",{value:!0}),g.ENCODING_UTF8="utf8",g.assertEncoding=function(I){if(I&&!$.Buffer.isEncoding(I))throw new ng.TypeError("ERR_INVALID_OPT_VALUE_ENCODING",I)},g.strToEncoding=function(I,C){return C&&C!==g.ENCODING_UTF8?"buffer"===C?new $.Buffer(I):new $.Buffer(I).toString(C):I}}));l(ug);var dg=b((function(I,g){Object.defineProperty(g,"__esModule",{value:!0});var C=Z.constants.S_IFMT,A=Z.constants.S_IFDIR,i=Z.constants.S_IFREG,c=Z.constants.S_IFBLK,G=Z.constants.S_IFCHR,l=Z.constants.S_IFLNK,b=Z.constants.S_IFIFO,t=Z.constants.S_IFSOCK;I=function(){function I(){this.name="",this.mode=0}return I.build=function(g,C){var A=new I,i=g.getNode().mode;return A.name=ug.strToEncoding(g.getName(),C),A.mode=i,A},I.prototype._checkModeProperty=function(I){return(this.mode&C)===I},I.prototype.isDirectory=function(){return this._checkModeProperty(A)},I.prototype.isFile=function(){return this._checkModeProperty(i)},I.prototype.isBlockDevice=function(){return this._checkModeProperty(c)},I.prototype.isCharacterDevice=function(){return this._checkModeProperty(G)},I.prototype.isSymbolicLink=function(){return this._checkModeProperty(l)},I.prototype.isFIFO=function(){return this._checkModeProperty(b)},I.prototype.isSocket=function(){return this._checkModeProperty(t)},I}(),g.Dirent=I,g.default=I}));function mg(I,g){for(var C=0,A=I.length-1;0<=A;A--){var i=I[A];"."===i?I.splice(A,1):".."===i?(I.splice(A,1),C++):C&&(I.splice(A,1),C--)}if(g)for(;C--;C)I.unshift("..");return I}l(dg);function eg(){for(var I="",g=!1,C=arguments.length-1;-1<=C&&!g;C--){var A=0<=C?arguments[C]:"/";if("string"!==typeof A)throw new TypeError("Arguments to path.resolve must be strings");A&&(I=A+"/"+I,g="/"===A.charAt(0))}return(g?"/":"")+(I=mg(hg(I.split("/"),(function(I){return!!I})),!g).join("/"))||"."}function Bg(I,g){function C(I){for(var g=0;g<I.length&&""===I[g];g++);for(var C=I.length-1;0<=C&&""===I[C];C--);return g>C?[]:I.slice(g,C-g+1)}I=eg(I).substr(1),g=eg(g).substr(1),I=C(I.split("/")),g=C(g.split("/"));for(var A=Math.min(I.length,g.length),i=A,c=0;c<A;c++)if(I[c]!==g[c]){i=c;break}for(A=[],c=i;c<I.length;c++)A.push("..");return(A=A.concat(g.slice(i))).join("/")}var Xg="/",yg=Bg,Vg=eg;function hg(I,g){if(I.filter)return I.filter(g);for(var C=[],A=0;A<I.length;A++)g(I[A],A,I)&&C.push(I[A]);return C}var ag=b((function(I,g){Object.defineProperty(g,"__esModule",{value:!0}),I="function"===typeof setImmediate?setImmediate.bind(G):setTimeout.bind(G),g.default=I}));l(ag);var sg=b((function(I,g){function C(){var I=BI||{};return I.getuid||(I.getuid=function(){return 0}),I.getgid||(I.getgid=function(){return 0}),I.cwd||(I.cwd=function(){return"/"}),I.nextTick||(I.nextTick=ag.default),I.emitWarning||(I.emitWarning=function(I,g){console.warn(g+(g?": ":"")+I)}),I.env||(I.env={}),I}Object.defineProperty(g,"__esModule",{value:!0}),g.createProcess=C,g.default=C()}));function rg(){}function Yg(){Yg.init.call(this)}function Wg(I,g,C,A){var i;if("function"!==typeof C)throw new TypeError('"listener" argument must be a function');if(i=I._events){i.newListener&&(I.emit("newListener",g,C.listener?C.listener:C),i=I._events);var c=i[g]}else i=I._events=new rg,I._eventsCount=0;return c?("function"===typeof c?c=i[g]=A?[C,c]:[c,C]:A?c.unshift(C):c.push(C),c.warned||(C=void 0===I._maxListeners?Yg.defaultMaxListeners:I._maxListeners)&&0<C&&c.length>C&&(c.warned=!0,(C=Error("Possible EventEmitter memory leak detected. "+c.length+" "+g+" listeners added. Use emitter.setMaxListeners() to increase limit")).name="MaxListenersExceededWarning",C.emitter=I,C.type=g,C.count=c.length,"function"===typeof console.warn?console.warn(C):console.log(C))):(i[g]=C,++I._eventsCount),I}function Sg(I,g,C){function A(){I.removeListener(g,A),i||(i=!0,C.apply(I,arguments))}var i=!1;return A.listener=C,A}function pg(I){var g=this._events;if(g){if("function"===typeof(I=g[I]))return 1;if(I)return I.length}return 0}function Kg(I,g){for(var C=Array(g);g--;)C[g]=I[g];return C}l(sg),rg.prototype=Object.create(null),Yg.EventEmitter=Yg,Yg.usingDomains=!1,Yg.prototype.domain=void 0,Yg.prototype._events=void 0,Yg.prototype._maxListeners=void 0,Yg.defaultMaxListeners=10,Yg.init=function(){this.domain=null,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new rg,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},Yg.prototype.setMaxListeners=function(I){if("number"!==typeof I||0>I||isNaN(I))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=I,this},Yg.prototype.getMaxListeners=function(){return void 0===this._maxListeners?Yg.defaultMaxListeners:this._maxListeners},Yg.prototype.emit=function(I){var g,C,A="error"===I;if(g=this._events)A=A&&null==g.error;else if(!A)return!1;var i=this.domain;if(A){if(g=arguments[1],!i){if(g instanceof Error)throw g;throw(i=Error('Uncaught, unspecified "error" event. ('+g+")")).context=g,i}return g||(g=Error('Uncaught, unspecified "error" event')),g.domainEmitter=this,g.domain=i,g.domainThrown=!1,i.emit("error",g),!1}if(!(i=g[I]))return!1;g="function"===typeof i;var c=arguments.length;switch(c){case 1:if(g)i.call(this);else for(i=Kg(i,g=i.length),A=0;A<g;++A)i[A].call(this);break;case 2:if(A=arguments[1],g)i.call(this,A);else for(i=Kg(i,g=i.length),c=0;c<g;++c)i[c].call(this,A);break;case 3:if(A=arguments[1],c=arguments[2],g)i.call(this,A,c);else for(i=Kg(i,g=i.length),C=0;C<g;++C)i[C].call(this,A,c);break;case 4:if(A=arguments[1],c=arguments[2],C=arguments[3],g)i.call(this,A,c,C);else{i=Kg(i,g=i.length);for(var G=0;G<g;++G)i[G].call(this,A,c,C)}break;default:for(A=Array(c-1),C=1;C<c;C++)A[C-1]=arguments[C];if(g)i.apply(this,A);else for(i=Kg(i,g=i.length),c=0;c<g;++c)i[c].apply(this,A)}return!0},Yg.prototype.addListener=function(I,g){return Wg(this,I,g,!1)},Yg.prototype.on=Yg.prototype.addListener,Yg.prototype.prependListener=function(I,g){return Wg(this,I,g,!0)},Yg.prototype.once=function(I,g){if("function"!==typeof g)throw new TypeError('"listener" argument must be a function');return this.on(I,Sg(this,I,g)),this},Yg.prototype.prependOnceListener=function(I,g){if("function"!==typeof g)throw new TypeError('"listener" argument must be a function');return this.prependListener(I,Sg(this,I,g)),this},Yg.prototype.removeListener=function(I,g){var C;if("function"!==typeof g)throw new TypeError('"listener" argument must be a function');var A=this._events;if(!A)return this;var i=A[I];if(!i)return this;if(i===g||i.listener&&i.listener===g)0===--this._eventsCount?this._events=new rg:(delete A[I],A.removeListener&&this.emit("removeListener",I,i.listener||g));else if("function"!==typeof i){var c=-1;for(C=i.length;0<C--;)if(i[C]===g||i[C].listener&&i[C].listener===g){var G=i[C].listener;c=C;break}if(0>c)return this;if(1===i.length){if(i[0]=void 0,0===--this._eventsCount)return this._events=new rg,this;delete A[I]}else{C=c+1;for(var l=i.length;C<l;c+=1,C+=1)i[c]=i[C];i.pop()}A.removeListener&&this.emit("removeListener",I,G||g)}return this},Yg.prototype.removeAllListeners=function(I){var g=this._events;if(!g)return this;if(!g.removeListener)return 0===arguments.length?(this._events=new rg,this._eventsCount=0):g[I]&&(0===--this._eventsCount?this._events=new rg:delete g[I]),this;if(0===arguments.length){g=Object.keys(g);for(var C,A=0;A<g.length;++A)"removeListener"!==(C=g[A])&&this.removeAllListeners(C);return this.removeAllListeners("removeListener"),this._events=new rg,this._eventsCount=0,this}if("function"===typeof(g=g[I]))this.removeListener(I,g);else if(g)do{this.removeListener(I,g[g.length-1])}while(g[0]);return this},Yg.prototype.listeners=function(I){var g=this._events;if(g)if(I=g[I])if("function"===typeof I)I=[I.listener||I];else{g=Array(I.length);for(var C=0;C<g.length;++C)g[C]=I[C].listener||I[C];I=g}else I=[];else I=[];return I},Yg.listenerCount=function(I,g){return"function"===typeof I.listenerCount?I.listenerCount(g):pg.call(I,g)},Yg.prototype.listenerCount=pg,Yg.prototype.eventNames=function(){return 0<this._eventsCount?Reflect.ownKeys(this._events):[]};var Rg=b((function(I,g){var C=G&&G.__extends||function(){function I(g,C){return I=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(I,g){I.__proto__=g}||function(I,g){for(var C in g)g.hasOwnProperty(C)&&(I[C]=g[C])},I(g,C)}return function(g,C){function A(){this.constructor=g}I(g,C),g.prototype=null===C?Object.create(C):(A.prototype=C.prototype,new A)}}();Object.defineProperty(g,"__esModule",{value:!0});var A=Z.constants.S_IFMT,i=Z.constants.S_IFDIR,c=Z.constants.S_IFREG,l=Z.constants.S_IFLNK,b=Z.constants.O_APPEND;g.SEP="/",I=function(I){function g(g,C){void 0===C&&(C=438);var A=I.call(this)||this;return A.uid=sg.default.getuid(),A.gid=sg.default.getgid(),A.atime=new Date,A.mtime=new Date,A.ctime=new Date,A.perm=438,A.mode=c,A.nlink=1,A.perm=C,A.mode|=C,A.ino=g,A}return C(g,I),g.prototype.getString=function(I){return void 0===I&&(I="utf8"),this.getBuffer().toString(I)},g.prototype.setString=function(I){this.buf=$.bufferFrom(I,"utf8"),this.touch()},g.prototype.getBuffer=function(){return this.buf||this.setBuffer($.bufferAllocUnsafe(0)),$.bufferFrom(this.buf)},g.prototype.setBuffer=function(I){this.buf=$.bufferFrom(I),this.touch()},g.prototype.getSize=function(){return this.buf?this.buf.length:0},g.prototype.setModeProperty=function(I){this.mode=this.mode&~A|I},g.prototype.setIsFile=function(){this.setModeProperty(c)},g.prototype.setIsDirectory=function(){this.setModeProperty(i)},g.prototype.setIsSymlink=function(){this.setModeProperty(l)},g.prototype.isFile=function(){return(this.mode&A)===c},g.prototype.isDirectory=function(){return(this.mode&A)===i},g.prototype.isSymlink=function(){return(this.mode&A)===l},g.prototype.makeSymlink=function(I){this.symlink=I,this.setIsSymlink()},g.prototype.write=function(I,g,C,A){if(void 0===g&&(g=0),void 0===C&&(C=I.length),void 0===A&&(A=0),this.buf||(this.buf=$.bufferAllocUnsafe(0)),A+C>this.buf.length){var i=$.bufferAllocUnsafe(A+C);this.buf.copy(i,0,0,this.buf.length),this.buf=i}return I.copy(this.buf,A,g,g+C),this.touch(),C},g.prototype.read=function(I,g,C,A){return void 0===g&&(g=0),void 0===C&&(C=I.byteLength),void 0===A&&(A=0),this.buf||(this.buf=$.bufferAllocUnsafe(0)),C>I.byteLength&&(C=I.byteLength),C+A>this.buf.length&&(C=this.buf.length-A),this.buf.copy(I,g,A,A+C),C},g.prototype.truncate=function(I){if(void 0===I&&(I=0),I)if(this.buf||(this.buf=$.bufferAllocUnsafe(0)),I<=this.buf.length)this.buf=this.buf.slice(0,I);else{var g=$.bufferAllocUnsafe(0);this.buf.copy(g),g.fill(0,I)}else this.buf=$.bufferAllocUnsafe(0);this.touch()},g.prototype.chmod=function(I){this.perm=I,this.mode=-512&this.mode|I,this.touch()},g.prototype.chown=function(I,g){this.uid=I,this.gid=g,this.touch()},g.prototype.touch=function(){this.mtime=new Date,this.emit("change",this)},g.prototype.canRead=function(I,g){return void 0===I&&(I=sg.default.getuid()),void 0===g&&(g=sg.default.getgid()),!!(4&this.perm||g===this.gid&&32&this.perm||I===this.uid&&256&this.perm)},g.prototype.canWrite=function(I,g){return void 0===I&&(I=sg.default.getuid()),void 0===g&&(g=sg.default.getgid()),!!(2&this.perm||g===this.gid&&16&this.perm||I===this.uid&&128&this.perm)},g.prototype.del=function(){this.emit("delete",this)},g.prototype.toJSON=function(){return{ino:this.ino,uid:this.uid,gid:this.gid,atime:this.atime.getTime(),mtime:this.mtime.getTime(),ctime:this.ctime.getTime(),perm:this.perm,mode:this.mode,nlink:this.nlink,symlink:this.symlink,data:this.getString()}},g}(Yg.EventEmitter),g.Node=I,I=function(I){function A(g,C,A){var i=I.call(this)||this;return i.children={},i.steps=[],i.ino=0,i.length=0,i.vol=g,i.parent=C,i.steps=C?C.steps.concat([A]):[A],i}return C(A,I),A.prototype.setNode=function(I){this.node=I,this.ino=I.ino},A.prototype.getNode=function(){return this.node},A.prototype.createChild=function(I,g){void 0===g&&(g=this.vol.createNode());var C=new A(this.vol,this,I);return C.setNode(g),g.isDirectory(),this.setChild(I,C),C},A.prototype.setChild=function(I,g){return void 0===g&&(g=new A(this.vol,this,I)),this.children[I]=g,g.parent=this,this.length++,this.emit("child:add",g,this),g},A.prototype.deleteChild=function(I){delete this.children[I.getName()],this.length--,this.emit("child:delete",I,this)},A.prototype.getChild=function(I){if(Object.hasOwnProperty.call(this.children,I))return this.children[I]},A.prototype.getPath=function(){return this.steps.join(g.SEP)},A.prototype.getName=function(){return this.steps[this.steps.length-1]},A.prototype.walk=function(I,g,C){if(void 0===g&&(g=I.length),void 0===C&&(C=0),C>=I.length||C>=g)return this;var A=this.getChild(I[C]);return A?A.walk(I,g,C+1):null},A.prototype.toJSON=function(){return{steps:this.steps,ino:this.ino,children:Object.keys(this.children)}},A}(Yg.EventEmitter),g.Link=I,I=function(){function I(I,g,C,A){this.position=0,this.link=I,this.node=g,this.flags=C,this.fd=A}return I.prototype.getString=function(){return this.node.getString()},I.prototype.setString=function(I){this.node.setString(I)},I.prototype.getBuffer=function(){return this.node.getBuffer()},I.prototype.setBuffer=function(I){this.node.setBuffer(I)},I.prototype.getSize=function(){return this.node.getSize()},I.prototype.truncate=function(I){this.node.truncate(I)},I.prototype.seekTo=function(I){this.position=I},I.prototype.stats=function(){return o.default.build(this.node)},I.prototype.write=function(I,g,C,A){return void 0===g&&(g=0),void 0===C&&(C=I.length),"number"!==typeof A&&(A=this.position),this.flags&b&&(A=this.getSize()),I=this.node.write(I,g,C,A),this.position=A+I,I},I.prototype.read=function(I,g,C,A){return void 0===g&&(g=0),void 0===C&&(C=I.byteLength),"number"!==typeof A&&(A=this.position),I=this.node.read(I,g,C,A),this.position=A+I,I},I.prototype.chmod=function(I){this.node.chmod(I)},I.prototype.chown=function(I,g){this.node.chown(I,g)},I}(),g.File=I}));l(Rg);var Hg=Rg.Node,Jg=b((function(I,g){Object.defineProperty(g,"__esModule",{value:!0}),g.default=function(I,g,C){var A=setTimeout.apply(null,arguments);return A&&"object"===typeof A&&"function"===typeof A.unref&&A.unref(),A}}));function Fg(){this.tail=this.head=null,this.length=0}l(Jg),Fg.prototype.push=function(I){I={data:I,next:null},0<this.length?this.tail.next=I:this.head=I,this.tail=I,++this.length},Fg.prototype.unshift=function(I){I={data:I,next:this.head},0===this.length&&(this.tail=I),this.head=I,++this.length},Fg.prototype.shift=function(){if(0!==this.length){var I=this.head.data;return this.head=1===this.length?this.tail=null:this.head.next,--this.length,I}},Fg.prototype.clear=function(){this.head=this.tail=null,this.length=0},Fg.prototype.join=function(I){if(0===this.length)return"";for(var g=this.head,C=""+g.data;g=g.next;)C+=I+g.data;return C},Fg.prototype.concat=function(I){if(0===this.length)return W.alloc(0);if(1===this.length)return this.head.data;I=W.allocUnsafe(I>>>0);for(var g=this.head,C=0;g;)g.data.copy(I,C),C+=g.data.length,g=g.next;return I};var wg=W.isEncoding||function(I){switch(I&&I.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function fg(I){if(this.encoding=(I||"utf8").toLowerCase().replace(/[-_]/,""),I&&!wg(I))throw Error("Unknown encoding: "+I);switch(this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=xg;break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=Ng;break;default:return void(this.write=vg)}this.charBuffer=new W(6),this.charLength=this.charReceived=0}function vg(I){return I.toString(this.encoding)}function xg(I){this.charLength=(this.charReceived=I.length%2)?2:0}function Ng(I){this.charLength=(this.charReceived=I.length%3)?3:0}fg.prototype.write=function(I){for(var g="";this.charLength;){if(g=I.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:I.length,I.copy(this.charBuffer,this.charReceived,0,g),this.charReceived+=g,this.charReceived<this.charLength)return"";I=I.slice(g,I.length);var C=(g=this.charBuffer.slice(0,this.charLength).toString(this.encoding)).charCodeAt(g.length-1);if(!(55296<=C&&56319>=C)){if(this.charReceived=this.charLength=0,0===I.length)return g;break}this.charLength+=this.surrogateSize,g=""}this.detectIncompleteChar(I);var A=I.length;return this.charLength&&(I.copy(this.charBuffer,0,I.length-this.charReceived,A),A-=this.charReceived),A=(g+=I.toString(this.encoding,0,A)).length-1,55296<=(C=g.charCodeAt(A))&&56319>=C?(C=this.surrogateSize,this.charLength+=C,this.charReceived+=C,this.charBuffer.copy(this.charBuffer,C,0,C),I.copy(this.charBuffer,0,0,C),g.substring(0,A)):g},fg.prototype.detectIncompleteChar=function(I){for(var g=3<=I.length?3:I.length;0<g;g--){var C=I[I.length-g];if(1==g&&6==C>>5){this.charLength=2;break}if(2>=g&&14==C>>4){this.charLength=3;break}if(3>=g&&30==C>>3){this.charLength=4;break}}this.charReceived=g},fg.prototype.end=function(I){var g="";return I&&I.length&&(g=this.write(I)),this.charReceived&&(I=this.encoding,g+=this.charBuffer.slice(0,this.charReceived).toString(I)),g},Tg.ReadableState=kg;var Lg=rI("stream");function kg(I,g){I=I||{},this.objectMode=!!I.objectMode,g instanceof uC&&(this.objectMode=this.objectMode||!!I.readableObjectMode),g=I.highWaterMark;var C=this.objectMode?16:16384;this.highWaterMark=g||0===g?g:C,this.highWaterMark=~~this.highWaterMark,this.buffer=new Fg,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.reading=this.endEmitted=this.ended=!1,this.sync=!0,this.resumeScheduled=this.readableListening=this.emittedReadable=this.needReadable=!1,this.defaultEncoding=I.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.encoding=this.decoder=null,I.encoding&&(this.decoder=new fg(I.encoding),this.encoding=I.encoding)}function Tg(I){if(!(this instanceof Tg))return new Tg(I);this._readableState=new kg(I,this),this.readable=!0,I&&"function"===typeof I.read&&(this._read=I.read),Yg.call(this)}function Ug(I,g,C,A,i){var c=C,G=null;if(j(c)||"string"===typeof c||null===c||void 0===c||g.objectMode||(G=new TypeError("Invalid non-string/buffer chunk")),c=G)I.emit("error",c);else if(null===C)g.reading=!1,g.ended||(g.decoder&&(C=g.decoder.end())&&C.length&&(g.buffer.push(C),g.length+=g.objectMode?1:C.length),g.ended=!0,Eg(I));else if(g.objectMode||C&&0<C.length)if(g.ended&&!i)I.emit("error",Error("stream.push() after EOF"));else if(g.endEmitted&&i)I.emit("error",Error("stream.unshift() after end event"));else{if(g.decoder&&!i&&!A){C=g.decoder.write(C);var l=!g.objectMode&&0===C.length}i||(g.reading=!1),l||(g.flowing&&0===g.length&&!g.sync?(I.emit("data",C),I.read(0)):(g.length+=g.objectMode?1:C.length,i?g.buffer.unshift(C):g.buffer.push(C),g.needReadable&&Eg(I))),g.readingMore||(g.readingMore=!0,oI(Dg,I,g))}else i||(g.reading=!1);return!g.ended&&(g.needReadable||g.length<g.highWaterMark||0===g.length)}function zg(I,g){if(0>=I||0===g.length&&g.ended)return 0;if(g.objectMode)return 1;if(I!==I)return g.flowing&&g.length?g.buffer.head.data.length:g.length;if(I>g.highWaterMark){var C=I;8388608<=C?C=8388608:(C--,C|=C>>>1,C|=C>>>2,C|=C>>>4,C|=C>>>8,C|=C>>>16,C++),g.highWaterMark=C}return I<=g.length?I:g.ended?g.length:(g.needReadable=!0,0)}function Eg(I){var g=I._readableState;g.needReadable=!1,g.emittedReadable||(Lg("emitReadable",g.flowing),g.emittedReadable=!0,g.sync?oI(Mg,I):Mg(I))}function Mg(I){Lg("emit readable"),I.emit("readable"),qg(I)}function Dg(I,g){for(var C=g.length;!g.reading&&!g.flowing&&!g.ended&&g.length<g.highWaterMark&&(Lg("maybeReadMore read 0"),I.read(0),C!==g.length);)C=g.length;g.readingMore=!1}function Og(I){Lg("readable nexttick read 0"),I.read(0)}function Pg(I,g){g.reading||(Lg("resume read 0"),I.read(0)),g.resumeScheduled=!1,g.awaitDrain=0,I.emit("resume"),qg(I),g.flowing&&!g.reading&&I.read(0)}function qg(I){var g=I._readableState;for(Lg("flow",g.flowing);g.flowing&&null!==I.read(););}function jg(I,g){if(0===g.length)return null;if(g.objectMode)var C=g.buffer.shift();else if(!I||I>=g.length)C=g.decoder?g.buffer.join(""):1===g.buffer.length?g.buffer.head.data:g.buffer.concat(g.length),g.buffer.clear();else{if(C=g.buffer,g=g.decoder,I<C.head.data.length)g=C.head.data.slice(0,I),C.head.data=C.head.data.slice(I);else{if(I===C.head.data.length)C=C.shift();else if(g){var A=1,i=(g=C.head).data;for(I-=i.length;g=g.next;){var c=g.data,G=I>c.length?c.length:I;if(i=G===c.length?i+c:i+c.slice(0,I),0===(I-=G)){G===c.length?(++A,C.head=g.next?g.next:C.tail=null):(C.head=g,g.data=c.slice(G));break}++A}C.length-=A,C=i}else{for(g=W.allocUnsafe(I),i=1,(A=C.head).data.copy(g),I-=A.data.length;A=A.next;){if(G=I>(c=A.data).length?c.length:I,c.copy(g,g.length-I,0,G),0===(I-=G)){G===c.length?(++i,C.head=A.next?A.next:C.tail=null):(C.head=A,A.data=c.slice(G));break}++i}C.length-=i,C=g}g=C}C=g}return C}function Qg(I){var g=I._readableState;if(0<g.length)throw Error('"endReadable()" called on non-empty stream');g.endEmitted||(g.ended=!0,oI(_g,g,I))}function _g(I,g){I.endEmitted||0!==I.length||(I.endEmitted=!0,g.readable=!1,g.emit("end"))}function $g(I,g){for(var C=0,A=I.length;C<A;C++)if(I[C]===g)return C;return-1}function IC(){}function gC(I,g,C){this.chunk=I,this.encoding=g,this.callback=C,this.next=null}function CC(I,g){Object.defineProperty(this,"buffer",{get:hI((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")}),I=I||{},this.objectMode=!!I.objectMode,g instanceof uC&&(this.objectMode=this.objectMode||!!I.writableObjectMode);var C=I.highWaterMark,A=this.objectMode?16:16384;this.highWaterMark=C||0===C?C:A,this.highWaterMark=~~this.highWaterMark,this.finished=this.ended=this.ending=this.needDrain=!1,this.decodeStrings=!1!==I.decodeStrings,this.defaultEncoding=I.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(I){var C=g._writableState,A=C.sync,i=C.writecb;C.writing=!1,C.writecb=null,C.length-=C.writelen,C.writelen=0,I?(--C.pendingcb,A?oI(i,I):i(I),g._writableState.errorEmitted=!0,g.emit("error",I)):((I=lC(C))||C.corked||C.bufferProcessing||!C.bufferedRequest||GC(g,C),A?oI(cC,g,C,I,i):cC(g,C,I,i))},this.writecb=null,this.writelen=0,this.lastBufferedRequest=this.bufferedRequest=null,this.pendingcb=0,this.errorEmitted=this.prefinished=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new ZC(this)}function AC(I){if(!(this instanceof AC||this instanceof uC))return new AC(I);this._writableState=new CC(I,this),this.writable=!0,I&&("function"===typeof I.write&&(this._write=I.write),"function"===typeof I.writev&&(this._writev=I.writev)),Yg.call(this)}function iC(I,g,C,A,i,c,G){g.writelen=A,g.writecb=G,g.writing=!0,g.sync=!0,C?I._writev(i,g.onwrite):I._write(i,c,g.onwrite),g.sync=!1}function cC(I,g,C,A){!C&&0===g.length&&g.needDrain&&(g.needDrain=!1,I.emit("drain")),g.pendingcb--,A(),bC(I,g)}function GC(I,g){g.bufferProcessing=!0;var C=g.bufferedRequest;if(I._writev&&C&&C.next){var A=Array(g.bufferedRequestCount),i=g.corkedRequestsFree;i.entry=C;for(var c=0;C;)A[c]=C,C=C.next,c+=1;iC(I,g,!0,g.length,A,"",i.finish),g.pendingcb++,g.lastBufferedRequest=null,i.next?(g.corkedRequestsFree=i.next,i.next=null):g.corkedRequestsFree=new ZC(g)}else{for(;C&&(A=C.chunk,iC(I,g,!1,g.objectMode?1:A.length,A,C.encoding,C.callback),C=C.next,!g.writing););null===C&&(g.lastBufferedRequest=null)}g.bufferedRequestCount=0,g.bufferedRequest=C,g.bufferProcessing=!1}function lC(I){return I.ending&&0===I.length&&null===I.bufferedRequest&&!I.finished&&!I.writing}function bC(I,g){var C=lC(g);return C&&(0===g.pendingcb?(g.prefinished||(g.prefinished=!0,I.emit("prefinish")),g.finished=!0,I.emit("finish")):g.prefinished||(g.prefinished=!0,I.emit("prefinish"))),C}function ZC(I){var g=this;this.entry=this.next=null,this.finish=function(C){var A=g.entry;for(g.entry=null;A;){var i=A.callback;I.pendingcb--,i(C),A=A.next}I.corkedRequestsFree?I.corkedRequestsFree.next=g:I.corkedRequestsFree=g}}XI(Tg,Yg),Tg.prototype.push=function(I,g){var C=this._readableState;return C.objectMode||"string"!==typeof I||(g=g||C.defaultEncoding)!==C.encoding&&(I=W.from(I,g),g=""),Ug(this,C,I,g,!1)},Tg.prototype.unshift=function(I){return Ug(this,this._readableState,I,"",!0)},Tg.prototype.isPaused=function(){return!1===this._readableState.flowing},Tg.prototype.setEncoding=function(I){return this._readableState.decoder=new fg(I),this._readableState.encoding=I,this},Tg.prototype.read=function(I){Lg("read",I),I=parseInt(I,10);var g=this._readableState,C=I;if(0!==I&&(g.emittedReadable=!1),0===I&&g.needReadable&&(g.length>=g.highWaterMark||g.ended))return Lg("read: emitReadable",g.length,g.ended),0===g.length&&g.ended?Qg(this):Eg(this),null;if(0===(I=zg(I,g))&&g.ended)return 0===g.length&&Qg(this),null;var A=g.needReadable;return Lg("need readable",A),(0===g.length||g.length-I<g.highWaterMark)&&Lg("length less than watermark",A=!0),g.ended||g.reading?Lg("reading or ended",!1):A&&(Lg("do read"),g.reading=!0,g.sync=!0,0===g.length&&(g.needReadable=!0),this._read(g.highWaterMark),g.sync=!1,g.reading||(I=zg(C,g))),null===(A=0<I?jg(I,g):null)?(g.needReadable=!0,I=0):g.length-=I,0===g.length&&(g.ended||(g.needReadable=!0),C!==I&&g.ended&&Qg(this)),null!==A&&this.emit("data",A),A},Tg.prototype._read=function(){this.emit("error",Error("not implemented"))},Tg.prototype.pipe=function(I,g){function C(I){Lg("onunpipe"),I===t&&i()}function A(){Lg("onend"),I.end()}function i(){Lg("cleanup"),I.removeListener("close",l),I.removeListener("finish",b),I.removeListener("drain",n),I.removeListener("error",G),I.removeListener("unpipe",C),t.removeListener("end",A),t.removeListener("end",i),t.removeListener("data",c),u=!0,!o.awaitDrain||I._writableState&&!I._writableState.needDrain||n()}function c(g){Lg("ondata"),d=!1,!1!==I.write(g)||d||((1===o.pipesCount&&o.pipes===I||1<o.pipesCount&&-1!==$g(o.pipes,I))&&!u&&(Lg("false write response, pause",t._readableState.awaitDrain),t._readableState.awaitDrain++,d=!0),t.pause())}function G(g){Lg("onerror",g),Z(),I.removeListener("error",G),0===I.listeners("error").length&&I.emit("error",g)}function l(){I.removeListener("finish",b),Z()}function b(){Lg("onfinish"),I.removeListener("close",l),Z()}function Z(){Lg("unpipe"),t.unpipe(I)}var t=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=I;break;case 1:o.pipes=[o.pipes,I];break;default:o.pipes.push(I)}o.pipesCount+=1,Lg("pipe count=%d opts=%j",o.pipesCount,g),g=g&&!1===g.end?i:A,o.endEmitted?oI(g):t.once("end",g),I.on("unpipe",C);var n=function(I){return function(){var g=I._readableState;Lg("pipeOnDrain",g.awaitDrain),g.awaitDrain&&g.awaitDrain--,0===g.awaitDrain&&I.listeners("data").length&&(g.flowing=!0,qg(I))}}(t);I.on("drain",n);var u=!1,d=!1;return t.on("data",c),function(I,g,C){if("function"===typeof I.prependListener)return I.prependListener(g,C);I._events&&I._events[g]?Array.isArray(I._events[g])?I._events[g].unshift(C):I._events[g]=[C,I._events[g]]:I.on(g,C)}(I,"error",G),I.once("close",l),I.once("finish",b),I.emit("pipe",t),o.flowing||(Lg("pipe resume"),t.resume()),I},Tg.prototype.unpipe=function(I){var g=this._readableState;if(0===g.pipesCount)return this;if(1===g.pipesCount)return I&&I!==g.pipes||(I||(I=g.pipes),g.pipes=null,g.pipesCount=0,g.flowing=!1,I&&I.emit("unpipe",this)),this;if(!I){I=g.pipes;var C=g.pipesCount;for(g.pipes=null,g.pipesCount=0,g.flowing=!1,g=0;g<C;g++)I[g].emit("unpipe",this);return this}return-1===(C=$g(g.pipes,I))||(g.pipes.splice(C,1),--g.pipesCount,1===g.pipesCount&&(g.pipes=g.pipes[0]),I.emit("unpipe",this)),this},Tg.prototype.on=function(I,g){return g=Yg.prototype.on.call(this,I,g),"data"===I?!1!==this._readableState.flowing&&this.resume():"readable"===I&&((I=this._readableState).endEmitted||I.readableListening||(I.readableListening=I.needReadable=!0,I.emittedReadable=!1,I.reading?I.length&&Eg(this):oI(Og,this))),g},Tg.prototype.addListener=Tg.prototype.on,Tg.prototype.resume=function(){var I=this._readableState;return I.flowing||(Lg("resume"),I.flowing=!0,I.resumeScheduled||(I.resumeScheduled=!0,oI(Pg,this,I))),this},Tg.prototype.pause=function(){return Lg("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(Lg("pause"),this._readableState.flowing=!1,this.emit("pause")),this},Tg.prototype.wrap=function(I){var g=this._readableState,C=!1,A=this;for(var i in I.on("end",(function(){if(Lg("wrapped end"),g.decoder&&!g.ended){var I=g.decoder.end();I&&I.length&&A.push(I)}A.push(null)})),I.on("data",(function(i){Lg("wrapped data"),g.decoder&&(i=g.decoder.write(i)),g.objectMode&&(null===i||void 0===i)||!(g.objectMode||i&&i.length)||A.push(i)||(C=!0,I.pause())})),I)void 0===this[i]&&"function"===typeof I[i]&&(this[i]=function(g){return function(){return I[g].apply(I,arguments)}}(i));return function(I,g){for(var C=0,A=I.length;C<A;C++)g(I[C],C)}(["error","close","destroy","pause","resume"],(function(g){I.on(g,A.emit.bind(A,g))})),A._read=function(g){Lg("wrapped _read",g),C&&(C=!1,I.resume())},A},Tg._fromList=jg,AC.WritableState=CC,XI(AC,Yg),CC.prototype.getBuffer=function(){for(var I=this.bufferedRequest,g=[];I;)g.push(I),I=I.next;return g},AC.prototype.pipe=function(){this.emit("error",Error("Cannot pipe, not readable"))},AC.prototype.write=function(I,g,C){var A=this._writableState,i=!1;if("function"===typeof g&&(C=g,g=null),W.isBuffer(I)?g="buffer":g||(g=A.defaultEncoding),"function"!==typeof C&&(C=IC),A.ended)A=C,I=Error("write after end"),this.emit("error",I),oI(A,I);else{var c=C,G=!0,l=!1;null===I?l=new TypeError("May not write null values to stream"):W.isBuffer(I)||"string"===typeof I||void 0===I||A.objectMode||(l=new TypeError("Invalid non-string/buffer chunk")),l&&(this.emit("error",l),oI(c,l),G=!1),G&&(A.pendingcb++,i=g,A.objectMode||!1===A.decodeStrings||"string"!==typeof I||(I=W.from(I,i)),W.isBuffer(I)&&(i="buffer"),c=A.objectMode?1:I.length,A.length+=c,(g=A.length<A.highWaterMark)||(A.needDrain=!0),A.writing||A.corked?(c=A.lastBufferedRequest,A.lastBufferedRequest=new gC(I,i,C),c?c.next=A.lastBufferedRequest:A.bufferedRequest=A.lastBufferedRequest,A.bufferedRequestCount+=1):iC(this,A,!1,c,I,i,C),i=g)}return i},AC.prototype.cork=function(){this._writableState.corked++},AC.prototype.uncork=function(){var I=this._writableState;I.corked&&(I.corked--,I.writing||I.corked||I.finished||I.bufferProcessing||!I.bufferedRequest||GC(this,I))},AC.prototype.setDefaultEncoding=function(I){if("string"===typeof I&&(I=I.toLowerCase()),!(-1<"hex utf8 utf-8 ascii binary base64 ucs2 ucs-2 utf16le utf-16le raw".split(" ").indexOf((I+"").toLowerCase())))throw new TypeError("Unknown encoding: "+I);return this._writableState.defaultEncoding=I,this},AC.prototype._write=function(I,g,C){C(Error("not implemented"))},AC.prototype._writev=null,AC.prototype.end=function(I,g,C){var A=this._writableState;"function"===typeof I?(C=I,g=I=null):"function"===typeof g&&(C=g,g=null),null!==I&&void 0!==I&&this.write(I,g),A.corked&&(A.corked=1,this.uncork()),A.ending||A.finished||(I=C,A.ending=!0,bC(this,A),I&&(A.finished?oI(I):this.once("finish",I)),A.ended=!0,this.writable=!1)},XI(uC,Tg);for(var tC=Object.keys(AC.prototype),oC=0;oC<tC.length;oC++){var nC=tC[oC];uC.prototype[nC]||(uC.prototype[nC]=AC.prototype[nC])}function uC(I){if(!(this instanceof uC))return new uC(I);Tg.call(this,I),AC.call(this,I),I&&!1===I.readable&&(this.readable=!1),I&&!1===I.writable&&(this.writable=!1),this.allowHalfOpen=!0,I&&!1===I.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",dC)}function dC(){this.allowHalfOpen||this._writableState.ended||oI(mC,this)}function mC(I){I.end()}function eC(I){this.afterTransform=function(g,C){var A=I._transformState;A.transforming=!1;var i=A.writecb;return i?(A.writechunk=null,A.writecb=null,null!==C&&void 0!==C&&I.push(C),i(g),(g=I._readableState).reading=!1,(g.needReadable||g.length<g.highWaterMark)&&I._read(g.highWaterMark),g=void 0):g=I.emit("error",Error("no writecb in Transform class")),g},this.transforming=this.needTransform=!1,this.writeencoding=this.writechunk=this.writecb=null}function BC(I){if(!(this instanceof BC))return new BC(I);uC.call(this,I),this._transformState=new eC(this);var g=this;this._readableState.needReadable=!0,this._readableState.sync=!1,I&&("function"===typeof I.transform&&(this._transform=I.transform),"function"===typeof I.flush&&(this._flush=I.flush)),this.once("prefinish",(function(){"function"===typeof this._flush?this._flush((function(I){XC(g,I)})):XC(g)}))}function XC(I,g){if(g)return I.emit("error",g);if(g=I._transformState,I._writableState.length)throw Error("Calling transform done when ws.length != 0");if(g.transforming)throw Error("Calling transform done when still transforming");return I.push(null)}function yC(I){if(!(this instanceof yC))return new yC(I);BC.call(this,I)}function VC(){Yg.call(this)}XI(BC,uC),BC.prototype.push=function(I,g){return this._transformState.needTransform=!1,uC.prototype.push.call(this,I,g)},BC.prototype._transform=function(){throw Error("Not implemented")},BC.prototype._write=function(I,g,C){var A=this._transformState;A.writecb=C,A.writechunk=I,A.writeencoding=g,A.transforming||(I=this._readableState,(A.needTransform||I.needReadable||I.length<I.highWaterMark)&&this._read(I.highWaterMark))},BC.prototype._read=function(){var I=this._transformState;null!==I.writechunk&&I.writecb&&!I.transforming?(I.transforming=!0,this._transform(I.writechunk,I.writeencoding,I.afterTransform)):I.needTransform=!0},XI(yC,BC),yC.prototype._transform=function(I,g,C){C(null,I)},XI(VC,Yg),VC.Readable=Tg,VC.Writable=AC,VC.Duplex=uC,VC.Transform=BC,VC.PassThrough=yC,VC.Stream=VC,VC.prototype.pipe=function(I,g){function C(g){I.writable&&!1===I.write(g)&&b.pause&&b.pause()}function A(){b.readable&&b.resume&&b.resume()}function i(){Z||(Z=!0,I.end())}function c(){Z||(Z=!0,"function"===typeof I.destroy&&I.destroy())}function G(I){if(l(),0===Yg.listenerCount(this,"error"))throw I}function l(){b.removeListener("data",C),I.removeListener("drain",A),b.removeListener("end",i),b.removeListener("close",c),b.removeListener("error",G),I.removeListener("error",G),b.removeListener("end",l),b.removeListener("close",l),I.removeListener("close",l)}var b=this;b.on("data",C),I.on("drain",A),I._isStdio||g&&!1===g.end||(b.on("end",i),b.on("close",c));var Z=!1;return b.on("error",G),I.on("error",G),b.on("end",l),b.on("close",l),I.on("close",l),I.emit("pipe",b),I};var hC=Array.prototype.slice,aC=function I(g,C){for(var A in C)g[A]=C[A];return 3>arguments.length?g:I.apply(null,[g].concat(hC.call(arguments,2)))},sC=b((function(I,g){function C(I,g,C){return void 0===C&&(C=function(I){return I}),function(){for(var i=[],c=0;c<arguments.length;c++)i[c]=arguments[c];return new Promise((function(c,G){I[g].bind(I).apply(void 0,A(i,[function(I,g){return I?G(I):c(C(g))}]))}))}}var A=G&&G.__spreadArrays||function(){for(var I=0,g=0,C=arguments.length;g<C;g++)I+=arguments[g].length;I=Array(I);var A=0;for(g=0;g<C;g++)for(var i=arguments[g],c=0,G=i.length;c<G;c++,A++)I[A]=i[c];return I};Object.defineProperty(g,"__esModule",{value:!0});var i=function(){function I(I,g){this.vol=I,this.fd=g}return I.prototype.appendFile=function(I,g){return C(this.vol,"appendFile")(this.fd,I,g)},I.prototype.chmod=function(I){return C(this.vol,"fchmod")(this.fd,I)},I.prototype.chown=function(I,g){return C(this.vol,"fchown")(this.fd,I,g)},I.prototype.close=function(){return C(this.vol,"close")(this.fd)},I.prototype.datasync=function(){return C(this.vol,"fdatasync")(this.fd)},I.prototype.read=function(I,g,A,i){return C(this.vol,"read",(function(g){return{bytesRead:g,buffer:I}}))(this.fd,I,g,A,i)},I.prototype.readFile=function(I){return C(this.vol,"readFile")(this.fd,I)},I.prototype.stat=function(I){return C(this.vol,"fstat")(this.fd,I)},I.prototype.sync=function(){return C(this.vol,"fsync")(this.fd)},I.prototype.truncate=function(I){return C(this.vol,"ftruncate")(this.fd,I)},I.prototype.utimes=function(I,g){return C(this.vol,"futimes")(this.fd,I,g)},I.prototype.write=function(I,g,A,i){return C(this.vol,"write",(function(g){return{bytesWritten:g,buffer:I}}))(this.fd,I,g,A,i)},I.prototype.writeFile=function(I,g){return C(this.vol,"writeFile")(this.fd,I,g)},I}();g.FileHandle=i,g.default=function(I){return"undefined"===typeof Promise?null:{FileHandle:i,access:function(g,A){return C(I,"access")(g,A)},appendFile:function(g,A,c){return C(I,"appendFile")(g instanceof i?g.fd:g,A,c)},chmod:function(g,A){return C(I,"chmod")(g,A)},chown:function(g,A,i){return C(I,"chown")(g,A,i)},copyFile:function(g,A,i){return C(I,"copyFile")(g,A,i)},lchmod:function(g,A){return C(I,"lchmod")(g,A)},lchown:function(g,A,i){return C(I,"lchown")(g,A,i)},link:function(g,A){return C(I,"link")(g,A)},lstat:function(g,A){return C(I,"lstat")(g,A)},mkdir:function(g,A){return C(I,"mkdir")(g,A)},mkdtemp:function(g,A){return C(I,"mkdtemp")(g,A)},open:function(g,A,c){return C(I,"open",(function(g){return new i(I,g)}))(g,A,c)},readdir:function(g,A){return C(I,"readdir")(g,A)},readFile:function(g,A){return C(I,"readFile")(g instanceof i?g.fd:g,A)},readlink:function(g,A){return C(I,"readlink")(g,A)},realpath:function(g,A){return C(I,"realpath")(g,A)},rename:function(g,A){return C(I,"rename")(g,A)},rmdir:function(g){return C(I,"rmdir")(g)},stat:function(g,A){return C(I,"stat")(g,A)},symlink:function(g,A,i){return C(I,"symlink")(g,A,i)},truncate:function(g,A){return C(I,"truncate")(g,A)},unlink:function(g){return C(I,"unlink")(g)},utimes:function(g,A,i){return C(I,"utimes")(g,A,i)},writeFile:function(g,A,c){return C(I,"writeFile")(g instanceof i?g.fd:g,A,c)}}}}));l(sC);var rC=/[^\x20-\x7E]/,YC=/[\x2E\u3002\uFF0E\uFF61]/g,WC="Overflow: input needs wider integers to process",SC=Math.floor,pC=String.fromCharCode;function KC(I,g){return I+22+75*(26>I)-((0!=g)<<5)}function RC(I){return function(I,g){var C=I.split("@"),A="";1<C.length&&(A=C[0]+"@",I=C[1]),C=(I=(I=I.replace(YC,".")).split(".")).length;for(var i=[];C--;)i[C]=g(I[C]);return A+i.join(".")}(I,(function(I){if(rC.test(I)){var g,C=[],A=[],i=0;for(g=I.length;i<g;){var c=I.charCodeAt(i++);if(55296<=c&&56319>=c&&i<g){var G=I.charCodeAt(i++);56320==(64512&G)?A.push(((1023&c)<<10)+(1023&G)+65536):(A.push(c),i--)}else A.push(c)}G=(I=A).length,A=128;var l=0,b=72;for(c=0;c<G;++c){var Z=I[c];128>Z&&C.push(pC(Z))}for((i=g=C.length)&&C.push("-");i<G;){var t=2147483647;for(c=0;c<G;++c)(Z=I[c])>=A&&Z<t&&(t=Z);var o=i+1;if(t-A>SC((2147483647-l)/o))throw new RangeError(WC);for(l+=(t-A)*o,A=t,c=0;c<G;++c){if((Z=I[c])<A&&2147483647<++l)throw new RangeError(WC);if(Z==A){var n=l;for(t=36;!(n<(Z=t<=b?1:t>=b+26?26:t-b));t+=36){var u=n-Z;n=36-Z,C.push(pC(KC(Z+u%n,0))),n=SC(u/n)}for(C.push(pC(KC(n,0))),b=o,t=0,l=i==g?SC(l/700):l>>1,l+=SC(l/b);455<l;t+=36)l=SC(l/35);b=SC(t+36*l/(l+38)),l=0,++i}}++l,++A}C="xn--"+C.join("")}else C=I;return C}))}var HC=Array.isArray||function(I){return"[object Array]"===Object.prototype.toString.call(I)};function JC(I){switch(typeof I){case"string":return I;case"boolean":return I?"true":"false";case"number":return isFinite(I)?I:"";default:return""}}function FC(I,g){if(I.map)return I.map(g);for(var C=[],A=0;A<I.length;A++)C.push(g(I[A],A));return C}var wC=Object.keys||function(I){var g,C=[];for(g in I)Object.prototype.hasOwnProperty.call(I,g)&&C.push(g);return C};function fC(I,g,C,A){C=C||"=";var i={};if("string"!==typeof I||0===I.length)return i;var c=/\+/g;for(I=I.split(g||"&"),g=1e3,A&&"number"===typeof A.maxKeys&&(g=A.maxKeys),A=I.length,0<g&&A>g&&(A=g),g=0;g<A;++g){var G=I[g].replace(c,"%20"),l=G.indexOf(C);if(0<=l){var b=G.substr(0,l);G=G.substr(l+1)}else b=G,G="";b=decodeURIComponent(b),G=decodeURIComponent(G),Object.prototype.hasOwnProperty.call(i,b)?HC(i[b])?i[b].push(G):i[b]=[i[b],G]:i[b]=G}return i}var vC={parse:jC,resolve:function(I,g){return jC(I,!1,!0).resolve(g)},resolveObject:function(I,g){return I?jC(I,!1,!0).resolveObject(g):g},format:function(I){return wI(I)&&(I=QC({},I)),_C(I)},Url:xC};function xC(){this.href=this.path=this.pathname=this.query=this.search=this.hash=this.hostname=this.port=this.host=this.auth=this.slashes=this.protocol=null}var NC=/^([a-z0-9.+-]+:)/i,LC=/:[0-9]*$/,kC=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,TC="{}|\\^`".split("").concat('<>"` \r\n\t'.split("")),UC=["'"].concat(TC),zC=["%","/","?",";","#"].concat(UC),EC=["/","?","#"],MC=/^[+a-z0-9A-Z_-]{0,63}$/,DC=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,OC={javascript:!0,"javascript:":!0},PC={javascript:!0,"javascript:":!0},qC={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};function jC(I,g,C){if(I&&xI(I)&&I instanceof xC)return I;var A=new xC;return A.parse(I,g,C),A}function QC(I,g,C,A){if(!wI(g))throw new TypeError("Parameter 'url' must be a string, not "+typeof g);var i=g.indexOf("?");if(i=-1!==i&&i<g.indexOf("#")?"?":"#",(g=g.split(i))[0]=g[0].replace(/\\/g,"/"),i=(g=g.join(i)).trim(),!A&&1===g.split("#").length&&(g=kC.exec(i)))return I.path=i,I.href=i,I.pathname=g[1],g[2]?(I.search=g[2],I.query=C?fC(I.search.substr(1)):I.search.substr(1)):C&&(I.search="",I.query={}),I;if(g=NC.exec(i)){var c=(g=g[0]).toLowerCase();I.protocol=c,i=i.substr(g.length)}if(A||g||i.match(/^\/\/[^@\/]+@[^@\/]+/)){var G="//"===i.substr(0,2);!G||g&&PC[g]||(i=i.substr(2),I.slashes=!0)}if(!PC[g]&&(G||g&&!qC[g])){for(g=-1,A=0;A<EC.length;A++)-1!==(G=i.indexOf(EC[A]))&&(-1===g||G<g)&&(g=G);for(-1!==(G=-1===g?i.lastIndexOf("@"):i.lastIndexOf("@",g))&&(A=i.slice(0,G),i=i.slice(G+1),I.auth=decodeURIComponent(A)),g=-1,A=0;A<zC.length;A++)-1!==(G=i.indexOf(zC[A]))&&(-1===g||G<g)&&(g=G);if(-1===g&&(g=i.length),I.host=i.slice(0,g),i=i.slice(g),$C(I),I.hostname=I.hostname||"",!(G="["===I.hostname[0]&&"]"===I.hostname[I.hostname.length-1])){var l=I.hostname.split(/\./);for(A=0,g=l.length;A<g;A++){var b=l[A];if(b&&!b.match(MC)){for(var Z="",t=0,o=b.length;t<o;t++)Z=127<b.charCodeAt(t)?Z+"x":Z+b[t];if(!Z.match(MC)){g=l.slice(0,A),A=l.slice(A+1),(b=b.match(DC))&&(g.push(b[1]),A.unshift(b[2])),A.length&&(i="/"+A.join(".")+i),I.hostname=g.join(".");break}}}}I.hostname=I.hostname.length>255?"":I.hostname.toLowerCase(),G||(I.hostname=RC(I.hostname)),A=I.port?":"+I.port:"",I.host=(I.hostname||"")+A,I.href+=I.host,G&&(I.hostname=I.hostname.substr(1,I.hostname.length-2),"/"!==i[0]&&(i="/"+i))}if(!OC[c])for(A=0,g=UC.length;A<g;A++)G=UC[A],-1!==i.indexOf(G)&&((b=encodeURIComponent(G))===G&&(b=escape(G)),i=i.split(G).join(b));return-1!==(A=i.indexOf("#"))&&(I.hash=i.substr(A),i=i.slice(0,A)),-1!==(A=i.indexOf("?"))?(I.search=i.substr(A),I.query=i.substr(A+1),C&&(I.query=fC(I.query)),i=i.slice(0,A)):C&&(I.search="",I.query={}),i&&(I.pathname=i),qC[c]&&I.hostname&&!I.pathname&&(I.pathname="/"),(I.pathname||I.search)&&(A=I.pathname||"",I.path=A+(I.search||"")),I.href=_C(I),I}function _C(I){var g=I.auth||"";g&&(g=(g=encodeURIComponent(g)).replace(/%3A/i,":"),g+="@");var C=I.protocol||"",A=I.pathname||"",i=I.hash||"",c=!1,G="";return I.host?c=g+I.host:I.hostname&&(c=g+(-1===I.hostname.indexOf(":")?I.hostname:"["+this.hostname+"]"),I.port&&(c+=":"+I.port)),I.query&&xI(I.query)&&Object.keys(I.query).length&&(G=function(I,g,C,A){return g=g||"&",C=C||"=",null===I&&(I=void 0),"object"===typeof I?FC(wC(I),(function(A){var i=encodeURIComponent(JC(A))+C;return HC(I[A])?FC(I[A],(function(I){return i+encodeURIComponent(JC(I))})).join(g):i+encodeURIComponent(JC(I[A]))})).join(g):A?encodeURIComponent(JC(A))+C+encodeURIComponent(JC(I)):""}(I.query)),g=I.search||G&&"?"+G||"",C&&":"!==C.substr(-1)&&(C+=":"),I.slashes||(!C||qC[C])&&!1!==c?(c="//"+(c||""),A&&"/"!==A.charAt(0)&&(A="/"+A)):c||(c=""),i&&"#"!==i.charAt(0)&&(i="#"+i),g&&"?"!==g.charAt(0)&&(g="?"+g),A=A.replace(/[?#]/g,(function(I){return encodeURIComponent(I)})),C+c+A+(g=g.replace("#","%23"))+i}function $C(I){var g=I.host,C=LC.exec(g);C&&(":"!==(C=C[0])&&(I.port=C.substr(1)),g=g.substr(0,g.length-C.length)),g&&(I.hostname=g)}xC.prototype.parse=function(I,g,C){return QC(this,I,g,C)},xC.prototype.format=function(){return _C(this)},xC.prototype.resolve=function(I){return this.resolveObject(jC(I,!1,!0)).format()},xC.prototype.resolveObject=function(I){if(wI(I)){var g=new xC;g.parse(I,!1,!0),I=g}g=new xC;for(var C=Object.keys(this),A=0;A<C.length;A++){var i=C[A];g[i]=this[i]}if(g.hash=I.hash,""===I.href)return g.href=g.format(),g;if(I.slashes&&!I.protocol){for(C=Object.keys(I),A=0;A<C.length;A++)"protocol"!==(i=C[A])&&(g[i]=I[i]);return qC[g.protocol]&&g.hostname&&!g.pathname&&(g.path=g.pathname="/"),g.href=g.format(),g}var c;if(I.protocol&&I.protocol!==g.protocol){if(!qC[I.protocol]){for(C=Object.keys(I),A=0;A<C.length;A++)g[i=C[A]]=I[i];return g.href=g.format(),g}if(g.protocol=I.protocol,I.host||PC[I.protocol])g.pathname=I.pathname;else{for(c=(I.pathname||"").split("/");c.length&&!(I.host=c.shift()););I.host||(I.host=""),I.hostname||(I.hostname=""),""!==c[0]&&c.unshift(""),2>c.length&&c.unshift(""),g.pathname=c.join("/")}return g.search=I.search,g.query=I.query,g.host=I.host||"",g.auth=I.auth,g.hostname=I.hostname||I.host,g.port=I.port,(g.pathname||g.search)&&(g.path=(g.pathname||"")+(g.search||"")),g.slashes=g.slashes||I.slashes,g.href=g.format(),g}C=g.pathname&&"/"===g.pathname.charAt(0);var G=I.host||I.pathname&&"/"===I.pathname.charAt(0),l=C=G||C||g.host&&I.pathname;if(A=g.pathname&&g.pathname.split("/")||[],i=g.protocol&&!qC[g.protocol],c=I.pathname&&I.pathname.split("/")||[],i&&(g.hostname="",g.port=null,g.host&&(""===A[0]?A[0]=g.host:A.unshift(g.host)),g.host="",I.protocol&&(I.hostname=null,I.port=null,I.host&&(""===c[0]?c[0]=I.host:c.unshift(I.host)),I.host=null),C=C&&(""===c[0]||""===A[0])),G)g.host=I.host||""===I.host?I.host:g.host,g.hostname=I.hostname||""===I.hostname?I.hostname:g.hostname,g.search=I.search,g.query=I.query,A=c;else if(c.length)A||(A=[]),A.pop(),A=A.concat(c),g.search=I.search,g.query=I.query;else if(null!=I.search)return i&&(g.hostname=g.host=A.shift(),i=!!(g.host&&0<g.host.indexOf("@"))&&g.host.split("@"))&&(g.auth=i.shift(),g.host=g.hostname=i.shift()),g.search=I.search,g.query=I.query,null===g.pathname&&null===g.search||(g.path=(g.pathname?g.pathname:"")+(g.search?g.search:"")),g.href=g.format(),g;if(!A.length)return g.pathname=null,g.path=g.search?"/"+g.search:null,g.href=g.format(),g;G=A.slice(-1)[0],c=(g.host||I.host||1<A.length)&&("."===G||".."===G)||""===G;for(var b=0,Z=A.length;0<=Z;Z--)"."===(G=A[Z])?A.splice(Z,1):".."===G?(A.splice(Z,1),b++):b&&(A.splice(Z,1),b--);if(!C&&!l)for(;b--;b)A.unshift("..");return!C||""===A[0]||A[0]&&"/"===A[0].charAt(0)||A.unshift(""),c&&"/"!==A.join("/").substr(-1)&&A.push(""),l=""===A[0]||A[0]&&"/"===A[0].charAt(0),i&&(g.hostname=g.host=l?"":A.length?A.shift():"",i=!!(g.host&&0<g.host.indexOf("@"))&&g.host.split("@"))&&(g.auth=i.shift(),g.host=g.hostname=i.shift()),(C=C||g.host&&A.length)&&!l&&A.unshift(""),A.length?g.pathname=A.join("/"):(g.pathname=null,g.path=null),null===g.pathname&&null===g.search||(g.path=(g.pathname?g.pathname:"")+(g.search?g.search:"")),g.auth=I.auth||g.auth,g.slashes=g.slashes||I.slashes,g.href=g.format(),g},xC.prototype.parseHost=function(){return $C(this)};var IA=b((function(I,g){function C(I,g){return I=I[g],0<g&&("/"===I||i&&"\\"===I)}function A(I){var g=!(1<arguments.length&&void 0!==arguments[1])||arguments[1];if(i){var A=I;if("string"!==typeof A)throw new TypeError("expected a string");if(A=A.replace(/[\\\/]+/g,"/"),!1!==g)if(2>(A=(g=A).length-1))A=g;else{for(;C(g,A);)A--;A=g.substr(0,A+1)}return A.replace(/^([a-zA-Z]+:|\.\/)/,"")}return I}Object.defineProperty(g,"__esModule",{value:!0}),g.unixify=A,g.correctPath=function(I){return A(I.replace(/^\\\\\?\\.:\\/,"\\"))};var i="win32"===BI.platform}));l(IA);var gA=b((function(I,g){function C(I,g){return void 0===g&&(g=sg.default.cwd()),w(g,I)}function A(I,g){return"function"===typeof I?[i(),I]:[i(I),u(g)]}function i(I){return void 0===I&&(I={}),F({},nI,I)}function c(I){return F({},bI,"number"===typeof I?{mode:I}:I)}function l(I,g,C,A,i){return void 0===g&&(g=""),void 0===C&&(C=""),void 0===A&&(A=""),void 0===i&&(i=Error),g=new i(function(I,g,C,A){void 0===g&&(g=""),void 0===C&&(C=""),void 0===A&&(A="");var i="";switch(C&&(i=" '"+C+"'"),A&&(i+=" -> '"+A+"'"),I){case"ENOENT":return"ENOENT: no such file or directory, "+g+i;case"EBADF":return"EBADF: bad file descriptor, "+g+i;case"EINVAL":return"EINVAL: invalid argument, "+g+i;case"EPERM":return"EPERM: operation not permitted, "+g+i;case"EPROTO":return"EPROTO: protocol error, "+g+i;case"EEXIST":return"EEXIST: file already exists, "+g+i;case"ENOTDIR":return"ENOTDIR: not a directory, "+g+i;case"EISDIR":return"EISDIR: illegal operation on a directory, "+g+i;case"EACCES":return"EACCES: permission denied, "+g+i;case"ENOTEMPTY":return"ENOTEMPTY: directory not empty, "+g+i;case"EMFILE":return"EMFILE: too many open files, "+g+i;case"ENOSYS":return"ENOSYS: function not implemented, "+g+i;default:return I+": error occurred, "+g+i}}(I,g,C,A)),g.code=I,g}function b(I){if("number"===typeof I)return I;if("string"===typeof I){var g=J[I];if("undefined"!==typeof g)return g}throw new ng.TypeError("ERR_INVALID_OPT_VALUE","flags",I)}function t(I,g){if(!g)return I;var C=typeof g;switch(C){case"string":I=F({},I,{encoding:g});break;case"object":I=F({},I,g);break;default:throw TypeError("Expected options to be either an object or a string, but got "+C+" instead")}return"buffer"!==I.encoding&&ug.assertEncoding(I.encoding),I}function n(I){return function(g){return t(I,g)}}function u(I){if("function"!==typeof I)throw TypeError(j.CB);return I}function d(I){return function(g,C){return"function"===typeof g?[I(),g]:[I(g),u(C)]}}function m(I){if("string"!==typeof I&&!$.Buffer.isBuffer(I)){try{if(!(I instanceof vC.URL))throw new TypeError(j.PATH_STR)}catch(A){throw new TypeError(j.PATH_STR)}if(""!==I.hostname)throw new ng.TypeError("ERR_INVALID_FILE_URL_HOST",sg.default.platform);I=I.pathname;for(var g=0;g<I.length;g++)if("%"===I[g]){var C=32|I.codePointAt(g+2);if("2"===I[g+1]&&102===C)throw new ng.TypeError("ERR_INVALID_FILE_URL_PATH","must not include encoded / characters")}I=decodeURIComponent(I)}return V(I=String(I)),I}function e(I,g){return(I=C(I,g).substr(1))?I.split(O):[]}function B(I){return e(m(I))}function X(I,g){return void 0===g&&(g=ug.ENCODING_UTF8),$.Buffer.isBuffer(I)?I:I instanceof Uint8Array?$.bufferFrom(I):$.bufferFrom(String(I),g)}function y(I,g){return g&&"buffer"!==g?I.toString(g):I}function V(I,g){if(-1!==(""+I).indexOf("\0")){if((I=Error("Path must be a string without null bytes")).code="ENOENT","function"!==typeof g)throw I;return sg.default.nextTick(g,I),!1}return!0}function h(I,g){if("number"!==typeof(I="number"===typeof I?I:"string"===typeof I?parseInt(I,8):g?h(g):void 0)||isNaN(I))throw new TypeError(j.MODE_INT);return I}function a(I){if(I>>>0!==I)throw TypeError(j.FD)}function s(I){if("string"===typeof I&&+I==I)return+I;if(I instanceof Date)return I.getTime()/1e3;if(isFinite(I))return 0>I?Date.now()/1e3:I;throw Error("Cannot parse time: "+I)}function r(I){if("number"!==typeof I)throw TypeError(j.UID)}function Y(I){if("number"!==typeof I)throw TypeError(j.GID)}function W(I){I.emit("stop")}function S(I,g,C){if(!(this instanceof S))return new S(I,g,C);if(this._vol=I,void 0===(C=F({},t(C,{}))).highWaterMark&&(C.highWaterMark=65536),VC.Readable.call(this,C),this.path=m(g),this.fd=void 0===C.fd?null:C.fd,this.flags=void 0===C.flags?"r":C.flags,this.mode=void 0===C.mode?438:C.mode,this.start=C.start,this.end=C.end,this.autoClose=void 0===C.autoClose||C.autoClose,this.pos=void 0,this.bytesRead=0,void 0!==this.start){if("number"!==typeof this.start)throw new TypeError('"start" option must be a Number');if(void 0===this.end)this.end=1/0;else if("number"!==typeof this.end)throw new TypeError('"end" option must be a Number');if(this.start>this.end)throw Error('"start" option must be <= "end" option');this.pos=this.start}"number"!==typeof this.fd&&this.open(),this.on("end",(function(){this.autoClose&&this.destroy&&this.destroy()}))}function p(){this.close()}function K(I,g,C){if(!(this instanceof K))return new K(I,g,C);if(this._vol=I,C=F({},t(C,{})),VC.Writable.call(this,C),this.path=m(g),this.fd=void 0===C.fd?null:C.fd,this.flags=void 0===C.flags?"w":C.flags,this.mode=void 0===C.mode?438:C.mode,this.start=C.start,this.autoClose=void 0===C.autoClose||!!C.autoClose,this.pos=void 0,this.bytesWritten=0,void 0!==this.start){if("number"!==typeof this.start)throw new TypeError('"start" option must be a Number');if(0>this.start)throw Error('"start" must be >= zero');this.pos=this.start}C.encoding&&this.setDefaultEncoding(C.encoding),"number"!==typeof this.fd&&this.open(),this.once("finish",(function(){this.autoClose&&this.close()}))}var R=G&&G.__extends||function(){function I(g,C){return I=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(I,g){I.__proto__=g}||function(I,g){for(var C in g)g.hasOwnProperty(C)&&(I[C]=g[C])},I(g,C)}return function(g,C){function A(){this.constructor=g}I(g,C),g.prototype=null===C?Object.create(C):(A.prototype=C.prototype,new A)}}(),H=G&&G.__spreadArrays||function(){for(var I=0,g=0,C=arguments.length;g<C;g++)I+=arguments[g].length;I=Array(I);var A=0;for(g=0;g<C;g++)for(var i=arguments[g],c=0,G=i.length;c<G;c++,A++)I[A]=i[c];return I};Object.defineProperty(g,"__esModule",{value:!0});var J,F=aC,w=Vg,f=Z.constants.O_RDONLY,v=Z.constants.O_WRONLY,x=Z.constants.O_RDWR,N=Z.constants.O_CREAT,L=Z.constants.O_EXCL,k=Z.constants.O_TRUNC,T=Z.constants.O_APPEND,U=Z.constants.O_SYNC,z=Z.constants.O_DIRECTORY,E=Z.constants.F_OK,M=Z.constants.COPYFILE_EXCL,D=Z.constants.COPYFILE_FICLONE_FORCE,O=Xg,P=yg,q="win32"===sg.default.platform,j={PATH_STR:"path must be a string or Buffer",FD:"fd must be a file descriptor",MODE_INT:"mode must be an int",CB:"callback must be a function",UID:"uid must be an unsigned int",GID:"gid must be an unsigned int",LEN:"len must be an integer",ATIME:"atime must be an integer",MTIME:"mtime must be an integer",PREFIX:"filename prefix is required",BUFFER:"buffer must be an instance of Buffer or StaticBuffer",OFFSET:"offset must be an integer",LENGTH:"length must be an integer",POSITION:"position must be an integer"};!function(I){I[I.r=f]="r",I[I["r+"]=x]="r+",I[I.rs=f|U]="rs",I[I.sr=I.rs]="sr",I[I["rs+"]=x|U]="rs+",I[I["sr+"]=I["rs+"]]="sr+",I[I.w=v|N|k]="w",I[I.wx=v|N|k|L]="wx",I[I.xw=I.wx]="xw",I[I["w+"]=x|N|k]="w+",I[I["wx+"]=x|N|k|L]="wx+",I[I["xw+"]=I["wx+"]]="xw+",I[I.a=v|T|N]="a",I[I.ax=v|T|N|L]="ax",I[I.xa=I.ax]="xa",I[I["a+"]=x|T|N]="a+",I[I["ax+"]=x|T|N|L]="ax+",I[I["xa+"]=I["ax+"]]="xa+"}(J=g.FLAGS||(g.FLAGS={})),g.flagsToNumber=b;var Q=n(I={encoding:"utf8"}),_=d(Q),II=n({flag:"r"}),gI={encoding:"utf8",mode:438,flag:J[J.w]},CI=n(gI),AI={encoding:"utf8",mode:438,flag:J[J.a]},iI=n(AI),cI=d(iI),GI=n(I),lI=d(GI),bI={mode:511,recursive:!1},ZI={recursive:!1},tI=n({encoding:"utf8",withFileTypes:!1}),oI=d(tI),nI={bigint:!1};if(g.pathToFilename=m,q){var uI=C,dI=IA.unixify;C=function(I,g){return dI(uI(I,g))}}g.filenameToSteps=e,g.pathToSteps=B,g.dataToStr=function(I,g){return void 0===g&&(g=ug.ENCODING_UTF8),$.Buffer.isBuffer(I)?I.toString(g):I instanceof Uint8Array?$.bufferFrom(I).toString(g):String(I)},g.dataToBuffer=X,g.bufferToEncoding=y,g.toUnixTimestamp=s,I=function(){function I(I){void 0===I&&(I={}),this.ino=0,this.inodes={},this.releasedInos=[],this.fds={},this.releasedFds=[],this.maxFiles=1e4,this.openFiles=0,this.promisesApi=sC.default(this),this.statWatchers={},this.props=F({Node:Rg.Node,Link:Rg.Link,File:Rg.File},I),(I=this.createLink()).setNode(this.createNode(!0));var g=this;this.StatWatcher=function(I){function C(){return I.call(this,g)||this}return R(C,I),C}(eI),this.ReadStream=function(I){function C(){for(var C=[],A=0;A<arguments.length;A++)C[A]=arguments[A];return I.apply(this,H([g],C))||this}return R(C,I),C}(S),this.WriteStream=function(I){function C(){for(var C=[],A=0;A<arguments.length;A++)C[A]=arguments[A];return I.apply(this,H([g],C))||this}return R(C,I),C}(K),this.FSWatcher=function(I){function C(){return I.call(this,g)||this}return R(C,I),C}(BI),this.root=I}return I.fromJSON=function(g,C){var A=new I;return A.fromJSON(g,C),A},Object.defineProperty(I.prototype,"promises",{get:function(){if(null===this.promisesApi)throw Error("Promise is not supported in this environment.");return this.promisesApi},enumerable:!0,configurable:!0}),I.prototype.createLink=function(I,g,C,A){if(void 0===C&&(C=!1),!I)return new this.props.Link(this,null,"");if(!g)throw Error("createLink: name cannot be empty");return I.createChild(g,this.createNode(C,A))},I.prototype.deleteLink=function(I){var g=I.parent;return!!g&&(g.deleteChild(I),!0)},I.prototype.newInoNumber=function(){var I=this.releasedInos.pop();return I||(this.ino=(this.ino+1)%4294967295)},I.prototype.newFdNumber=function(){var g=this.releasedFds.pop();return"number"===typeof g?g:I.fd--},I.prototype.createNode=function(I,g){return void 0===I&&(I=!1),g=new this.props.Node(this.newInoNumber(),g),I&&g.setIsDirectory(),this.inodes[g.ino]=g},I.prototype.getNode=function(I){return this.inodes[I]},I.prototype.deleteNode=function(I){I.del(),delete this.inodes[I.ino],this.releasedInos.push(I.ino)},I.prototype.genRndStr=function(){var I=(Math.random()+1).toString(36).substr(2,6);return 6===I.length?I:this.genRndStr()},I.prototype.getLink=function(I){return this.root.walk(I)},I.prototype.getLinkOrThrow=function(I,g){var C=e(I);if(!(C=this.getLink(C)))throw l("ENOENT",g,I);return C},I.prototype.getResolvedLink=function(I){I="string"===typeof I?e(I):I;for(var g=this.root,C=0;C<I.length;){if(!(g=g.getChild(I[C])))return null;var A=g.getNode();A.isSymlink()?(I=A.symlink.concat(I.slice(C+1)),g=this.root,C=0):C++}return g},I.prototype.getResolvedLinkOrThrow=function(I,g){var C=this.getResolvedLink(I);if(!C)throw l("ENOENT",g,I);return C},I.prototype.resolveSymlinks=function(I){return this.getResolvedLink(I.steps.slice(1))},I.prototype.getLinkAsDirOrThrow=function(I,g){var C=this.getLinkOrThrow(I,g);if(!C.getNode().isDirectory())throw l("ENOTDIR",g,I);return C},I.prototype.getLinkParent=function(I){return this.root.walk(I,I.length-1)},I.prototype.getLinkParentAsDirOrThrow=function(I,g){I=I instanceof Array?I:e(I);var C=this.getLinkParent(I);if(!C)throw l("ENOENT",g,O+I.join(O));if(!C.getNode().isDirectory())throw l("ENOTDIR",g,O+I.join(O));return C},I.prototype.getFileByFd=function(I){return this.fds[String(I)]},I.prototype.getFileByFdOrThrow=function(I,g){if(I>>>0!==I)throw TypeError(j.FD);if(!(I=this.getFileByFd(I)))throw l("EBADF",g);return I},I.prototype.getNodeByIdOrCreate=function(I,g,C){if("number"===typeof I){if(!(I=this.getFileByFd(I)))throw Error("File nto found");return I.node}var A=B(I),i=this.getLink(A);if(i)return i.getNode();if(g&N&&(g=this.getLinkParent(A)))return(i=this.createLink(g,A[A.length-1],!1,C)).getNode();throw l("ENOENT","getNodeByIdOrCreate",m(I))},I.prototype.wrapAsync=function(I,g,C){var A=this;u(C),ag.default((function(){try{C(null,I.apply(A,g))}catch(i){C(i)}}))},I.prototype._toJSON=function(I,g,C){var A;void 0===I&&(I=this.root),void 0===g&&(g={});var i=!0,c=I.children;for(var G in I.getNode().isFile()&&((A={})[I.getName()]=I.parent.getChild(I.getName()),c=A,I=I.parent),c){if(i=!1,!(c=I.getChild(G)))throw Error("_toJSON: unexpected undefined");(A=c.getNode()).isFile()?(c=c.getPath(),C&&(c=P(C,c)),g[c]=A.getString()):A.isDirectory()&&this._toJSON(c,g,C)}return I=I.getPath(),C&&(I=P(C,I)),I&&i&&(g[I]=null),g},I.prototype.toJSON=function(I,g,C){void 0===g&&(g={}),void 0===C&&(C=!1);var A=[];if(I){I instanceof Array||(I=[I]);for(var i=0;i<I.length;i++){var c=m(I[i]);(c=this.getResolvedLink(c))&&A.push(c)}}else A.push(this.root);if(!A.length)return g;for(i=0;i<A.length;i++)c=A[i],this._toJSON(c,g,C?c.getPath():"");return g},I.prototype.fromJSON=function(I,g){for(var A in void 0===g&&(g=sg.default.cwd()),I){var i=I[A];if("string"===typeof i){var c=e(A=C(A,g));1<c.length&&(c=O+c.slice(0,c.length-1).join(O),this.mkdirpBase(c,511)),this.writeFileSync(A,i)}else this.mkdirpBase(A,511)}},I.prototype.reset=function(){this.ino=0,this.inodes={},this.releasedInos=[],this.fds={},this.releasedFds=[],this.openFiles=0,this.root=this.createLink(),this.root.setNode(this.createNode(!0))},I.prototype.mountSync=function(I,g){this.fromJSON(g,I)},I.prototype.openLink=function(I,g,C){if(void 0===C&&(C=!0),this.openFiles>=this.maxFiles)throw l("EMFILE","open",I.getPath());var A=I;if(C&&(A=this.resolveSymlinks(I)),!A)throw l("ENOENT","open",I.getPath());if((C=A.getNode()).isDirectory()){if((g&(f|x|v))!==f)throw l("EISDIR","open",I.getPath())}else if(g&z)throw l("ENOTDIR","open",I.getPath());if(!(g&v||C.canRead()))throw l("EACCES","open",I.getPath());return I=new this.props.File(I,C,g,this.newFdNumber()),this.fds[I.fd]=I,this.openFiles++,g&k&&I.truncate(),I},I.prototype.openFile=function(I,g,C,A){void 0===A&&(A=!0);var i=e(I),c=A?this.getResolvedLink(i):this.getLink(i);if(!c&&g&N){var G=this.getResolvedLink(i.slice(0,i.length-1));if(!G)throw l("ENOENT","open",O+i.join(O));g&N&&"number"===typeof C&&(c=this.createLink(G,i[i.length-1],!1,C))}if(c)return this.openLink(c,g,A);throw l("ENOENT","open",I)},I.prototype.openBase=function(I,g,C,A){if(void 0===A&&(A=!0),!(g=this.openFile(I,g,C,A)))throw l("ENOENT","open",I);return g.fd},I.prototype.openSync=function(I,g,C){return void 0===C&&(C=438),C=h(C),I=m(I),g=b(g),this.openBase(I,g,C)},I.prototype.open=function(I,g,C,A){var i=C;"function"===typeof C&&(i=438,A=C),C=h(i||438),I=m(I),g=b(g),this.wrapAsync(this.openBase,[I,g,C],A)},I.prototype.closeFile=function(I){this.fds[I.fd]&&(this.openFiles--,delete this.fds[I.fd],this.releasedFds.push(I.fd))},I.prototype.closeSync=function(I){a(I),I=this.getFileByFdOrThrow(I,"close"),this.closeFile(I)},I.prototype.close=function(I,g){a(I),this.wrapAsync(this.closeSync,[I],g)},I.prototype.openFileOrGetById=function(I,g,C){if("number"===typeof I){if(!(I=this.fds[I]))throw l("ENOENT");return I}return this.openFile(m(I),g,C)},I.prototype.readBase=function(I,g,C,A,i){return this.getFileByFdOrThrow(I).read(g,Number(C),Number(A),i)},I.prototype.readSync=function(I,g,C,A,i){return a(I),this.readBase(I,g,C,A,i)},I.prototype.read=function(I,g,C,A,i,c){var G=this;if(u(c),0===A)return sg.default.nextTick((function(){c&&c(null,0,g)}));ag.default((function(){try{var l=G.readBase(I,g,C,A,i);c(null,l,g)}catch(b){c(b)}}))},I.prototype.readFileBase=function(I,g,C){var A="number"===typeof I&&I>>>0===I;if(!A){var i=m(I);if(i=e(i),(i=this.getResolvedLink(i))&&i.getNode().isDirectory())throw l("EISDIR","open",i.getPath());I=this.openSync(I,g)}try{var c=y(this.getFileByFdOrThrow(I).getBuffer(),C)}finally{A||this.closeSync(I)}return c},I.prototype.readFileSync=function(I,g){var C=b((g=II(g)).flag);return this.readFileBase(I,C,g.encoding)},I.prototype.readFile=function(I,g,C){g=(C=d(II)(g,C))[0],C=C[1];var A=b(g.flag);this.wrapAsync(this.readFileBase,[I,A,g.encoding],C)},I.prototype.writeBase=function(I,g,C,A,i){return this.getFileByFdOrThrow(I,"write").write(g,C,A,i)},I.prototype.writeSync=function(I,g,C,A,i){a(I);var c="string"!==typeof g;if(c){var G=0|(C||0),l=A;C=i}else var b=A;return g=X(g,b),c?"undefined"===typeof l&&(l=g.length):(G=0,l=g.length),this.writeBase(I,g,G,l,C)},I.prototype.write=function(I,g,C,A,i,c){var G=this;a(I);var l=typeof g,b=typeof C,Z=typeof A,t=typeof i;if("string"!==l)if("function"===b)var o=C;else if("function"===Z){var n=0|C;o=A}else if("function"===t){n=0|C;var d=A;o=i}else{n=0|C,d=A;var m=i;o=c}else if("function"===b)o=C;else if("function"===Z)m=C,o=A;else if("function"===t){m=C;var e=A;o=i}var B=X(g,e);"string"!==l?"undefined"===typeof d&&(d=B.length):(n=0,d=B.length);var y=u(o);ag.default((function(){try{var C=G.writeBase(I,B,n,d,m);y(null,C,"string"!==l?B:g)}catch(A){y(A)}}))},I.prototype.writeFileBase=function(I,g,C,A){var i="number"===typeof I;I=i?I:this.openBase(m(I),C,A),A=0;var c=g.length;C=C&T?void 0:0;try{for(;0<c;){var G=this.writeSync(I,g,A,c,C);A+=G,c-=G,void 0!==C&&(C+=G)}}finally{i||this.closeSync(I)}},I.prototype.writeFileSync=function(I,g,C){var A=CI(C);C=b(A.flag);var i=h(A.mode);g=X(g,A.encoding),this.writeFileBase(I,g,C,i)},I.prototype.writeFile=function(I,g,C,A){var i=C;"function"===typeof C&&(i=gI,A=C),C=u(A);var c=CI(i);i=b(c.flag),A=h(c.mode),g=X(g,c.encoding),this.wrapAsync(this.writeFileBase,[I,g,i,A],C)},I.prototype.linkBase=function(I,g){var C=e(I),A=this.getLink(C);if(!A)throw l("ENOENT","link",I,g);var i=e(g);if(!(C=this.getLinkParent(i)))throw l("ENOENT","link",I,g);if(i=i[i.length-1],C.getChild(i))throw l("EEXIST","link",I,g);(I=A.getNode()).nlink++,C.createChild(i,I)},I.prototype.copyFileBase=function(I,g,C){var A=this.readFileSync(I);if(C&M&&this.existsSync(g))throw l("EEXIST","copyFile",I,g);if(C&D)throw l("ENOSYS","copyFile",I,g);this.writeFileBase(g,A,J.w,438)},I.prototype.copyFileSync=function(I,g,C){return I=m(I),g=m(g),this.copyFileBase(I,g,0|(C||0))},I.prototype.copyFile=function(I,g,C,A){if(I=m(I),g=m(g),"function"===typeof C)var i=0;else i=C,C=A;u(C),this.wrapAsync(this.copyFileBase,[I,g,i],C)},I.prototype.linkSync=function(I,g){I=m(I),g=m(g),this.linkBase(I,g)},I.prototype.link=function(I,g,C){I=m(I),g=m(g),this.wrapAsync(this.linkBase,[I,g],C)},I.prototype.unlinkBase=function(I){var g=e(I);if(!(g=this.getLink(g)))throw l("ENOENT","unlink",I);if(g.length)throw Error("Dir not empty...");this.deleteLink(g),(I=g.getNode()).nlink--,0>=I.nlink&&this.deleteNode(I)},I.prototype.unlinkSync=function(I){I=m(I),this.unlinkBase(I)},I.prototype.unlink=function(I,g){I=m(I),this.wrapAsync(this.unlinkBase,[I],g)},I.prototype.symlinkBase=function(I,g){var C=e(g),A=this.getLinkParent(C);if(!A)throw l("ENOENT","symlink",I,g);if(C=C[C.length-1],A.getChild(C))throw l("EEXIST","symlink",I,g);return(g=A.createChild(C)).getNode().makeSymlink(e(I)),g},I.prototype.symlinkSync=function(I,g){I=m(I),g=m(g),this.symlinkBase(I,g)},I.prototype.symlink=function(I,g,C,A){C=u("function"===typeof C?C:A),I=m(I),g=m(g),this.wrapAsync(this.symlinkBase,[I,g],C)},I.prototype.realpathBase=function(I,g){var C=e(I);if(!(C=this.getResolvedLink(C)))throw l("ENOENT","realpath",I);return ug.strToEncoding(C.getPath(),g)},I.prototype.realpathSync=function(I,g){return this.realpathBase(m(I),GI(g).encoding)},I.prototype.realpath=function(I,g,C){g=(C=lI(g,C))[0],C=C[1],I=m(I),this.wrapAsync(this.realpathBase,[I,g.encoding],C)},I.prototype.lstatBase=function(I,g){void 0===g&&(g=!1);var C=this.getLink(e(I));if(!C)throw l("ENOENT","lstat",I);return o.default.build(C.getNode(),g)},I.prototype.lstatSync=function(I,g){return this.lstatBase(m(I),i(g).bigint)},I.prototype.lstat=function(I,g,C){g=(C=A(g,C))[0],C=C[1],this.wrapAsync(this.lstatBase,[m(I),g.bigint],C)},I.prototype.statBase=function(I,g){void 0===g&&(g=!1);var C=this.getResolvedLink(e(I));if(!C)throw l("ENOENT","stat",I);return o.default.build(C.getNode(),g)},I.prototype.statSync=function(I,g){return this.statBase(m(I),i(g).bigint)},I.prototype.stat=function(I,g,C){g=(C=A(g,C))[0],C=C[1],this.wrapAsync(this.statBase,[m(I),g.bigint],C)},I.prototype.fstatBase=function(I,g){if(void 0===g&&(g=!1),!(I=this.getFileByFd(I)))throw l("EBADF","fstat");return o.default.build(I.node,g)},I.prototype.fstatSync=function(I,g){return this.fstatBase(I,i(g).bigint)},I.prototype.fstat=function(I,g,C){g=A(g,C),this.wrapAsync(this.fstatBase,[I,g[0].bigint],g[1])},I.prototype.renameBase=function(I,g){var C=this.getLink(e(I));if(!C)throw l("ENOENT","rename",I,g);var A=e(g),i=this.getLinkParent(A);if(!i)throw l("ENOENT","rename",I,g);(I=C.parent)&&I.deleteChild(C),C.steps=H(i.steps,[A[A.length-1]]),i.setChild(C.getName(),C)},I.prototype.renameSync=function(I,g){I=m(I),g=m(g),this.renameBase(I,g)},I.prototype.rename=function(I,g,C){I=m(I),g=m(g),this.wrapAsync(this.renameBase,[I,g],C)},I.prototype.existsBase=function(I){return!!this.statBase(I)},I.prototype.existsSync=function(I){try{return this.existsBase(m(I))}catch(g){return!1}},I.prototype.exists=function(I,g){var C=this,A=m(I);if("function"!==typeof g)throw Error(j.CB);ag.default((function(){try{g(C.existsBase(A))}catch(I){g(!1)}}))},I.prototype.accessBase=function(I){this.getLinkOrThrow(I,"access")},I.prototype.accessSync=function(I,g){void 0===g&&(g=E),I=m(I),this.accessBase(I,0|g)},I.prototype.access=function(I,g,C){var A=E;"function"!==typeof g&&(A=0|g,g=u(C)),I=m(I),this.wrapAsync(this.accessBase,[I,A],g)},I.prototype.appendFileSync=function(I,g,C){void 0===C&&(C=AI),(C=iI(C)).flag&&I>>>0!==I||(C.flag="a"),this.writeFileSync(I,g,C)},I.prototype.appendFile=function(I,g,C,A){C=(A=cI(C,A))[0],A=A[1],C.flag&&I>>>0!==I||(C.flag="a"),this.writeFile(I,g,C,A)},I.prototype.readdirBase=function(I,g){var C=e(I);if(!(C=this.getResolvedLink(C)))throw l("ENOENT","readdir",I);if(!C.getNode().isDirectory())throw l("ENOTDIR","scandir",I);if(g.withFileTypes){var A=[];for(i in C.children)(I=C.getChild(i))&&A.push(dg.default.build(I,g.encoding));return q||"buffer"===g.encoding||A.sort((function(I,g){return I.name<g.name?-1:I.name>g.name?1:0})),A}var i=[];for(A in C.children)i.push(ug.strToEncoding(A,g.encoding));return q||"buffer"===g.encoding||i.sort(),i},I.prototype.readdirSync=function(I,g){return g=tI(g),I=m(I),this.readdirBase(I,g)},I.prototype.readdir=function(I,g,C){g=(C=oI(g,C))[0],C=C[1],I=m(I),this.wrapAsync(this.readdirBase,[I,g],C)},I.prototype.readlinkBase=function(I,g){var C=this.getLinkOrThrow(I,"readlink").getNode();if(!C.isSymlink())throw l("EINVAL","readlink",I);return I=O+C.symlink.join(O),ug.strToEncoding(I,g)},I.prototype.readlinkSync=function(I,g){return g=Q(g),I=m(I),this.readlinkBase(I,g.encoding)},I.prototype.readlink=function(I,g,C){g=(C=_(g,C))[0],C=C[1],I=m(I),this.wrapAsync(this.readlinkBase,[I,g.encoding],C)},I.prototype.fsyncBase=function(I){this.getFileByFdOrThrow(I,"fsync")},I.prototype.fsyncSync=function(I){this.fsyncBase(I)},I.prototype.fsync=function(I,g){this.wrapAsync(this.fsyncBase,[I],g)},I.prototype.fdatasyncBase=function(I){this.getFileByFdOrThrow(I,"fdatasync")},I.prototype.fdatasyncSync=function(I){this.fdatasyncBase(I)},I.prototype.fdatasync=function(I,g){this.wrapAsync(this.fdatasyncBase,[I],g)},I.prototype.ftruncateBase=function(I,g){this.getFileByFdOrThrow(I,"ftruncate").truncate(g)},I.prototype.ftruncateSync=function(I,g){this.ftruncateBase(I,g)},I.prototype.ftruncate=function(I,g,C){var A="number"===typeof g?g:0;g=u("number"===typeof g?C:g),this.wrapAsync(this.ftruncateBase,[I,A],g)},I.prototype.truncateBase=function(I,g){I=this.openSync(I,"r+");try{this.ftruncateSync(I,g)}finally{this.closeSync(I)}},I.prototype.truncateSync=function(I,g){if(I>>>0===I)return this.ftruncateSync(I,g);this.truncateBase(I,g)},I.prototype.truncate=function(I,g,C){var A="number"===typeof g?g:0;if(g=u("number"===typeof g?C:g),I>>>0===I)return this.ftruncate(I,A,g);this.wrapAsync(this.truncateBase,[I,A],g)},I.prototype.futimesBase=function(I,g,C){(I=this.getFileByFdOrThrow(I,"futimes").node).atime=new Date(1e3*g),I.mtime=new Date(1e3*C)},I.prototype.futimesSync=function(I,g,C){this.futimesBase(I,s(g),s(C))},I.prototype.futimes=function(I,g,C,A){this.wrapAsync(this.futimesBase,[I,s(g),s(C)],A)},I.prototype.utimesBase=function(I,g,C){I=this.openSync(I,"r+");try{this.futimesBase(I,g,C)}finally{this.closeSync(I)}},I.prototype.utimesSync=function(I,g,C){this.utimesBase(m(I),s(g),s(C))},I.prototype.utimes=function(I,g,C,A){this.wrapAsync(this.utimesBase,[m(I),s(g),s(C)],A)},I.prototype.mkdirBase=function(I,g){var C=e(I);if(!C.length)throw l("EISDIR","mkdir",I);var A=this.getLinkParentAsDirOrThrow(I,"mkdir");if(C=C[C.length-1],A.getChild(C))throw l("EEXIST","mkdir",I);A.createChild(C,this.createNode(!0,g))},I.prototype.mkdirpBase=function(I,g){I=e(I);for(var C=this.root,A=0;A<I.length;A++){var i=I[A];if(!C.getNode().isDirectory())throw l("ENOTDIR","mkdir",C.getPath());var c=C.getChild(i);if(c){if(!c.getNode().isDirectory())throw l("ENOTDIR","mkdir",c.getPath());C=c}else C=C.createChild(i,this.createNode(!0,g))}},I.prototype.mkdirSync=function(I,g){var C=h((g=c(g)).mode,511);I=m(I),g.recursive?this.mkdirpBase(I,C):this.mkdirBase(I,C)},I.prototype.mkdir=function(I,g,C){var A=c(g);g=u("function"===typeof g?g:C),C=h(A.mode,511),I=m(I),A.recursive?this.wrapAsync(this.mkdirpBase,[I,C],g):this.wrapAsync(this.mkdirBase,[I,C],g)},I.prototype.mkdirpSync=function(I,g){this.mkdirSync(I,{mode:g,recursive:!0})},I.prototype.mkdirp=function(I,g,C){var A="function"===typeof g?void 0:g;g=u("function"===typeof g?g:C),this.mkdir(I,{mode:A,recursive:!0},g)},I.prototype.mkdtempBase=function(I,g,C){void 0===C&&(C=5);var A=I+this.genRndStr();try{return this.mkdirBase(A,511),ug.strToEncoding(A,g)}catch(i){if("EEXIST"===i.code){if(1<C)return this.mkdtempBase(I,g,C-1);throw Error("Could not create temp dir.")}throw i}},I.prototype.mkdtempSync=function(I,g){if(g=Q(g).encoding,!I||"string"!==typeof I)throw new TypeError("filename prefix is required");return V(I),this.mkdtempBase(I,g)},I.prototype.mkdtemp=function(I,g,C){if(g=(C=_(g,C))[0].encoding,C=C[1],!I||"string"!==typeof I)throw new TypeError("filename prefix is required");V(I)&&this.wrapAsync(this.mkdtempBase,[I,g],C)},I.prototype.rmdirBase=function(I,g){g=F({},ZI,g);var C=this.getLinkAsDirOrThrow(I,"rmdir");if(C.length&&!g.recursive)throw l("ENOTEMPTY","rmdir",I);this.deleteLink(C)},I.prototype.rmdirSync=function(I,g){this.rmdirBase(m(I),g)},I.prototype.rmdir=function(I,g,C){var A=F({},ZI,g);g=u("function"===typeof g?g:C),this.wrapAsync(this.rmdirBase,[m(I),A],g)},I.prototype.fchmodBase=function(I,g){this.getFileByFdOrThrow(I,"fchmod").chmod(g)},I.prototype.fchmodSync=function(I,g){this.fchmodBase(I,h(g))},I.prototype.fchmod=function(I,g,C){this.wrapAsync(this.fchmodBase,[I,h(g)],C)},I.prototype.chmodBase=function(I,g){I=this.openSync(I,"r+");try{this.fchmodBase(I,g)}finally{this.closeSync(I)}},I.prototype.chmodSync=function(I,g){g=h(g),I=m(I),this.chmodBase(I,g)},I.prototype.chmod=function(I,g,C){g=h(g),I=m(I),this.wrapAsync(this.chmodBase,[I,g],C)},I.prototype.lchmodBase=function(I,g){I=this.openBase(I,x,0,!1);try{this.fchmodBase(I,g)}finally{this.closeSync(I)}},I.prototype.lchmodSync=function(I,g){g=h(g),I=m(I),this.lchmodBase(I,g)},I.prototype.lchmod=function(I,g,C){g=h(g),I=m(I),this.wrapAsync(this.lchmodBase,[I,g],C)},I.prototype.fchownBase=function(I,g,C){this.getFileByFdOrThrow(I,"fchown").chown(g,C)},I.prototype.fchownSync=function(I,g,C){r(g),Y(C),this.fchownBase(I,g,C)},I.prototype.fchown=function(I,g,C,A){r(g),Y(C),this.wrapAsync(this.fchownBase,[I,g,C],A)},I.prototype.chownBase=function(I,g,C){this.getResolvedLinkOrThrow(I,"chown").getNode().chown(g,C)},I.prototype.chownSync=function(I,g,C){r(g),Y(C),this.chownBase(m(I),g,C)},I.prototype.chown=function(I,g,C,A){r(g),Y(C),this.wrapAsync(this.chownBase,[m(I),g,C],A)},I.prototype.lchownBase=function(I,g,C){this.getLinkOrThrow(I,"lchown").getNode().chown(g,C)},I.prototype.lchownSync=function(I,g,C){r(g),Y(C),this.lchownBase(m(I),g,C)},I.prototype.lchown=function(I,g,C,A){r(g),Y(C),this.wrapAsync(this.lchownBase,[m(I),g,C],A)},I.prototype.watchFile=function(I,g,C){I=m(I);var A=g;if("function"===typeof A&&(C=g,A=null),"function"!==typeof C)throw Error('"watchFile()" requires a listener function');g=5007;var i=!0;return A&&"object"===typeof A&&("number"===typeof A.interval&&(g=A.interval),"boolean"===typeof A.persistent&&(i=A.persistent)),(A=this.statWatchers[I])||((A=new this.StatWatcher).start(I,i,g),this.statWatchers[I]=A),A.addListener("change",C),A},I.prototype.unwatchFile=function(I,g){I=m(I);var C=this.statWatchers[I];C&&("function"===typeof g?C.removeListener("change",g):C.removeAllListeners("change"),0===C.listenerCount("change")&&(C.stop(),delete this.statWatchers[I]))},I.prototype.createReadStream=function(I,g){return new this.ReadStream(I,g)},I.prototype.createWriteStream=function(I,g){return new this.WriteStream(I,g)},I.prototype.watch=function(I,g,C){I=m(I);var A=g;"function"===typeof g&&(C=g,A=null);var i=Q(A);g=i.persistent,A=i.recursive,i=i.encoding,void 0===g&&(g=!0),void 0===A&&(A=!1);var c=new this.FSWatcher;return c.start(I,g,A,i),C&&c.addListener("change",C),c},I.fd=2147483647,I}(),g.Volume=I;var mI,eI=function(I){function g(g){var C=I.call(this)||this;return C.onInterval=function(){try{var I=C.vol.statSync(C.filename);C.hasChanged(I)&&(C.emit("change",I,C.prev),C.prev=I)}finally{C.loop()}},C.vol=g,C}return R(g,I),g.prototype.loop=function(){this.timeoutRef=this.setTimeout(this.onInterval,this.interval)},g.prototype.hasChanged=function(I){return I.mtimeMs>this.prev.mtimeMs||I.nlink!==this.prev.nlink},g.prototype.start=function(I,g,C){void 0===g&&(g=!0),void 0===C&&(C=5007),this.filename=m(I),this.setTimeout=g?setTimeout:Jg.default,this.interval=C,this.prev=this.vol.statSync(this.filename),this.loop()},g.prototype.stop=function(){clearTimeout(this.timeoutRef),sg.default.nextTick(W,this)},g}(Yg.EventEmitter);g.StatWatcher=eI,DI.inherits(S,VC.Readable),g.ReadStream=S,S.prototype.open=function(){var I=this;this._vol.open(this.path,this.flags,this.mode,(function(g,C){g?(I.autoClose&&I.destroy&&I.destroy(),I.emit("error",g)):(I.fd=C,I.emit("open",C),I.read())}))},S.prototype._read=function(I){if("number"!==typeof this.fd)return this.once("open",(function(){this._read(I)}));if(!this.destroyed){(!mI||128>mI.length-mI.used)&&((mI=$.bufferAllocUnsafe(this._readableState.highWaterMark)).used=0);var g=mI,C=Math.min(mI.length-mI.used,I),A=mI.used;if(void 0!==this.pos&&(C=Math.min(this.end-this.pos+1,C)),0>=C)return this.push(null);var i=this;this._vol.read(this.fd,mI,mI.used,C,this.pos,(function(I,C){I?(i.autoClose&&i.destroy&&i.destroy(),i.emit("error",I)):(I=null,0<C&&(i.bytesRead+=C,I=g.slice(A,A+C)),i.push(I))})),void 0!==this.pos&&(this.pos+=C),mI.used+=C}},S.prototype._destroy=function(I,g){this.close((function(C){g(I||C)}))},S.prototype.close=function(I){var g=this;if(I&&this.once("close",I),this.closed||"number"!==typeof this.fd)return"number"!==typeof this.fd?void this.once("open",p):sg.default.nextTick((function(){return g.emit("close")}));this.closed=!0,this._vol.close(this.fd,(function(I){I?g.emit("error",I):g.emit("close")})),this.fd=null},DI.inherits(K,VC.Writable),g.WriteStream=K,K.prototype.open=function(){this._vol.open(this.path,this.flags,this.mode,function(I,g){I?(this.autoClose&&this.destroy&&this.destroy(),this.emit("error",I)):(this.fd=g,this.emit("open",g))}.bind(this))},K.prototype._write=function(I,g,C){if(!(I instanceof $.Buffer))return this.emit("error",Error("Invalid data"));if("number"!==typeof this.fd)return this.once("open",(function(){this._write(I,g,C)}));var A=this;this._vol.write(this.fd,I,0,I.length,this.pos,(function(I,g){if(I)return A.autoClose&&A.destroy&&A.destroy(),C(I);A.bytesWritten+=g,C()})),void 0!==this.pos&&(this.pos+=I.length)},K.prototype._writev=function(I,g){if("number"!==typeof this.fd)return this.once("open",(function(){this._writev(I,g)}));for(var C=this,A=I.length,i=Array(A),c=0,G=0;G<A;G++){var l=I[G].chunk;i[G]=l,c+=l.length}A=$.Buffer.concat(i),this._vol.write(this.fd,A,0,A.length,this.pos,(function(I,A){if(I)return C.destroy&&C.destroy(),g(I);C.bytesWritten+=A,g()})),void 0!==this.pos&&(this.pos+=c)},K.prototype._destroy=S.prototype._destroy,K.prototype.close=S.prototype.close,K.prototype.destroySoon=K.prototype.end;var BI=function(I){function g(g){var C=I.call(this)||this;return C._filename="",C._filenameEncoded="",C._recursive=!1,C._encoding=ug.ENCODING_UTF8,C._onNodeChange=function(){C._emit("change")},C._onParentChild=function(I){I.getName()===C._getName()&&C._emit("rename")},C._emit=function(I){C.emit("change",I,C._filenameEncoded)},C._persist=function(){C._timer=setTimeout(C._persist,1e6)},C._vol=g,C}return R(g,I),g.prototype._getName=function(){return this._steps[this._steps.length-1]},g.prototype.start=function(I,g,C,A){void 0===g&&(g=!0),void 0===C&&(C=!1),void 0===A&&(A=ug.ENCODING_UTF8),this._filename=m(I),this._steps=e(this._filename),this._filenameEncoded=ug.strToEncoding(this._filename),this._recursive=C,this._encoding=A;try{this._link=this._vol.getLinkOrThrow(this._filename,"FSWatcher")}catch(i){throw(g=Error("watch "+this._filename+" "+i.code)).code=i.code,g.errno=i.code,g}this._link.getNode().on("change",this._onNodeChange),this._link.on("child:add",this._onNodeChange),this._link.on("child:delete",this._onNodeChange),(I=this._link.parent)&&(I.setMaxListeners(I.getMaxListeners()+1),I.on("child:delete",this._onParentChild)),g&&this._persist()},g.prototype.close=function(){clearTimeout(this._timer),this._link.getNode().removeListener("change",this._onNodeChange);var I=this._link.parent;I&&I.removeListener("child:delete",this._onParentChild)},g}(Yg.EventEmitter);g.FSWatcher=BI}));l(gA);var CA=gA.pathToFilename,AA=gA.filenameToSteps,iA=gA.Volume,cA=b((function(I,g){Object.defineProperty(g,"__esModule",{value:!0}),g.fsProps="constants F_OK R_OK W_OK X_OK Stats".split(" "),g.fsSyncMethods="renameSync ftruncateSync truncateSync chownSync fchownSync lchownSync chmodSync fchmodSync lchmodSync statSync lstatSync fstatSync linkSync symlinkSync readlinkSync realpathSync unlinkSync rmdirSync mkdirSync mkdirpSync readdirSync closeSync openSync utimesSync futimesSync fsyncSync writeSync readSync readFileSync writeFileSync appendFileSync existsSync accessSync fdatasyncSync mkdtempSync copyFileSync createReadStream createWriteStream".split(" "),g.fsAsyncMethods="rename ftruncate truncate chown fchown lchown chmod fchmod lchmod stat lstat fstat link symlink readlink realpath unlink rmdir mkdir mkdirp readdir close open utimes futimes fsync write read readFile writeFile appendFile exists access fdatasync mkdtemp copyFile watchFile unwatchFile watch".split(" ")}));l(cA);var GA=b((function(I,g){function C(I){for(var g={F_OK:l,R_OK:b,W_OK:t,X_OK:n,constants:Z.constants,Stats:o.default,Dirent:dg.default},C=0,A=i;C<A.length;C++){var G=A[C];"function"===typeof I[G]&&(g[G]=I[G].bind(I))}for(C=0,A=c;C<A.length;C++)"function"===typeof I[G=A[C]]&&(g[G]=I[G].bind(I));return g.StatWatcher=I.StatWatcher,g.FSWatcher=I.FSWatcher,g.WriteStream=I.WriteStream,g.ReadStream=I.ReadStream,g.promises=I.promises,g._toUnixTimestamp=gA.toUnixTimestamp,g}var A=G&&G.__assign||function(){return A=Object.assign||function(I){for(var g,C=1,A=arguments.length;C<A;C++)for(var i in g=arguments[C])Object.prototype.hasOwnProperty.call(g,i)&&(I[i]=g[i]);return I},A.apply(this,arguments)};Object.defineProperty(g,"__esModule",{value:!0});var i=cA.fsSyncMethods,c=cA.fsAsyncMethods,l=Z.constants.F_OK,b=Z.constants.R_OK,t=Z.constants.W_OK,n=Z.constants.X_OK;g.Volume=gA.Volume,g.vol=new gA.Volume,g.createFsFromVolume=C,g.fs=C(g.vol),I.exports=A(A({},I.exports),g.fs),I.exports.semantic=!0}));l(GA);var lA=GA.createFsFromVolume;Hg.prototype.emit=function(I){for(var g,C,i=[],G=1;G<arguments.length;G++)i[G-1]=arguments[G];G=this.listeners(I);try{for(var l=A(G),b=l.next();!b.done;b=l.next()){var Z=b.value;try{Z.apply(void 0,c(i))}catch(t){console.error(t)}}}catch(t){g={error:t}}finally{try{b&&!b.done&&(C=l.return)&&C.call(l)}finally{if(g)throw g.error}}return 0<G.length};var bA=function(){function I(){this.volume=new iA,this.fs=lA(this.volume),this.fromJSON({"/dev/stdin":"","/dev/stdout":"","/dev/stderr":""})}return I.prototype._toJSON=function(I,g,C){void 0===g&&(g={});var A,i=!0;for(A in I.children){i=!1;var c=I.getChild(A);if(c){var G=c.getNode();G&&G.isFile()?(c=c.getPath(),C&&(c=Bg(C,c)),g[c]=G.getBuffer()):G&&G.isDirectory()&&this._toJSON(c,g,C)}}return I=I.getPath(),C&&(I=Bg(C,I)),I&&i&&(g[I]=null),g},I.prototype.toJSON=function(I,g,C){var i,c;void 0===g&&(g={}),void 0===C&&(C=!1);var G=[];if(I){I instanceof Array||(I=[I]);try{for(var l=A(I),b=l.next();!b.done;b=l.next()){var Z=CA(b.value),t=this.volume.getResolvedLink(Z);t&&G.push(t)}}catch(m){var o={error:m}}finally{try{b&&!b.done&&(i=l.return)&&i.call(l)}finally{if(o)throw o.error}}}else G.push(this.volume.root);if(!G.length)return g;try{for(var n=A(G),u=n.next();!u.done;u=n.next())t=u.value,this._toJSON(t,g,C?t.getPath():"")}catch(m){var d={error:m}}finally{try{u&&!u.done&&(c=n.return)&&c.call(n)}finally{if(d)throw d.error}}return g},I.prototype.fromJSONFixed=function(I,g){for(var C in g){var A=g[C];if(A?null!==Object.getPrototypeOf(A):null!==A){var i=AA(C);1<i.length&&(i="/"+i.slice(0,i.length-1).join("/"),I.mkdirpBase(i,511)),I.writeFileSync(C,A||"")}else I.mkdirpBase(C,511)}},I.prototype.fromJSON=function(I){this.volume=new iA,this.fromJSONFixed(this.volume,I),this.fs=lA(this.volume),this.volume.releasedFds=[0,1,2],I=this.volume.openSync("/dev/stderr","w");var g=this.volume.openSync("/dev/stdout","w"),C=this.volume.openSync("/dev/stdin","r");if(2!==I)throw Error("invalid handle for stderr: "+I);if(1!==g)throw Error("invalid handle for stdout: "+g);if(0!==C)throw Error("invalid handle for stdin: "+C)},I.prototype.getStdOut=function(){return function(I,g,C,A){return new(C||(C=Promise))((function(i,c){function G(I){try{b(A.next(I))}catch(g){c(g)}}function l(I){try{b(A.throw(I))}catch(g){c(g)}}function b(I){I.done?i(I.value):new C((function(g){g(I.value)})).then(G,l)}b((A=A.apply(I,g||[])).next())}))}(this,void 0,void 0,(function(){var I=this;return function(I,g){function C(I){return function(g){return A([I,g])}}function A(C){if(i)throw new TypeError("Generator is already executing.");for(;b;)try{if(i=1,c&&(G=2&C[0]?c.return:C[0]?c.throw||((G=c.return)&&G.call(c),0):c.next)&&!(G=G.call(c,C[1])).done)return G;switch(c=0,G&&(C=[2&C[0],G.value]),C[0]){case 0:case 1:G=C;break;case 4:return b.label++,{value:C[1],done:!1};case 5:b.label++,c=C[1],C=[0];continue;case 7:C=b.ops.pop(),b.trys.pop();continue;default:if(!(G=0<(G=b.trys).length&&G[G.length-1])&&(6===C[0]||2===C[0])){b=0;continue}if(3===C[0]&&(!G||C[1]>G[0]&&C[1]<G[3]))b.label=C[1];else if(6===C[0]&&b.label<G[1])b.label=G[1],G=C;else{if(!(G&&b.label<G[2])){G[2]&&b.ops.pop(),b.trys.pop();continue}b.label=G[2],b.ops.push(C)}}C=g.call(I,b)}catch(A){C=[6,A],c=0}finally{i=G=0}if(5&C[0])throw C[1];return{value:C[0]?C[1]:void 0,done:!0}}var i,c,G,l,b={label:0,sent:function(){if(1&G[0])throw G[1];return G[1]},trys:[],ops:[]};return l={next:C(0),throw:C(1),return:C(2)},"function"===typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l}(this,(function(){return[2,new Promise((function(g){g(I.fs.readFileSync("/dev/stdout","utf8"))}))]}))}))},I}();g.default=bA},650:function(I,g){"use strict";g.byteLength=function(I){var g=b(I),C=g[0],A=g[1];return 3*(C+A)/4-A},g.toByteArray=function(I){var g,C,c=b(I),G=c[0],l=c[1],Z=new i(function(I,g,C){return 3*(g+C)/4-C}(0,G,l)),t=0,o=l>0?G-4:G;for(C=0;C<o;C+=4)g=A[I.charCodeAt(C)]<<18|A[I.charCodeAt(C+1)]<<12|A[I.charCodeAt(C+2)]<<6|A[I.charCodeAt(C+3)],Z[t++]=g>>16&255,Z[t++]=g>>8&255,Z[t++]=255&g;2===l&&(g=A[I.charCodeAt(C)]<<2|A[I.charCodeAt(C+1)]>>4,Z[t++]=255&g);1===l&&(g=A[I.charCodeAt(C)]<<10|A[I.charCodeAt(C+1)]<<4|A[I.charCodeAt(C+2)]>>2,Z[t++]=g>>8&255,Z[t++]=255&g);return Z},g.fromByteArray=function(I){for(var g,A=I.length,i=A%3,c=[],G=16383,l=0,b=A-i;l<b;l+=G)c.push(Z(I,l,l+G>b?b:l+G));1===i?(g=I[A-1],c.push(C[g>>2]+C[g<<4&63]+"==")):2===i&&(g=(I[A-2]<<8)+I[A-1],c.push(C[g>>10]+C[g>>4&63]+C[g<<2&63]+"="));return c.join("")};for(var C=[],A=[],i="undefined"!==typeof Uint8Array?Uint8Array:Array,c="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",G=0,l=c.length;G<l;++G)C[G]=c[G],A[c.charCodeAt(G)]=G;function b(I){var g=I.length;if(g%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var C=I.indexOf("=");return-1===C&&(C=g),[C,C===g?0:4-C%4]}function Z(I,g,A){for(var i,c,G=[],l=g;l<A;l+=3)i=(I[l]<<16&16711680)+(I[l+1]<<8&65280)+(255&I[l+2]),G.push(C[(c=i)>>18&63]+C[c>>12&63]+C[c>>6&63]+C[63&c]);return G.join("")}A["-".charCodeAt(0)]=62,A["_".charCodeAt(0)]=63},2016:function(I,g,C){"use strict";var A=C(4837).default,i=C(7868).default,c=C(36).default,G=C(9823).default,l=C(6982).default,b=C(650),Z=C(3866),t="function"===typeof Symbol&&"function"===typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;g.Buffer=u,g.SlowBuffer=function(I){+I!=I&&(I=0);return u.alloc(+I)},g.INSPECT_MAX_BYTES=50;var o=2147483647;function n(I){if(I>o)throw new RangeError('The value "'+I+'" is invalid for option "size"');var g=new Uint8Array(I);return Object.setPrototypeOf(g,u.prototype),g}function u(I,g,C){if("number"===typeof I){if("string"===typeof g)throw new TypeError('The "string" argument must be of type string. Received type number');return e(I)}return d(I,g,C)}function d(I,g,C){if("string"===typeof I)return function(I,g){"string"===typeof g&&""!==g||(g="utf8");if(!u.isEncoding(g))throw new TypeError("Unknown encoding: "+g);var C=0|V(I,g),A=n(C),i=A.write(I,g);i!==C&&(A=A.slice(0,i));return A}(I,g);if(ArrayBuffer.isView(I))return function(I){if(II(I,Uint8Array)){var g=new Uint8Array(I);return X(g.buffer,g.byteOffset,g.byteLength)}return B(I)}(I);if(null==I)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof I);if(II(I,ArrayBuffer)||I&&II(I.buffer,ArrayBuffer))return X(I,g,C);if("undefined"!==typeof SharedArrayBuffer&&(II(I,SharedArrayBuffer)||I&&II(I.buffer,SharedArrayBuffer)))return X(I,g,C);if("number"===typeof I)throw new TypeError('The "value" argument must not be of type number. Received type number');var A=I.valueOf&&I.valueOf();if(null!=A&&A!==I)return u.from(A,g,C);var i=function(I){if(u.isBuffer(I)){var g=0|y(I.length),C=n(g);return 0===C.length||I.copy(C,0,0,g),C}if(void 0!==I.length)return"number"!==typeof I.length||gI(I.length)?n(0):B(I);if("Buffer"===I.type&&Array.isArray(I.data))return B(I.data)}(I);if(i)return i;if("undefined"!==typeof Symbol&&null!=Symbol.toPrimitive&&"function"===typeof I[Symbol.toPrimitive])return u.from(I[Symbol.toPrimitive]("string"),g,C);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof I)}function m(I){if("number"!==typeof I)throw new TypeError('"size" argument must be of type number');if(I<0)throw new RangeError('The value "'+I+'" is invalid for option "size"')}function e(I){return m(I),n(I<0?0:0|y(I))}function B(I){for(var g=I.length<0?0:0|y(I.length),C=n(g),A=0;A<g;A+=1)C[A]=255&I[A];return C}function X(I,g,C){if(g<0||I.byteLength<g)throw new RangeError('"offset" is outside of buffer bounds');if(I.byteLength<g+(C||0))throw new RangeError('"length" is outside of buffer bounds');var A;return A=void 0===g&&void 0===C?new Uint8Array(I):void 0===C?new Uint8Array(I,g):new Uint8Array(I,g,C),Object.setPrototypeOf(A,u.prototype),A}function y(I){if(I>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return 0|I}function V(I,g){if(u.isBuffer(I))return I.length;if(ArrayBuffer.isView(I)||II(I,ArrayBuffer))return I.byteLength;if("string"!==typeof I)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof I);var C=I.length,A=arguments.length>2&&!0===arguments[2];if(!A&&0===C)return 0;for(var i=!1;;)switch(g){case"ascii":case"latin1":case"binary":return C;case"utf8":case"utf-8":return Q(I).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*C;case"hex":return C>>>1;case"base64":return _(I).length;default:if(i)return A?-1:Q(I).length;g=(""+g).toLowerCase(),i=!0}}function h(I,g,C){var A=!1;if((void 0===g||g<0)&&(g=0),g>this.length)return"";if((void 0===C||C>this.length)&&(C=this.length),C<=0)return"";if((C>>>=0)<=(g>>>=0))return"";for(I||(I="utf8");;)switch(I){case"hex":return f(this,g,C);case"utf8":case"utf-8":return H(this,g,C);case"ascii":return F(this,g,C);case"latin1":case"binary":return w(this,g,C);case"base64":return R(this,g,C);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return v(this,g,C);default:if(A)throw new TypeError("Unknown encoding: "+I);I=(I+"").toLowerCase(),A=!0}}function a(I,g,C){var A=I[g];I[g]=I[C],I[C]=A}function s(I,g,C,A,i){if(0===I.length)return-1;if("string"===typeof C?(A=C,C=0):C>2147483647?C=2147483647:C<-2147483648&&(C=-2147483648),gI(C=+C)&&(C=i?0:I.length-1),C<0&&(C=I.length+C),C>=I.length){if(i)return-1;C=I.length-1}else if(C<0){if(!i)return-1;C=0}if("string"===typeof g&&(g=u.from(g,A)),u.isBuffer(g))return 0===g.length?-1:r(I,g,C,A,i);if("number"===typeof g)return g&=255,"function"===typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(I,g,C):Uint8Array.prototype.lastIndexOf.call(I,g,C):r(I,[g],C,A,i);throw new TypeError("val must be string, number or Buffer")}function r(I,g,C,A,i){var c,G=1,l=I.length,b=g.length;if(void 0!==A&&("ucs2"===(A=String(A).toLowerCase())||"ucs-2"===A||"utf16le"===A||"utf-16le"===A)){if(I.length<2||g.length<2)return-1;G=2,l/=2,b/=2,C/=2}function Z(I,g){return 1===G?I[g]:I.readUInt16BE(g*G)}if(i){var t=-1;for(c=C;c<l;c++)if(Z(I,c)===Z(g,-1===t?0:c-t)){if(-1===t&&(t=c),c-t+1===b)return t*G}else-1!==t&&(c-=c-t),t=-1}else for(C+b>l&&(C=l-b),c=C;c>=0;c--){for(var o=!0,n=0;n<b;n++)if(Z(I,c+n)!==Z(g,n)){o=!1;break}if(o)return c}return-1}function Y(I,g,C,A){C=Number(C)||0;var i=I.length-C;A?(A=Number(A))>i&&(A=i):A=i;var c,G=g.length;for(A>G/2&&(A=G/2),c=0;c<A;++c){var l=parseInt(g.substr(2*c,2),16);if(gI(l))return c;I[C+c]=l}return c}function W(I,g,C,A){return $(Q(g,I.length-C),I,C,A)}function S(I,g,C,A){return $(function(I){for(var g=[],C=0;C<I.length;++C)g.push(255&I.charCodeAt(C));return g}(g),I,C,A)}function p(I,g,C,A){return $(_(g),I,C,A)}function K(I,g,C,A){return $(function(I,g){for(var C,A,i,c=[],G=0;G<I.length&&!((g-=2)<0);++G)A=(C=I.charCodeAt(G))>>8,i=C%256,c.push(i),c.push(A);return c}(g,I.length-C),I,C,A)}function R(I,g,C){return 0===g&&C===I.length?b.fromByteArray(I):b.fromByteArray(I.slice(g,C))}function H(I,g,C){C=Math.min(I.length,C);for(var A=[],i=g;i<C;){var c=I[i],G=null,l=c>239?4:c>223?3:c>191?2:1;if(i+l<=C){var b=void 0,Z=void 0,t=void 0,o=void 0;switch(l){case 1:c<128&&(G=c);break;case 2:128===(192&(b=I[i+1]))&&(o=(31&c)<<6|63&b)>127&&(G=o);break;case 3:b=I[i+1],Z=I[i+2],128===(192&b)&&128===(192&Z)&&(o=(15&c)<<12|(63&b)<<6|63&Z)>2047&&(o<55296||o>57343)&&(G=o);break;case 4:b=I[i+1],Z=I[i+2],t=I[i+3],128===(192&b)&&128===(192&Z)&&128===(192&t)&&(o=(15&c)<<18|(63&b)<<12|(63&Z)<<6|63&t)>65535&&o<1114112&&(G=o)}}null===G?(G=65533,l=1):G>65535&&(G-=65536,A.push(G>>>10&1023|55296),G=56320|1023&G),A.push(G),i+=l}return function(I){var g=I.length;if(g<=J)return String.fromCharCode.apply(String,I);var C="",A=0;for(;A<g;)C+=String.fromCharCode.apply(String,I.slice(A,A+=J));return C}(A)}g.kMaxLength=o,u.TYPED_ARRAY_SUPPORT=function(){try{var I=new Uint8Array(1),g={foo:function(){return 42}};return Object.setPrototypeOf(g,Uint8Array.prototype),Object.setPrototypeOf(I,g),42===I.foo()}catch(C){return!1}}(),u.TYPED_ARRAY_SUPPORT||"undefined"===typeof console||"function"!==typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.byteOffset}}),u.poolSize=8192,u.from=function(I,g,C){return d(I,g,C)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array),u.alloc=function(I,g,C){return function(I,g,C){return m(I),I<=0?n(I):void 0!==g?"string"===typeof C?n(I).fill(g,C):n(I).fill(g):n(I)}(I,g,C)},u.allocUnsafe=function(I){return e(I)},u.allocUnsafeSlow=function(I){return e(I)},u.isBuffer=function(I){return null!=I&&!0===I._isBuffer&&I!==u.prototype},u.compare=function(I,g){if(II(I,Uint8Array)&&(I=u.from(I,I.offset,I.byteLength)),II(g,Uint8Array)&&(g=u.from(g,g.offset,g.byteLength)),!u.isBuffer(I)||!u.isBuffer(g))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(I===g)return 0;for(var C=I.length,A=g.length,i=0,c=Math.min(C,A);i<c;++i)if(I[i]!==g[i]){C=I[i],A=g[i];break}return C<A?-1:A<C?1:0},u.isEncoding=function(I){switch(String(I).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(I,g){if(!Array.isArray(I))throw new TypeError('"list" argument must be an Array of Buffers');if(0===I.length)return u.alloc(0);var C;if(void 0===g)for(g=0,C=0;C<I.length;++C)g+=I[C].length;var A=u.allocUnsafe(g),i=0;for(C=0;C<I.length;++C){var c=I[C];if(II(c,Uint8Array))i+c.length>A.length?(u.isBuffer(c)||(c=u.from(c)),c.copy(A,i)):Uint8Array.prototype.set.call(A,c,i);else{if(!u.isBuffer(c))throw new TypeError('"list" argument must be an Array of Buffers');c.copy(A,i)}i+=c.length}return A},u.byteLength=V,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var I=this.length;if(I%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var g=0;g<I;g+=2)a(this,g,g+1);return this},u.prototype.swap32=function(){var I=this.length;if(I%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var g=0;g<I;g+=4)a(this,g,g+3),a(this,g+1,g+2);return this},u.prototype.swap64=function(){var I=this.length;if(I%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var g=0;g<I;g+=8)a(this,g,g+7),a(this,g+1,g+6),a(this,g+2,g+5),a(this,g+3,g+4);return this},u.prototype.toString=function(){var I=this.length;return 0===I?"":0===arguments.length?H(this,0,I):h.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(I){if(!u.isBuffer(I))throw new TypeError("Argument must be a Buffer");return this===I||0===u.compare(this,I)},u.prototype.inspect=function(){var I="",C=g.INSPECT_MAX_BYTES;return I=this.toString("hex",0,C).replace(/(.{2})/g,"$1 ").trim(),this.length>C&&(I+=" ... "),"<Buffer "+I+">"},t&&(u.prototype[t]=u.prototype.inspect),u.prototype.compare=function(I,g,C,A,i){if(II(I,Uint8Array)&&(I=u.from(I,I.offset,I.byteLength)),!u.isBuffer(I))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof I);if(void 0===g&&(g=0),void 0===C&&(C=I?I.length:0),void 0===A&&(A=0),void 0===i&&(i=this.length),g<0||C>I.length||A<0||i>this.length)throw new RangeError("out of range index");if(A>=i&&g>=C)return 0;if(A>=i)return-1;if(g>=C)return 1;if(this===I)return 0;for(var c=(i>>>=0)-(A>>>=0),G=(C>>>=0)-(g>>>=0),l=Math.min(c,G),b=this.slice(A,i),Z=I.slice(g,C),t=0;t<l;++t)if(b[t]!==Z[t]){c=b[t],G=Z[t];break}return c<G?-1:G<c?1:0},u.prototype.includes=function(I,g,C){return-1!==this.indexOf(I,g,C)},u.prototype.indexOf=function(I,g,C){return s(this,I,g,C,!0)},u.prototype.lastIndexOf=function(I,g,C){return s(this,I,g,C,!1)},u.prototype.write=function(I,g,C,A){if(void 0===g)A="utf8",C=this.length,g=0;else if(void 0===C&&"string"===typeof g)A=g,C=this.length,g=0;else{if(!isFinite(g))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");g>>>=0,isFinite(C)?(C>>>=0,void 0===A&&(A="utf8")):(A=C,C=void 0)}var i=this.length-g;if((void 0===C||C>i)&&(C=i),I.length>0&&(C<0||g<0)||g>this.length)throw new RangeError("Attempt to write outside buffer bounds");A||(A="utf8");for(var c=!1;;)switch(A){case"hex":return Y(this,I,g,C);case"utf8":case"utf-8":return W(this,I,g,C);case"ascii":case"latin1":case"binary":return S(this,I,g,C);case"base64":return p(this,I,g,C);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return K(this,I,g,C);default:if(c)throw new TypeError("Unknown encoding: "+A);A=(""+A).toLowerCase(),c=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var J=4096;function F(I,g,C){var A="";C=Math.min(I.length,C);for(var i=g;i<C;++i)A+=String.fromCharCode(127&I[i]);return A}function w(I,g,C){var A="";C=Math.min(I.length,C);for(var i=g;i<C;++i)A+=String.fromCharCode(I[i]);return A}function f(I,g,C){var A=I.length;(!g||g<0)&&(g=0),(!C||C<0||C>A)&&(C=A);for(var i="",c=g;c<C;++c)i+=CI[I[c]];return i}function v(I,g,C){for(var A=I.slice(g,C),i="",c=0;c<A.length-1;c+=2)i+=String.fromCharCode(A[c]+256*A[c+1]);return i}function x(I,g,C){if(I%1!==0||I<0)throw new RangeError("offset is not uint");if(I+g>C)throw new RangeError("Trying to access beyond buffer length")}function N(I,g,C,A,i,c){if(!u.isBuffer(I))throw new TypeError('"buffer" argument must be a Buffer instance');if(g>i||g<c)throw new RangeError('"value" argument is out of bounds');if(C+A>I.length)throw new RangeError("Index out of range")}function L(I,g,C,A,i){O(g,A,i,I,C,7);var c=Number(g&BigInt(4294967295));I[C++]=c,c>>=8,I[C++]=c,c>>=8,I[C++]=c,c>>=8,I[C++]=c;var G=Number(g>>BigInt(32)&BigInt(4294967295));return I[C++]=G,G>>=8,I[C++]=G,G>>=8,I[C++]=G,G>>=8,I[C++]=G,C}function k(I,g,C,A,i){O(g,A,i,I,C,7);var c=Number(g&BigInt(4294967295));I[C+7]=c,c>>=8,I[C+6]=c,c>>=8,I[C+5]=c,c>>=8,I[C+4]=c;var G=Number(g>>BigInt(32)&BigInt(4294967295));return I[C+3]=G,G>>=8,I[C+2]=G,G>>=8,I[C+1]=G,G>>=8,I[C]=G,C+8}function T(I,g,C,A,i,c){if(C+A>I.length)throw new RangeError("Index out of range");if(C<0)throw new RangeError("Index out of range")}function U(I,g,C,A,i){return g=+g,C>>>=0,i||T(I,0,C,4),Z.write(I,g,C,A,23,4),C+4}function z(I,g,C,A,i){return g=+g,C>>>=0,i||T(I,0,C,8),Z.write(I,g,C,A,52,8),C+8}u.prototype.slice=function(I,g){var C=this.length;(I=~~I)<0?(I+=C)<0&&(I=0):I>C&&(I=C),(g=void 0===g?C:~~g)<0?(g+=C)<0&&(g=0):g>C&&(g=C),g<I&&(g=I);var A=this.subarray(I,g);return Object.setPrototypeOf(A,u.prototype),A},u.prototype.readUintLE=u.prototype.readUIntLE=function(I,g,C){I>>>=0,g>>>=0,C||x(I,g,this.length);for(var A=this[I],i=1,c=0;++c<g&&(i*=256);)A+=this[I+c]*i;return A},u.prototype.readUintBE=u.prototype.readUIntBE=function(I,g,C){I>>>=0,g>>>=0,C||x(I,g,this.length);for(var A=this[I+--g],i=1;g>0&&(i*=256);)A+=this[I+--g]*i;return A},u.prototype.readUint8=u.prototype.readUInt8=function(I,g){return I>>>=0,g||x(I,1,this.length),this[I]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(I,g){return I>>>=0,g||x(I,2,this.length),this[I]|this[I+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(I,g){return I>>>=0,g||x(I,2,this.length),this[I]<<8|this[I+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(I,g){return I>>>=0,g||x(I,4,this.length),(this[I]|this[I+1]<<8|this[I+2]<<16)+16777216*this[I+3]},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(I,g){return I>>>=0,g||x(I,4,this.length),16777216*this[I]+(this[I+1]<<16|this[I+2]<<8|this[I+3])},u.prototype.readBigUInt64LE=AI((function(I){P(I>>>=0,"offset");var g=this[I],C=this[I+7];void 0!==g&&void 0!==C||q(I,this.length-8);var A=g+this[++I]*Math.pow(2,8)+this[++I]*Math.pow(2,16)+this[++I]*Math.pow(2,24),i=this[++I]+this[++I]*Math.pow(2,8)+this[++I]*Math.pow(2,16)+C*Math.pow(2,24);return BigInt(A)+(BigInt(i)<<BigInt(32))})),u.prototype.readBigUInt64BE=AI((function(I){P(I>>>=0,"offset");var g=this[I],C=this[I+7];void 0!==g&&void 0!==C||q(I,this.length-8);var A=g*Math.pow(2,24)+this[++I]*Math.pow(2,16)+this[++I]*Math.pow(2,8)+this[++I],i=this[++I]*Math.pow(2,24)+this[++I]*Math.pow(2,16)+this[++I]*Math.pow(2,8)+C;return(BigInt(A)<<BigInt(32))+BigInt(i)})),u.prototype.readIntLE=function(I,g,C){I>>>=0,g>>>=0,C||x(I,g,this.length);for(var A=this[I],i=1,c=0;++c<g&&(i*=256);)A+=this[I+c]*i;return A>=(i*=128)&&(A-=Math.pow(2,8*g)),A},u.prototype.readIntBE=function(I,g,C){I>>>=0,g>>>=0,C||x(I,g,this.length);for(var A=g,i=1,c=this[I+--A];A>0&&(i*=256);)c+=this[I+--A]*i;return c>=(i*=128)&&(c-=Math.pow(2,8*g)),c},u.prototype.readInt8=function(I,g){return I>>>=0,g||x(I,1,this.length),128&this[I]?-1*(255-this[I]+1):this[I]},u.prototype.readInt16LE=function(I,g){I>>>=0,g||x(I,2,this.length);var C=this[I]|this[I+1]<<8;return 32768&C?4294901760|C:C},u.prototype.readInt16BE=function(I,g){I>>>=0,g||x(I,2,this.length);var C=this[I+1]|this[I]<<8;return 32768&C?4294901760|C:C},u.prototype.readInt32LE=function(I,g){return I>>>=0,g||x(I,4,this.length),this[I]|this[I+1]<<8|this[I+2]<<16|this[I+3]<<24},u.prototype.readInt32BE=function(I,g){return I>>>=0,g||x(I,4,this.length),this[I]<<24|this[I+1]<<16|this[I+2]<<8|this[I+3]},u.prototype.readBigInt64LE=AI((function(I){P(I>>>=0,"offset");var g=this[I],C=this[I+7];void 0!==g&&void 0!==C||q(I,this.length-8);var A=this[I+4]+this[I+5]*Math.pow(2,8)+this[I+6]*Math.pow(2,16)+(C<<24);return(BigInt(A)<<BigInt(32))+BigInt(g+this[++I]*Math.pow(2,8)+this[++I]*Math.pow(2,16)+this[++I]*Math.pow(2,24))})),u.prototype.readBigInt64BE=AI((function(I){P(I>>>=0,"offset");var g=this[I],C=this[I+7];void 0!==g&&void 0!==C||q(I,this.length-8);var A=(g<<24)+this[++I]*Math.pow(2,16)+this[++I]*Math.pow(2,8)+this[++I];return(BigInt(A)<<BigInt(32))+BigInt(this[++I]*Math.pow(2,24)+this[++I]*Math.pow(2,16)+this[++I]*Math.pow(2,8)+C)})),u.prototype.readFloatLE=function(I,g){return I>>>=0,g||x(I,4,this.length),Z.read(this,I,!0,23,4)},u.prototype.readFloatBE=function(I,g){return I>>>=0,g||x(I,4,this.length),Z.read(this,I,!1,23,4)},u.prototype.readDoubleLE=function(I,g){return I>>>=0,g||x(I,8,this.length),Z.read(this,I,!0,52,8)},u.prototype.readDoubleBE=function(I,g){return I>>>=0,g||x(I,8,this.length),Z.read(this,I,!1,52,8)},u.prototype.writeUintLE=u.prototype.writeUIntLE=function(I,g,C,A){(I=+I,g>>>=0,C>>>=0,A)||N(this,I,g,C,Math.pow(2,8*C)-1,0);var i=1,c=0;for(this[g]=255&I;++c<C&&(i*=256);)this[g+c]=I/i&255;return g+C},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(I,g,C,A){(I=+I,g>>>=0,C>>>=0,A)||N(this,I,g,C,Math.pow(2,8*C)-1,0);var i=C-1,c=1;for(this[g+i]=255&I;--i>=0&&(c*=256);)this[g+i]=I/c&255;return g+C},u.prototype.writeUint8=u.prototype.writeUInt8=function(I,g,C){return I=+I,g>>>=0,C||N(this,I,g,1,255,0),this[g]=255&I,g+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(I,g,C){return I=+I,g>>>=0,C||N(this,I,g,2,65535,0),this[g]=255&I,this[g+1]=I>>>8,g+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(I,g,C){return I=+I,g>>>=0,C||N(this,I,g,2,65535,0),this[g]=I>>>8,this[g+1]=255&I,g+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(I,g,C){return I=+I,g>>>=0,C||N(this,I,g,4,4294967295,0),this[g+3]=I>>>24,this[g+2]=I>>>16,this[g+1]=I>>>8,this[g]=255&I,g+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(I,g,C){return I=+I,g>>>=0,C||N(this,I,g,4,4294967295,0),this[g]=I>>>24,this[g+1]=I>>>16,this[g+2]=I>>>8,this[g+3]=255&I,g+4},u.prototype.writeBigUInt64LE=AI((function(I){var g=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return L(this,I,g,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeBigUInt64BE=AI((function(I){var g=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return k(this,I,g,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeIntLE=function(I,g,C,A){if(I=+I,g>>>=0,!A){var i=Math.pow(2,8*C-1);N(this,I,g,C,i-1,-i)}var c=0,G=1,l=0;for(this[g]=255&I;++c<C&&(G*=256);)I<0&&0===l&&0!==this[g+c-1]&&(l=1),this[g+c]=(I/G>>0)-l&255;return g+C},u.prototype.writeIntBE=function(I,g,C,A){if(I=+I,g>>>=0,!A){var i=Math.pow(2,8*C-1);N(this,I,g,C,i-1,-i)}var c=C-1,G=1,l=0;for(this[g+c]=255&I;--c>=0&&(G*=256);)I<0&&0===l&&0!==this[g+c+1]&&(l=1),this[g+c]=(I/G>>0)-l&255;return g+C},u.prototype.writeInt8=function(I,g,C){return I=+I,g>>>=0,C||N(this,I,g,1,127,-128),I<0&&(I=255+I+1),this[g]=255&I,g+1},u.prototype.writeInt16LE=function(I,g,C){return I=+I,g>>>=0,C||N(this,I,g,2,32767,-32768),this[g]=255&I,this[g+1]=I>>>8,g+2},u.prototype.writeInt16BE=function(I,g,C){return I=+I,g>>>=0,C||N(this,I,g,2,32767,-32768),this[g]=I>>>8,this[g+1]=255&I,g+2},u.prototype.writeInt32LE=function(I,g,C){return I=+I,g>>>=0,C||N(this,I,g,4,2147483647,-2147483648),this[g]=255&I,this[g+1]=I>>>8,this[g+2]=I>>>16,this[g+3]=I>>>24,g+4},u.prototype.writeInt32BE=function(I,g,C){return I=+I,g>>>=0,C||N(this,I,g,4,2147483647,-2147483648),I<0&&(I=4294967295+I+1),this[g]=I>>>24,this[g+1]=I>>>16,this[g+2]=I>>>8,this[g+3]=255&I,g+4},u.prototype.writeBigInt64LE=AI((function(I){var g=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return L(this,I,g,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeBigInt64BE=AI((function(I){var g=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return k(this,I,g,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeFloatLE=function(I,g,C){return U(this,I,g,!0,C)},u.prototype.writeFloatBE=function(I,g,C){return U(this,I,g,!1,C)},u.prototype.writeDoubleLE=function(I,g,C){return z(this,I,g,!0,C)},u.prototype.writeDoubleBE=function(I,g,C){return z(this,I,g,!1,C)},u.prototype.copy=function(I,g,C,A){if(!u.isBuffer(I))throw new TypeError("argument should be a Buffer");if(C||(C=0),A||0===A||(A=this.length),g>=I.length&&(g=I.length),g||(g=0),A>0&&A<C&&(A=C),A===C)return 0;if(0===I.length||0===this.length)return 0;if(g<0)throw new RangeError("targetStart out of bounds");if(C<0||C>=this.length)throw new RangeError("Index out of range");if(A<0)throw new RangeError("sourceEnd out of bounds");A>this.length&&(A=this.length),I.length-g<A-C&&(A=I.length-g+C);var i=A-C;return this===I&&"function"===typeof Uint8Array.prototype.copyWithin?this.copyWithin(g,C,A):Uint8Array.prototype.set.call(I,this.subarray(C,A),g),i},u.prototype.fill=function(I,g,C,A){if("string"===typeof I){if("string"===typeof g?(A=g,g=0,C=this.length):"string"===typeof C&&(A=C,C=this.length),void 0!==A&&"string"!==typeof A)throw new TypeError("encoding must be a string");if("string"===typeof A&&!u.isEncoding(A))throw new TypeError("Unknown encoding: "+A);if(1===I.length){var i=I.charCodeAt(0);("utf8"===A&&i<128||"latin1"===A)&&(I=i)}}else"number"===typeof I?I&=255:"boolean"===typeof I&&(I=Number(I));if(g<0||this.length<g||this.length<C)throw new RangeError("Out of range index");if(C<=g)return this;var c;if(g>>>=0,C=void 0===C?this.length:C>>>0,I||(I=0),"number"===typeof I)for(c=g;c<C;++c)this[c]=I;else{var G=u.isBuffer(I)?I:u.from(I,A),l=G.length;if(0===l)throw new TypeError('The value "'+I+'" is invalid for argument "value"');for(c=0;c<C-g;++c)this[c+g]=G[c%l]}return this};var E={};function M(I,g,C){E[I]=function(C){G(Z,C);var b=l(Z);function Z(){var C;return A(this,Z),C=b.call(this),Object.defineProperty(c(C),"message",{value:g.apply(c(C),arguments),writable:!0,configurable:!0}),C.name="".concat(C.name," [").concat(I,"]"),C.stack,delete C.name,C}return i(Z,[{key:"code",get:function(){return I},set:function(I){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:I,writable:!0})}},{key:"toString",value:function(){return"".concat(this.name," [").concat(I,"]: ").concat(this.message)}}]),Z}(C)}function D(I){for(var g="",C=I.length,A="-"===I[0]?1:0;C>=A+4;C-=3)g="_".concat(I.slice(C-3,C)).concat(g);return"".concat(I.slice(0,C)).concat(g)}function O(I,g,C,A,i,c){if(I>C||I<g){var G,l="bigint"===typeof g?"n":"";throw G=c>3?0===g||g===BigInt(0)?">= 0".concat(l," and < 2").concat(l," ** ").concat(8*(c+1)).concat(l):">= -(2".concat(l," ** ").concat(8*(c+1)-1).concat(l,") and < 2 ** ")+"".concat(8*(c+1)-1).concat(l):">= ".concat(g).concat(l," and <= ").concat(C).concat(l),new E.ERR_OUT_OF_RANGE("value",G,I)}!function(I,g,C){P(g,"offset"),void 0!==I[g]&&void 0!==I[g+C]||q(g,I.length-(C+1))}(A,i,c)}function P(I,g){if("number"!==typeof I)throw new E.ERR_INVALID_ARG_TYPE(g,"number",I)}function q(I,g,C){if(Math.floor(I)!==I)throw P(I,C),new E.ERR_OUT_OF_RANGE(C||"offset","an integer",I);if(g<0)throw new E.ERR_BUFFER_OUT_OF_BOUNDS;throw new E.ERR_OUT_OF_RANGE(C||"offset",">= ".concat(C?1:0," and <= ").concat(g),I)}M("ERR_BUFFER_OUT_OF_BOUNDS",(function(I){return I?"".concat(I," is outside of buffer bounds"):"Attempt to access memory outside buffer bounds"}),RangeError),M("ERR_INVALID_ARG_TYPE",(function(I,g){return'The "'.concat(I,'" argument must be of type number. Received type ').concat(typeof g)}),TypeError),M("ERR_OUT_OF_RANGE",(function(I,g,C){var A='The value of "'.concat(I,'" is out of range.'),i=C;return Number.isInteger(C)&&Math.abs(C)>Math.pow(2,32)?i=D(String(C)):"bigint"===typeof C&&(i=String(C),(C>Math.pow(BigInt(2),BigInt(32))||C<-Math.pow(BigInt(2),BigInt(32)))&&(i=D(i)),i+="n"),A+=" It must be ".concat(g,". Received ").concat(i)}),RangeError);var j=/[^+/0-9A-Za-z-_]/g;function Q(I,g){var C;g=g||1/0;for(var A=I.length,i=null,c=[],G=0;G<A;++G){if((C=I.charCodeAt(G))>55295&&C<57344){if(!i){if(C>56319){(g-=3)>-1&&c.push(239,191,189);continue}if(G+1===A){(g-=3)>-1&&c.push(239,191,189);continue}i=C;continue}if(C<56320){(g-=3)>-1&&c.push(239,191,189),i=C;continue}C=65536+(i-55296<<10|C-56320)}else i&&(g-=3)>-1&&c.push(239,191,189);if(i=null,C<128){if((g-=1)<0)break;c.push(C)}else if(C<2048){if((g-=2)<0)break;c.push(C>>6|192,63&C|128)}else if(C<65536){if((g-=3)<0)break;c.push(C>>12|224,C>>6&63|128,63&C|128)}else{if(!(C<1114112))throw new Error("Invalid code point");if((g-=4)<0)break;c.push(C>>18|240,C>>12&63|128,C>>6&63|128,63&C|128)}}return c}function _(I){return b.toByteArray(function(I){if((I=(I=I.split("=")[0]).trim().replace(j,"")).length<2)return"";for(;I.length%4!==0;)I+="=";return I}(I))}function $(I,g,C,A){var i;for(i=0;i<A&&!(i+C>=g.length||i>=I.length);++i)g[i+C]=I[i];return i}function II(I,g){return I instanceof g||null!=I&&null!=I.constructor&&null!=I.constructor.name&&I.constructor.name===g.name}function gI(I){return I!==I}var CI=function(){for(var I="0123456789abcdef",g=new Array(256),C=0;C<16;++C)for(var A=16*C,i=0;i<16;++i)g[A+i]=I[C]+I[i];return g}();function AI(I){return"undefined"===typeof BigInt?iI:I}function iI(){throw new Error("BigInt not supported")}},6087:function(I,g,C){g.formatArgs=function(g){if(g[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+g[0]+(this.useColors?"%c ":" ")+"+"+I.exports.humanize(this.diff),!this.useColors)return;var C="color: "+this.color;g.splice(1,0,C,"color: inherit");var A=0,i=0;g[0].replace(/%[a-zA-Z%]/g,(function(I){"%%"!==I&&(A++,"%c"===I&&(i=A))})),g.splice(i,0,C)},g.save=function(I){try{I?g.storage.setItem("debug",I):g.storage.removeItem("debug")}catch(C){}},g.load=function(){var I;try{I=g.storage.getItem("debug")}catch(C){}!I&&"undefined"!==typeof process&&"env"in process&&(I={NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}.DEBUG);return I},g.useColors=function(){if("undefined"!==typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!==typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!==typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!==typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!==typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!==typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},g.storage=function(){try{return localStorage}catch(I){}}(),g.destroy=function(){var I=!1;return function(){I||(I=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}}(),g.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],g.log=console.debug||console.log||function(){},I.exports=C(8053)(g),I.exports.formatters.j=function(I){try{return JSON.stringify(I)}catch(g){return"[UnexpectedJSONParseError]: "+g.message}}},8053:function(I,g,C){var A=C(7329).default;I.exports=function(I){function g(I){var C,A,c,G=null;function l(){for(var I=arguments.length,A=new Array(I),i=0;i<I;i++)A[i]=arguments[i];if(l.enabled){var c=l,G=Number(new Date),b=G-(C||G);c.diff=b,c.prev=C,c.curr=G,C=G,A[0]=g.coerce(A[0]),"string"!==typeof A[0]&&A.unshift("%O");var Z=0;A[0]=A[0].replace(/%([a-zA-Z%])/g,(function(I,C){if("%%"===I)return"%";Z++;var i=g.formatters[C];if("function"===typeof i){var G=A[Z];I=i.call(c,G),A.splice(Z,1),Z--}return I})),g.formatArgs.call(c,A);var t=c.log||g.log;t.apply(c,A)}}return l.namespace=I,l.useColors=g.useColors(),l.color=g.selectColor(I),l.extend=i,l.destroy=g.destroy,Object.defineProperty(l,"enabled",{enumerable:!0,configurable:!1,get:function(){return null!==G?G:(A!==g.namespaces&&(A=g.namespaces,c=g.enabled(I)),c)},set:function(I){G=I}}),"function"===typeof g.init&&g.init(l),l}function i(I,C){var A=g(this.namespace+("undefined"===typeof C?":":C)+I);return A.log=this.log,A}function c(I){return I.toString().substring(2,I.toString().length-2).replace(/\.\*\?$/,"*")}return g.debug=g,g.default=g,g.coerce=function(I){if(I instanceof Error)return I.stack||I.message;return I},g.disable=function(){var I=[].concat(A(g.names.map(c)),A(g.skips.map(c).map((function(I){return"-"+I})))).join(",");return g.enable(""),I},g.enable=function(I){var C;g.save(I),g.namespaces=I,g.names=[],g.skips=[];var A=("string"===typeof I?I:"").split(/[\s,]+/),i=A.length;for(C=0;C<i;C++)A[C]&&("-"===(I=A[C].replace(/\*/g,".*?"))[0]?g.skips.push(new RegExp("^"+I.slice(1)+"$")):g.names.push(new RegExp("^"+I+"$")))},g.enabled=function(I){if("*"===I[I.length-1])return!0;var C,A;for(C=0,A=g.skips.length;C<A;C++)if(g.skips[C].test(I))return!1;for(C=0,A=g.names.length;C<A;C++)if(g.names[C].test(I))return!0;return!1},g.humanize=C(5183),g.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(I).forEach((function(C){g[C]=I[C]})),g.names=[],g.skips=[],g.formatters={},g.selectColor=function(I){for(var C=0,A=0;A<I.length;A++)C=(C<<5)-C+I.charCodeAt(A),C|=0;return g.colors[Math.abs(C)%g.colors.length]},g.enable(g.load()),g}},3866:function(I,g){g.read=function(I,g,C,A,i){var c,G,l=8*i-A-1,b=(1<<l)-1,Z=b>>1,t=-7,o=C?i-1:0,n=C?-1:1,u=I[g+o];for(o+=n,c=u&(1<<-t)-1,u>>=-t,t+=l;t>0;c=256*c+I[g+o],o+=n,t-=8);for(G=c&(1<<-t)-1,c>>=-t,t+=A;t>0;G=256*G+I[g+o],o+=n,t-=8);if(0===c)c=1-Z;else{if(c===b)return G?NaN:1/0*(u?-1:1);G+=Math.pow(2,A),c-=Z}return(u?-1:1)*G*Math.pow(2,c-A)},g.write=function(I,g,C,A,i,c){var G,l,b,Z=8*c-i-1,t=(1<<Z)-1,o=t>>1,n=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,u=A?0:c-1,d=A?1:-1,m=g<0||0===g&&1/g<0?1:0;for(g=Math.abs(g),isNaN(g)||g===1/0?(l=isNaN(g)?1:0,G=t):(G=Math.floor(Math.log(g)/Math.LN2),g*(b=Math.pow(2,-G))<1&&(G--,b*=2),(g+=G+o>=1?n/b:n*Math.pow(2,1-o))*b>=2&&(G++,b/=2),G+o>=t?(l=0,G=t):G+o>=1?(l=(g*b-1)*Math.pow(2,i),G+=o):(l=g*Math.pow(2,o-1)*Math.pow(2,i),G=0));i>=8;I[C+u]=255&l,u+=d,l/=256,i-=8);for(G=G<<i|l,Z+=i;Z>0;I[C+u]=255&G,u+=d,G/=256,Z-=8);I[C+u-d]|=128*m}},8732:function(I){"use strict";I.exports=function(I){return!!I&&("symbol"===typeof Symbol.observable&&"function"===typeof I[Symbol.observable]?I===I[Symbol.observable]():"function"===typeof I["@@observable"]&&I===I["@@observable"]())}},8698:function(I,g,C){"undefined"!==typeof self?self:"undefined"!==typeof window?window:"undefined"!==typeof C.g&&C.g,I.exports=function(){"use strict";var I="3.7.3",g=I,C="function"===typeof atob,A="function"===typeof btoa,i="function"===typeof Buffer,c="function"===typeof TextDecoder?new TextDecoder:void 0,G="function"===typeof TextEncoder?new TextEncoder:void 0,l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",b=Array.prototype.slice.call(l),Z=function(I){var g={};return I.forEach((function(I,C){return g[I]=C})),g}(b),t=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,o=String.fromCharCode.bind(String),n="function"===typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):function(I,g){return void 0===g&&(g=function(I){return I}),new Uint8Array(Array.prototype.slice.call(I,0).map(g))},u=function(I){return I.replace(/=/g,"").replace(/[+\/]/g,(function(I){return"+"==I?"-":"_"}))},d=function(I){return I.replace(/[^A-Za-z0-9\+\/]/g,"")},m=function(I){for(var g,C,A,i,c="",G=I.length%3,l=0;l<I.length;){if((C=I.charCodeAt(l++))>255||(A=I.charCodeAt(l++))>255||(i=I.charCodeAt(l++))>255)throw new TypeError("invalid character found");c+=b[(g=C<<16|A<<8|i)>>18&63]+b[g>>12&63]+b[g>>6&63]+b[63&g]}return G?c.slice(0,G-3)+"===".substring(G):c},e=A?function(I){return btoa(I)}:i?function(I){return Buffer.from(I,"binary").toString("base64")}:m,B=i?function(I){return Buffer.from(I).toString("base64")}:function(I){for(var g=4096,C=[],A=0,i=I.length;A<i;A+=g)C.push(o.apply(null,I.subarray(A,A+g)));return e(C.join(""))},X=function(I,g){return void 0===g&&(g=!1),g?u(B(I)):B(I)},y=function(I){if(I.length<2)return(g=I.charCodeAt(0))<128?I:g<2048?o(192|g>>>6)+o(128|63&g):o(224|g>>>12&15)+o(128|g>>>6&63)+o(128|63&g);var g=65536+1024*(I.charCodeAt(0)-55296)+(I.charCodeAt(1)-56320);return o(240|g>>>18&7)+o(128|g>>>12&63)+o(128|g>>>6&63)+o(128|63&g)},V=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,h=function(I){return I.replace(V,y)},a=i?function(I){return Buffer.from(I,"utf8").toString("base64")}:G?function(I){return B(G.encode(I))}:function(I){return e(h(I))},s=function(I,g){return void 0===g&&(g=!1),g?u(a(I)):a(I)},r=function(I){return s(I,!0)},Y=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,W=function(I){switch(I.length){case 4:var g=((7&I.charCodeAt(0))<<18|(63&I.charCodeAt(1))<<12|(63&I.charCodeAt(2))<<6|63&I.charCodeAt(3))-65536;return o(55296+(g>>>10))+o(56320+(1023&g));case 3:return o((15&I.charCodeAt(0))<<12|(63&I.charCodeAt(1))<<6|63&I.charCodeAt(2));default:return o((31&I.charCodeAt(0))<<6|63&I.charCodeAt(1))}},S=function(I){return I.replace(Y,W)},p=function(I){if(I=I.replace(/\s+/g,""),!t.test(I))throw new TypeError("malformed base64.");I+="==".slice(2-(3&I.length));for(var g,C,A,i="",c=0;c<I.length;)g=Z[I.charAt(c++)]<<18|Z[I.charAt(c++)]<<12|(C=Z[I.charAt(c++)])<<6|(A=Z[I.charAt(c++)]),i+=64===C?o(g>>16&255):64===A?o(g>>16&255,g>>8&255):o(g>>16&255,g>>8&255,255&g);return i},K=C?function(I){return atob(d(I))}:i?function(I){return Buffer.from(I,"base64").toString("binary")}:p,R=i?function(I){return n(Buffer.from(I,"base64"))}:function(I){return n(K(I),(function(I){return I.charCodeAt(0)}))},H=function(I){return R(F(I))},J=i?function(I){return Buffer.from(I,"base64").toString("utf8")}:c?function(I){return c.decode(R(I))}:function(I){return S(K(I))},F=function(I){return d(I.replace(/[-_]/g,(function(I){return"-"==I?"+":"/"})))},w=function(I){return J(F(I))},f=function(I){return{value:I,enumerable:!1,writable:!0,configurable:!0}},v=function(){var I=function(I,g){return Object.defineProperty(String.prototype,I,f(g))};I("fromBase64",(function(){return w(this)})),I("toBase64",(function(I){return s(this,I)})),I("toBase64URI",(function(){return s(this,!0)})),I("toBase64URL",(function(){return s(this,!0)})),I("toUint8Array",(function(){return H(this)}))},x=function(){var I=function(I,g){return Object.defineProperty(Uint8Array.prototype,I,f(g))};I("toBase64",(function(I){return X(this,I)})),I("toBase64URI",(function(){return X(this,!0)})),I("toBase64URL",(function(){return X(this,!0)}))},N=function(){v(),x()},L={version:I,VERSION:g,atob:K,atobPolyfill:p,btoa:e,btoaPolyfill:m,fromBase64:w,toBase64:s,encode:s,encodeURI:r,encodeURL:r,utob:h,btou:S,decode:w,isValid:function(I){if("string"!==typeof I)return!1;var g=I.replace(/\s+/g,"").replace(/={0,2}$/,"");return!/[^\s0-9a-zA-Z\+/]/.test(g)||!/[^\s0-9a-zA-Z\-_]/.test(g)},fromUint8Array:X,toUint8Array:H,extendString:v,extendUint8Array:x,extendBuiltins:N,Base64:{}};return Object.keys(L).forEach((function(I){return L.Base64[I]=L[I]})),L}()},5183:function(I){var g=1e3,C=60*g,A=60*C,i=24*A,c=7*i,G=365.25*i;function l(I,g,C,A){var i=g>=1.5*C;return Math.round(I/C)+" "+A+(i?"s":"")}I.exports=function(I,b){b=b||{};var Z=typeof I;if("string"===Z&&I.length>0)return function(I){if((I=String(I)).length>100)return;var l=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(I);if(!l)return;var b=parseFloat(l[1]);switch((l[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return b*G;case"weeks":case"week":case"w":return b*c;case"days":case"day":case"d":return b*i;case"hours":case"hour":case"hrs":case"hr":case"h":return b*A;case"minutes":case"minute":case"mins":case"min":case"m":return b*C;case"seconds":case"second":case"secs":case"sec":case"s":return b*g;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return b;default:return}}(I);if("number"===Z&&isFinite(I))return b.long?function(I){var c=Math.abs(I);if(c>=i)return l(I,c,i,"day");if(c>=A)return l(I,c,A,"hour");if(c>=C)return l(I,c,C,"minute");if(c>=g)return l(I,c,g,"second");return I+" ms"}(I):function(I){var c=Math.abs(I);if(c>=i)return Math.round(I/i)+"d";if(c>=A)return Math.round(I/A)+"h";if(c>=C)return Math.round(I/C)+"m";if(c>=g)return Math.round(I/g)+"s";return I+"ms"}(I);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(I))}},3889:function(I,g,C){"use strict";C.r(g),C.d(g,{Observable:function(){return H},Subject:function(){return O},filter:function(){return w},flatMap:function(){return N},interval:function(){return L},map:function(){return T},merge:function(){return U},multicast:function(){return P},scan:function(){return j},unsubscribe:function(){return J}});var A=C(6257);function i(I,g){if(!(I instanceof g))throw new TypeError("Cannot call a class as a function")}var c=C(2641);function G(I){var g=function(I,g){if("object"!==(0,c.Z)(I)||null===I)return I;var C=I[Symbol.toPrimitive];if(void 0!==C){var A=C.call(I,g||"default");if("object"!==(0,c.Z)(A))return A;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===g?String:Number)(I)}(I,"string");return"symbol"===(0,c.Z)(g)?g:String(g)}function l(I,g){for(var C=0;C<g.length;C++){var A=g[C];A.enumerable=A.enumerable||!1,A.configurable=!0,"value"in A&&(A.writable=!0),Object.defineProperty(I,G(A.key),A)}}function b(I,g,C){return g&&l(I.prototype,g),C&&l(I,C),Object.defineProperty(I,"prototype",{writable:!1}),I}var Z=function(I,g,C,A){return new(C||(C=Promise))((function(i,c){function G(I){try{b(A.next(I))}catch(g){c(g)}}function l(I){try{b(A.throw(I))}catch(g){c(g)}}function b(I){var g;I.done?i(I.value):(g=I.value,g instanceof C?g:new C((function(I){I(g)}))).then(G,l)}b((A=A.apply(I,g||[])).next())}))},t=function(){function I(g){i(this,I),this._baseObserver=g,this._pendingPromises=new Set}return b(I,[{key:"complete",value:function(){var I=this;Promise.all(this._pendingPromises).then((function(){return I._baseObserver.complete()})).catch((function(g){return I._baseObserver.error(g)}))}},{key:"error",value:function(I){this._baseObserver.error(I)}},{key:"schedule",value:function(I){var g=this,C=Promise.all(this._pendingPromises),i=[],c=function(I){return i.push(I)},G=Promise.resolve().then((function(){return Z(g,void 0,void 0,(0,A.Z)().mark((function g(){var l,b,Z;return(0,A.Z)().wrap((function(g){for(;;)switch(g.prev=g.next){case 0:return g.next=2,C;case 2:return g.next=4,I(c);case 4:for(this._pendingPromises.delete(G),l=0,b=i;l<b.length;l++)Z=b[l],this._baseObserver.next(Z);case 6:case"end":return g.stop()}}),g,this)})))})).catch((function(I){g._pendingPromises.delete(G),g._baseObserver.error(I)}));this._pendingPromises.add(G)}}]),I}();function o(I,g){(null==g||g>I.length)&&(g=I.length);for(var C=0,A=new Array(g);C<g;C++)A[C]=I[C];return A}function n(I,g){var C="undefined"!==typeof Symbol&&I[Symbol.iterator]||I["@@iterator"];if(!C){if(Array.isArray(I)||(C=function(I,g){if(I){if("string"===typeof I)return o(I,g);var C=Object.prototype.toString.call(I).slice(8,-1);return"Object"===C&&I.constructor&&(C=I.constructor.name),"Map"===C||"Set"===C?Array.from(I):"Arguments"===C||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(C)?o(I,g):void 0}}(I))||g&&I&&"number"===typeof I.length){C&&(I=C);var A=0,i=function(){};return{s:i,n:function(){return A>=I.length?{done:!0}:{done:!1,value:I[A++]}},e:function(I){throw I},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var c,G=!0,l=!1;return{s:function(){C=C.call(I)},n:function(){var I=C.next();return G=I.done,I},e:function(I){l=!0,c=I},f:function(){try{G||null==C.return||C.return()}finally{if(l)throw c}}}}var u=function(){return"function"===typeof Symbol},d=function(I){return u()&&Boolean(Symbol[I])},m=function(I){return d(I)?Symbol[I]:"@@"+I};d("asyncIterator")||(Symbol.asyncIterator=Symbol.asyncIterator||Symbol.for("Symbol.asyncIterator"));var e=m("iterator"),B=m("observable"),X=m("species");function y(I,g){var C=I[g];if(null!=C){if("function"!==typeof C)throw new TypeError(C+" is not a function");return C}}function V(I){var g=I.constructor;return void 0!==g&&null===(g=g[X])&&(g=void 0),void 0!==g?g:R}function h(I){return I instanceof R}function a(I){a.log?a.log(I):setTimeout((function(){throw I}),0)}function s(I){Promise.resolve().then((function(){try{I()}catch(g){a(g)}}))}function r(I){var g=I._cleanup;if(void 0!==g&&(I._cleanup=void 0,g))try{if("function"===typeof g)g();else{var C=y(g,"unsubscribe");C&&C.call(g)}}catch(A){a(A)}}function Y(I){I._observer=void 0,I._queue=void 0,I._state="closed"}function W(I,g,C){I._state="running";var A=I._observer;try{var i=A?y(A,g):void 0;switch(g){case"next":i&&i.call(A,C);break;case"error":if(Y(I),!i)throw C;i.call(A,C);break;case"complete":Y(I),i&&i.call(A)}}catch(c){a(c)}"closed"===I._state?r(I):"running"===I._state&&(I._state="ready")}function S(I,g,C){if("closed"!==I._state)return"buffering"===I._state?(I._queue=I._queue||[],void I._queue.push({type:g,value:C})):"ready"!==I._state?(I._state="buffering",I._queue=[{type:g,value:C}],void s((function(){return function(I){var g=I._queue;if(g){I._queue=void 0,I._state="ready";var C,A=n(g);try{for(A.s();!(C=A.n()).done;){var i=C.value;if(W(I,i.type,i.value),"closed"===I._state)break}}catch(c){A.e(c)}finally{A.f()}}}(I)}))):void W(I,g,C)}var p=function(){function I(g,C){i(this,I),this._cleanup=void 0,this._observer=g,this._queue=void 0,this._state="initializing";var A=new K(this);try{this._cleanup=C.call(void 0,A)}catch(c){A.error(c)}"initializing"===this._state&&(this._state="ready")}return b(I,[{key:"closed",get:function(){return"closed"===this._state}},{key:"unsubscribe",value:function(){"closed"!==this._state&&(Y(this),r(this))}}]),I}(),K=function(){function I(g){i(this,I),this._subscription=g}return b(I,[{key:"closed",get:function(){return"closed"===this._subscription._state}},{key:"next",value:function(I){S(this._subscription,"next",I)}},{key:"error",value:function(I){S(this._subscription,"error",I)}},{key:"complete",value:function(){S(this._subscription,"complete")}}]),I}(),R=function(I){function g(I){if(i(this,g),!(this instanceof g))throw new TypeError("Observable cannot be called as a function");if("function"!==typeof I)throw new TypeError("Observable initializer must be a function");this._subscriber=I}return b(g,[{key:"subscribe",value:function(I,g,C){return"object"===typeof I&&null!==I||(I={next:I,error:g,complete:C}),new p(I,this._subscriber)}},{key:"pipe",value:function(I){for(var g=this,C=arguments.length,A=new Array(C>1?C-1:0),i=1;i<C;i++)A[i-1]=arguments[i];for(var c=0,G=[I].concat(A);c<G.length;c++){var l=G[c];g=l(g)}return g}},{key:"tap",value:function(I,C,A){var i=this,c="object"!==typeof I||null===I?{next:I,error:C,complete:A}:I;return new g((function(I){return i.subscribe({next:function(g){c.next&&c.next(g),I.next(g)},error:function(g){c.error&&c.error(g),I.error(g)},complete:function(){c.complete&&c.complete(),I.complete()},start:function(I){c.start&&c.start(I)}})}))}},{key:"forEach",value:function(I){var g=this;return new Promise((function(C,A){if("function"===typeof I)var i=g.subscribe({next:function(g){try{I(g,c)}catch(C){A(C),i.unsubscribe()}},error:function(I){A(I)},complete:function(){C(void 0)}});else A(new TypeError(I+" is not a function"));function c(){i.unsubscribe(),C(void 0)}}))}},{key:"map",value:function(I){var g=this;if("function"!==typeof I)throw new TypeError(I+" is not a function");return new(V(this))((function(C){return g.subscribe({next:function(g){var A=g;try{A=I(g)}catch(i){return C.error(i)}C.next(A)},error:function(I){C.error(I)},complete:function(){C.complete()}})}))}},{key:"filter",value:function(I){var g=this;if("function"!==typeof I)throw new TypeError(I+" is not a function");return new(V(this))((function(C){return g.subscribe({next:function(g){try{if(!I(g))return}catch(A){return C.error(A)}C.next(g)},error:function(I){C.error(I)},complete:function(){C.complete()}})}))}},{key:"reduce",value:function(I,g){var C=this;if("function"!==typeof I)throw new TypeError(I+" is not a function");var A=V(this),i=arguments.length>1,c=!1,G=g;return new A((function(g){return C.subscribe({next:function(C){var A=!c;if(c=!0,!A||i)try{G=I(G,C)}catch(l){return g.error(l)}else G=C},error:function(I){g.error(I)},complete:function(){if(!c&&!i)return g.error(new TypeError("Cannot reduce an empty sequence"));g.next(G),g.complete()}})}))}},{key:"concat",value:function(){for(var I=this,g=arguments.length,C=new Array(g),A=0;A<g;A++)C[A]=arguments[A];var i=V(this);return new i((function(g){var A,c=0;return function I(G){A=G.subscribe({next:function(I){g.next(I)},error:function(I){g.error(I)},complete:function(){c===C.length?(A=void 0,g.complete()):I(i.from(C[c++]))}})}(I),function(){A&&(A.unsubscribe(),A=void 0)}}))}},{key:"flatMap",value:function(I){var g=this;if("function"!==typeof I)throw new TypeError(I+" is not a function");var C=V(this);return new C((function(A){var i=[],c=g.subscribe({next:function(g){var c;if(I)try{c=I(g)}catch(b){return A.error(b)}else c=g;var l=C.from(c).subscribe({next:function(I){A.next(I)},error:function(I){A.error(I)},complete:function(){var I=i.indexOf(l);I>=0&&i.splice(I,1),G()}});i.push(l)},error:function(I){A.error(I)},complete:function(){G()}});function G(){c.closed&&0===i.length&&A.complete()}return function(){i.forEach((function(I){return I.unsubscribe()})),c.unsubscribe()}}))}},{key:I,value:function(){return this}}],[{key:"from",value:function(I){var C="function"===typeof this?this:g;if(null==I)throw new TypeError(I+" is not an object");var A=y(I,B);if(A){var i=A.call(I);if(Object(i)!==i)throw new TypeError(i+" is not an object");return h(i)&&i.constructor===C?i:new C((function(I){return i.subscribe(I)}))}if(d("iterator")){var c=y(I,e);if(c)return new C((function(g){s((function(){if(!g.closed){var C,A=n(c.call(I));try{for(A.s();!(C=A.n()).done;){var i=C.value;if(g.next(i),g.closed)return}}catch(G){A.e(G)}finally{A.f()}g.complete()}}))}))}if(Array.isArray(I))return new C((function(g){s((function(){if(!g.closed){var C,A=n(I);try{for(A.s();!(C=A.n()).done;){var i=C.value;if(g.next(i),g.closed)return}}catch(c){A.e(c)}finally{A.f()}g.complete()}}))}));throw new TypeError(I+" is not observable")}},{key:"of",value:function(){for(var I=arguments.length,C=new Array(I),A=0;A<I;A++)C[A]=arguments[A];var i="function"===typeof this?this:g;return new i((function(I){s((function(){if(!I.closed){for(var g=0,A=C;g<A.length;g++){var i=A[g];if(I.next(i),I.closed)return}I.complete()}}))}))}},{key:X,get:function(){return this}}]),g}((Symbol.observable,B));u()&&Object.defineProperty(R,Symbol("extensions"),{value:{symbol:B,hostReportError:a},configurable:!0});var H=R;var J=function(I){"function"===typeof I?I():I&&"function"===typeof I.unsubscribe&&I.unsubscribe()},F=function(I,g,C,A){return new(C||(C=Promise))((function(i,c){function G(I){try{b(A.next(I))}catch(g){c(g)}}function l(I){try{b(A.throw(I))}catch(g){c(g)}}function b(I){var g;I.done?i(I.value):(g=I.value,g instanceof C?g:new C((function(I){I(g)}))).then(G,l)}b((A=A.apply(I,g||[])).next())}))};var w=function(I){return function(g){return new H((function(C){var i=new t(C),c=g.subscribe({complete:function(){i.complete()},error:function(I){i.error(I)},next:function(g){var C=this;i.schedule((function(i){return F(C,void 0,void 0,(0,A.Z)().mark((function C(){return(0,A.Z)().wrap((function(C){for(;;)switch(C.prev=C.next){case 0:return C.next=2,I(g);case 2:if(!C.sent){C.next=4;break}i(g);case 4:case"end":return C.stop()}}),C)})))}))}});return function(){return J(c)}}))}};function f(I){return I&&d("asyncIterator")&&I[Symbol.asyncIterator]}var v=function(I,g,C,A){return new(C||(C=Promise))((function(i,c){function G(I){try{b(A.next(I))}catch(g){c(g)}}function l(I){try{b(A.throw(I))}catch(g){c(g)}}function b(I){var g;I.done?i(I.value):(g=I.value,g instanceof C?g:new C((function(I){I(g)}))).then(G,l)}b((A=A.apply(I,g||[])).next())}))},x=function(I){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var g,C=I[Symbol.asyncIterator];return C?C.call(I):(I="function"===typeof __values?__values(I):I[Symbol.iterator](),g={},A("next"),A("throw"),A("return"),g[Symbol.asyncIterator]=function(){return this},g);function A(C){g[C]=I[C]&&function(g){return new Promise((function(A,i){(function(I,g,C,A){Promise.resolve(A).then((function(g){I({value:g,done:C})}),g)})(A,i,(g=I[C](g)).done,g.value)}))}}};var N=function(I){return function(g){return new H((function(C){var i=new t(C),c=g.subscribe({complete:function(){i.complete()},error:function(I){i.error(I)},next:function(g){var C=this;i.schedule((function(i){return v(C,void 0,void 0,(0,A.Z)().mark((function C(){var c,G,l,b,Z,t;return(0,A.Z)().wrap((function(C){for(;;)switch(C.prev=C.next){case 0:return C.next=2,I(g);case 2:if(l=C.sent,!((A=l)&&d("iterator")&&A[Symbol.iterator]||f(l))){C.next=31;break}C.prev=4,b=x(l);case 6:return C.next=8,b.next();case 8:if((Z=C.sent).done){C.next=14;break}t=Z.value,i(t);case 12:C.next=6;break;case 14:C.next=19;break;case 16:C.prev=16,C.t0=C.catch(4),c={error:C.t0};case 19:if(C.prev=19,C.prev=20,!Z||Z.done||!(G=b.return)){C.next=24;break}return C.next=24,G.call(b);case 24:if(C.prev=24,!c){C.next=27;break}throw c.error;case 27:return C.finish(24);case 28:return C.finish(19);case 29:C.next=32;break;case 31:l.map((function(I){return i(I)}));case 32:case"end":return C.stop()}var A}),C,null,[[4,16,19,29],[20,,24,28]])})))}))}});return function(){return J(c)}}))}};function L(I){return new R((function(g){var C=0,A=setInterval((function(){g.next(C++)}),I);return function(){return clearInterval(A)}}))}var k=function(I,g,C,A){return new(C||(C=Promise))((function(i,c){function G(I){try{b(A.next(I))}catch(g){c(g)}}function l(I){try{b(A.throw(I))}catch(g){c(g)}}function b(I){var g;I.done?i(I.value):(g=I.value,g instanceof C?g:new C((function(I){I(g)}))).then(G,l)}b((A=A.apply(I,g||[])).next())}))};var T=function(I){return function(g){return new H((function(C){var i=new t(C),c=g.subscribe({complete:function(){i.complete()},error:function(I){i.error(I)},next:function(g){var C=this;i.schedule((function(i){return k(C,void 0,void 0,(0,A.Z)().mark((function C(){var c;return(0,A.Z)().wrap((function(C){for(;;)switch(C.prev=C.next){case 0:return C.next=2,I(g);case 2:c=C.sent,i(c);case 4:case"end":return C.stop()}}),C)})))}))}});return function(){return J(c)}}))}};var U=function(){for(var I=arguments.length,g=new Array(I),C=0;C<I;C++)g[C]=arguments[C];return 0===g.length?R.from([]):new R((function(I){var C=0,A=g.map((function(A){return A.subscribe({error:function(g){I.error(g),i()},next:function(g){I.next(g)},complete:function(){++C===g.length&&(I.complete(),i())}})})),i=function(){A.forEach((function(I){return J(I)}))};return i}))};function z(I,g){return z=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(I,g){return I.__proto__=g,I},z(I,g)}function E(I){return E=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(I){return I.__proto__||Object.getPrototypeOf(I)},E(I)}function M(I,g){if(g&&("object"===(0,c.Z)(g)||"function"===typeof g))return g;if(void 0!==g)throw new TypeError("Derived constructors may only return object or undefined");return function(I){if(void 0===I)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return I}(I)}function D(I){var g=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(I){return!1}}();return function(){var C,A=E(I);if(g){var i=E(this).constructor;C=Reflect.construct(A,arguments,i)}else C=A.apply(this,arguments);return M(this,C)}}var O=function(I){!function(I,g){if("function"!==typeof g&&null!==g)throw new TypeError("Super expression must either be null or a function");I.prototype=Object.create(g&&g.prototype,{constructor:{value:I,writable:!0,configurable:!0}}),Object.defineProperty(I,"prototype",{writable:!1}),g&&z(I,g)}(C,I);var g=D(C);function C(){var I;return i(this,C),(I=g.call(this,(function(g){return I._observers.add(g),function(){return I._observers.delete(g)}})))._observers=new Set,I}return b(C,[{key:"next",value:function(I){var g,C=n(this._observers);try{for(C.s();!(g=C.n()).done;){g.value.next(I)}}catch(A){C.e(A)}finally{C.f()}}},{key:"error",value:function(I){var g,C=n(this._observers);try{for(C.s();!(g=C.n()).done;){g.value.error(I)}}catch(A){C.e(A)}finally{C.f()}}},{key:"complete",value:function(){var I,g=n(this._observers);try{for(g.s();!(I=g.n()).done;){I.value.complete()}}catch(C){g.e(C)}finally{g.f()}}}]),C}(H);var P=function(I){var g,C=new O,A=0;return new H((function(i){g||(g=I.subscribe(C));var c=C.subscribe(i);return A++,function(){A--,c.unsubscribe(),0===A&&(J(g),g=void 0)}}))},q=function(I,g,C,A){return new(C||(C=Promise))((function(i,c){function G(I){try{b(A.next(I))}catch(g){c(g)}}function l(I){try{b(A.throw(I))}catch(g){c(g)}}function b(I){var g;I.done?i(I.value):(g=I.value,g instanceof C?g:new C((function(I){I(g)}))).then(G,l)}b((A=A.apply(I,g||[])).next())}))};var j=function(I,g){return function(C){return new H((function(i){var c,G=0,l=new t(i),b=C.subscribe({complete:function(){l.complete()},error:function(I){l.error(I)},next:function(C){var i=this;l.schedule((function(l){return q(i,void 0,void 0,(0,A.Z)().mark((function i(){var b;return(0,A.Z)().wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return b=0===G?"undefined"===typeof g?C:g:c,A.next=3,I(b,C,G++);case 3:c=A.sent,l(c);case 5:case"end":return A.stop()}}),i)})))}))}});return function(){return J(b)}}))}}},5360:function(I){"use strict";function g(I){if("string"!==typeof I)throw new TypeError("Path must be a string. Received "+JSON.stringify(I))}function C(I,g){for(var C,A="",i=0,c=-1,G=0,l=0;l<=I.length;++l){if(l<I.length)C=I.charCodeAt(l);else{if(47===C)break;C=47}if(47===C){if(c===l-1||1===G);else if(c!==l-1&&2===G){if(A.length<2||2!==i||46!==A.charCodeAt(A.length-1)||46!==A.charCodeAt(A.length-2))if(A.length>2){var b=A.lastIndexOf("/");if(b!==A.length-1){-1===b?(A="",i=0):i=(A=A.slice(0,b)).length-1-A.lastIndexOf("/"),c=l,G=0;continue}}else if(2===A.length||1===A.length){A="",i=0,c=l,G=0;continue}g&&(A.length>0?A+="/..":A="..",i=2)}else A.length>0?A+="/"+I.slice(c+1,l):A=I.slice(c+1,l),i=l-c-1;c=l,G=0}else 46===C&&-1!==G?++G:G=-1}return A}var A={resolve:function(){for(var I,A="",i=!1,c=arguments.length-1;c>=-1&&!i;c--){var G;c>=0?G=arguments[c]:(void 0===I&&(I=process.cwd()),G=I),g(G),0!==G.length&&(A=G+"/"+A,i=47===G.charCodeAt(0))}return A=C(A,!i),i?A.length>0?"/"+A:"/":A.length>0?A:"."},normalize:function(I){if(g(I),0===I.length)return".";var A=47===I.charCodeAt(0),i=47===I.charCodeAt(I.length-1);return 0!==(I=C(I,!A)).length||A||(I="."),I.length>0&&i&&(I+="/"),A?"/"+I:I},isAbsolute:function(I){return g(I),I.length>0&&47===I.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var I,C=0;C<arguments.length;++C){var i=arguments[C];g(i),i.length>0&&(void 0===I?I=i:I+="/"+i)}return void 0===I?".":A.normalize(I)},relative:function(I,C){if(g(I),g(C),I===C)return"";if((I=A.resolve(I))===(C=A.resolve(C)))return"";for(var i=1;i<I.length&&47===I.charCodeAt(i);++i);for(var c=I.length,G=c-i,l=1;l<C.length&&47===C.charCodeAt(l);++l);for(var b=C.length-l,Z=G<b?G:b,t=-1,o=0;o<=Z;++o){if(o===Z){if(b>Z){if(47===C.charCodeAt(l+o))return C.slice(l+o+1);if(0===o)return C.slice(l+o)}else G>Z&&(47===I.charCodeAt(i+o)?t=o:0===o&&(t=0));break}var n=I.charCodeAt(i+o);if(n!==C.charCodeAt(l+o))break;47===n&&(t=o)}var u="";for(o=i+t+1;o<=c;++o)o!==c&&47!==I.charCodeAt(o)||(0===u.length?u+="..":u+="/..");return u.length>0?u+C.slice(l+t):(l+=t,47===C.charCodeAt(l)&&++l,C.slice(l))},_makeLong:function(I){return I},dirname:function(I){if(g(I),0===I.length)return".";for(var C=I.charCodeAt(0),A=47===C,i=-1,c=!0,G=I.length-1;G>=1;--G)if(47===(C=I.charCodeAt(G))){if(!c){i=G;break}}else c=!1;return-1===i?A?"/":".":A&&1===i?"//":I.slice(0,i)},basename:function(I,C){if(void 0!==C&&"string"!==typeof C)throw new TypeError('"ext" argument must be a string');g(I);var A,i=0,c=-1,G=!0;if(void 0!==C&&C.length>0&&C.length<=I.length){if(C.length===I.length&&C===I)return"";var l=C.length-1,b=-1;for(A=I.length-1;A>=0;--A){var Z=I.charCodeAt(A);if(47===Z){if(!G){i=A+1;break}}else-1===b&&(G=!1,b=A+1),l>=0&&(Z===C.charCodeAt(l)?-1===--l&&(c=A):(l=-1,c=b))}return i===c?c=b:-1===c&&(c=I.length),I.slice(i,c)}for(A=I.length-1;A>=0;--A)if(47===I.charCodeAt(A)){if(!G){i=A+1;break}}else-1===c&&(G=!1,c=A+1);return-1===c?"":I.slice(i,c)},extname:function(I){g(I);for(var C=-1,A=0,i=-1,c=!0,G=0,l=I.length-1;l>=0;--l){var b=I.charCodeAt(l);if(47!==b)-1===i&&(c=!1,i=l+1),46===b?-1===C?C=l:1!==G&&(G=1):-1!==C&&(G=-1);else if(!c){A=l+1;break}}return-1===C||-1===i||0===G||1===G&&C===i-1&&C===A+1?"":I.slice(C,i)},format:function(I){if(null===I||"object"!==typeof I)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof I);return function(I,g){var C=g.dir||g.root,A=g.base||(g.name||"")+(g.ext||"");return C?C===g.root?C+A:C+I+A:A}("/",I)},parse:function(I){g(I);var C={root:"",dir:"",base:"",ext:"",name:""};if(0===I.length)return C;var A,i=I.charCodeAt(0),c=47===i;c?(C.root="/",A=1):A=0;for(var G=-1,l=0,b=-1,Z=!0,t=I.length-1,o=0;t>=A;--t)if(47!==(i=I.charCodeAt(t)))-1===b&&(Z=!1,b=t+1),46===i?-1===G?G=t:1!==o&&(o=1):-1!==G&&(o=-1);else if(!Z){l=t+1;break}return-1===G||-1===b||0===o||1===o&&G===b-1&&G===l+1?-1!==b&&(C.base=C.name=0===l&&c?I.slice(1,b):I.slice(l,b)):(0===l&&c?(C.name=I.slice(1,G),C.base=I.slice(1,b)):(C.name=I.slice(l,G),C.base=I.slice(l,b)),C.ext=I.slice(G,b)),l>0?C.dir=I.slice(0,l-1):c&&(C.dir="/"),C},sep:"/",delimiter:":",win32:null,posix:null};A.posix=A,I.exports=A},3285:function(I,g,C){"use strict";var A=65536,i=4294967295;var c=C(3895).Buffer,G=C.g.crypto||C.g.msCrypto;G&&G.getRandomValues?I.exports=function(I,g){if(I>i)throw new RangeError("requested too many random bytes");var C=c.allocUnsafe(I);if(I>0)if(I>A)for(var l=0;l<I;l+=A)G.getRandomValues(C.slice(l,l+A));else G.getRandomValues(C);if("function"===typeof g)return process.nextTick((function(){g(null,C)}));return C}:I.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}},6641:function(I,g,C){"use strict";function A(){throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11")}var i=C(3895),c=C(3285),G=i.Buffer,l=i.kMaxLength,b=C.g.crypto||C.g.msCrypto,Z=Math.pow(2,32)-1;function t(I,g){if("number"!==typeof I||I!==I)throw new TypeError("offset must be a number");if(I>Z||I<0)throw new TypeError("offset must be a uint32");if(I>l||I>g)throw new RangeError("offset out of range")}function o(I,g,C){if("number"!==typeof I||I!==I)throw new TypeError("size must be a number");if(I>Z||I<0)throw new TypeError("size must be a uint32");if(I+g>C||I>l)throw new RangeError("buffer too small")}function n(I,g,C,A){if(process.browser){var i=I.buffer,G=new Uint8Array(i,g,C);return b.getRandomValues(G),A?void process.nextTick((function(){A(null,I)})):I}if(!A)return c(C).copy(I,g),I;c(C,(function(C,i){if(C)return A(C);i.copy(I,g),A(null,I)}))}b&&b.getRandomValues||!process.browser?(g.randomFill=function(I,g,A,i){if(!G.isBuffer(I)&&!(I instanceof C.g.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');if("function"===typeof g)i=g,g=0,A=I.length;else if("function"===typeof A)i=A,A=I.length-g;else if("function"!==typeof i)throw new TypeError('"cb" argument must be a function');return t(g,I.length),o(A,g,I.length),n(I,g,A,i)},g.randomFillSync=function(I,g,A){"undefined"===typeof g&&(g=0);if(!G.isBuffer(I)&&!(I instanceof C.g.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');t(g,I.length),void 0===A&&(A=I.length-g);return o(A,g,I.length),n(I,g,A)}):(g.randomFill=A,g.randomFillSync=A)},3895:function(I,g,C){var A=C(2016),i=A.Buffer;function c(I,g){for(var C in I)g[C]=I[C]}function G(I,g,C){return i(I,g,C)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?I.exports=A:(c(A,g),g.Buffer=G),G.prototype=Object.create(i.prototype),c(i,G),G.from=function(I,g,C){if("number"===typeof I)throw new TypeError("Argument must not be a number");return i(I,g,C)},G.alloc=function(I,g,C){if("number"!==typeof I)throw new TypeError("Argument must be a number");var A=i(I);return void 0!==g?"string"===typeof C?A.fill(g,C):A.fill(g):A.fill(0),A},G.allocUnsafe=function(I){if("number"!==typeof I)throw new TypeError("Argument must be a number");return i(I)},G.allocUnsafeSlow=function(I){if("number"!==typeof I)throw new TypeError("Argument must be a number");return A.SlowBuffer(I)}},7003:function(I,g,C){"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.serialize=g.deserialize=g.registerSerializer=void 0;var A=C(7705),i=A.DefaultSerializer;g.registerSerializer=function(I){i=A.extendSerializer(i,I)},g.deserialize=function(I){return i.deserialize(I)},g.serialize=function(I){return i.serialize(I)}},913:function(I,g,C){"use strict";var A=this&&this.__createBinding||(Object.create?function(I,g,C,A){void 0===A&&(A=C),Object.defineProperty(I,A,{enumerable:!0,get:function(){return g[C]}})}:function(I,g,C,A){void 0===A&&(A=C),I[A]=g[C]}),i=this&&this.__exportStar||function(I,g){for(var C in I)"default"===C||Object.prototype.hasOwnProperty.call(g,C)||A(g,I,C)};Object.defineProperty(g,"__esModule",{value:!0}),g.Transfer=g.DefaultSerializer=g.expose=g.registerSerializer=void 0;var c=C(7003);Object.defineProperty(g,"registerSerializer",{enumerable:!0,get:function(){return c.registerSerializer}}),i(C(529),g);var G=C(9488);Object.defineProperty(g,"expose",{enumerable:!0,get:function(){return G.expose}});var l=C(7705);Object.defineProperty(g,"DefaultSerializer",{enumerable:!0,get:function(){return l.DefaultSerializer}});var b=C(2644);Object.defineProperty(g,"Transfer",{enumerable:!0,get:function(){return b.Transfer}})},8936:function(I,g){"use strict";var C;function A(I){return(""+I).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\/\/.+)?\/[^/]+(?:\?.*)?$/,"$1")+"/"}Object.defineProperty(g,"__esModule",{value:!0}),g.getBundleURL=g.getBaseURL=void 0,g.getBundleURL=function(){return C||(C=function(){try{throw new Error}catch(g){var I=(""+g.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\/\/[^)\n]+/g);if(I)return A(I[0])}return"/"}()),C},g.getBaseURL=A},6086:function(I,g,C){"use strict";var A=C(9823).default,i=C(6982).default,c=C(2975).default,G=C(7868).default,l=C(4837).default;Object.defineProperty(g,"__esModule",{value:!0}),g.isWorkerRuntime=g.getWorkerImplementation=g.defaultPoolSize=void 0;var b=C(8936);g.defaultPoolSize="undefined"!==typeof navigator&&navigator.hardwareConcurrency?navigator.hardwareConcurrency:4;var Z,t=function(I){return/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(I)};function o(I){var g=new Blob([I],{type:"application/javascript"});return URL.createObjectURL(g)}g.getWorkerImplementation=function(){return Z||(Z=function(){if("undefined"===typeof Worker)return G((function I(){throw l(this,I),Error("No web worker implementation available. You might have tried to spawn a worker within a worker in a browser that doesn't support workers in workers.")}));var I=function(I){A(C,I);var g=i(C);function C(I,A){var i,c;return l(this,C),"string"===typeof I&&A&&A._baseURL?I=new URL(I,A._baseURL):"string"===typeof I&&!t(I)&&b.getBundleURL().match(/^file:\/\//i)&&(I=new URL(I,b.getBundleURL().replace(/\/[^\/]+$/,"/")),(null===(i=null===A||void 0===A?void 0:A.CORSWorkaround)||void 0===i||i)&&(I=o("importScripts(".concat(JSON.stringify(I),");")))),"string"===typeof I&&t(I)&&(null===(c=null===A||void 0===A?void 0:A.CORSWorkaround)||void 0===c||c)&&(I=o("importScripts(".concat(JSON.stringify(I),");"))),g.call(this,I,A)}return G(C)}(c(Worker));return{blob:function(I){A(C,I);var g=i(C);function C(I,A){l(this,C);var i=window.URL.createObjectURL(I);return g.call(this,i,A)}return G(C,null,[{key:"fromText",value:function(I,g){return new C(new window.Blob([I],{type:"text/javascript"}),g)}}]),C}(I),default:I}}()),Z},g.isWorkerRuntime=function(){var I="undefined"!==typeof self&&"undefined"!==typeof Window&&self instanceof Window;return!("undefined"===typeof self||!self.postMessage||I)}},529:function(I,g,C){"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.Worker=g.BlobWorker=g.isWorkerRuntime=g.Thread=g.spawn=g.Pool=void 0;var A=C(6086);Object.defineProperty(g,"isWorkerRuntime",{enumerable:!0,get:function(){return A.isWorkerRuntime}});var i=C(5033);Object.defineProperty(g,"Pool",{enumerable:!0,get:function(){return i.Pool}});var c=C(8273);Object.defineProperty(g,"spawn",{enumerable:!0,get:function(){return c.spawn}});var G=C(6629);Object.defineProperty(g,"Thread",{enumerable:!0,get:function(){return G.Thread}}),g.BlobWorker=A.getWorkerImplementation().blob,g.Worker=A.getWorkerImplementation().default},3339:function(I,g,C){"use strict";var A=C(7329).default,i=C(1187).default,c=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0}),g.createProxyModule=g.createProxyFunction=void 0;var G=c(C(6087)),l=C(3889),b=C(7003),Z=C(2365),t=C(2644),o=C(9235),n=G.default("threads:master:messages"),u=1;function d(I,g){return new l.Observable((function(C){var A,i=function i(c){var G;if(n("Message from worker:",c.data),c.data&&c.data.uid===g)if((G=c.data)&&G.type===o.WorkerMessageType.running)A=c.data.resultType;else if(function(I){return I&&I.type===o.WorkerMessageType.result}(c.data))"promise"===A?("undefined"!==typeof c.data.payload&&C.next(b.deserialize(c.data.payload)),C.complete(),I.removeEventListener("message",i)):(c.data.payload&&C.next(b.deserialize(c.data.payload)),c.data.complete&&(C.complete(),I.removeEventListener("message",i)));else if(function(I){return I&&I.type===o.WorkerMessageType.error}(c.data)){var l=b.deserialize(c.data.error);C.error(l),I.removeEventListener("message",i)}};return I.addEventListener("message",i),function(){if("observable"===A||!A){var C={type:o.MasterMessageType.cancel,uid:g};I.postMessage(C)}I.removeEventListener("message",i)}}))}function m(I){if(0===I.length)return{args:[],transferables:[]};var g,C,c=[],G=[],l=i(I);try{for(l.s();!(g=l.n()).done;){var Z=g.value;t.isTransferDescriptor(Z)?(c.push(b.serialize(Z.send)),G.push.apply(G,A(Z.transferables))):c.push(b.serialize(Z))}}catch(o){l.e(o)}finally{l.f()}return{args:c,transferables:0===G.length?G:(C=G,Array.from(new Set(C)))}}function e(I,g){return function(){for(var C=u++,A=arguments.length,i=new Array(A),c=0;c<A;c++)i[c]=arguments[c];var G=m(i),b=G.args,t=G.transferables,e={type:o.MasterMessageType.run,uid:C,method:g,args:b};n("Sending command to run function to worker:",e);try{I.postMessage(e,t)}catch(B){return Z.ObservablePromise.from(Promise.reject(B))}return Z.ObservablePromise.from(l.multicast(d(I,C)))}}g.createProxyFunction=e,g.createProxyModule=function(I,g){var C,A={},c=i(g);try{for(c.s();!(C=c.n()).done;){var G=C.value;A[G]=e(I,G)}}catch(l){c.e(l)}finally{c.f()}return A}},41:function(I,g){"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.PoolEventType=void 0,function(I){I.initialized="initialized",I.taskCanceled="taskCanceled",I.taskCompleted="taskCompleted",I.taskFailed="taskFailed",I.taskQueued="taskQueued",I.taskQueueDrained="taskQueueDrained",I.taskStart="taskStart",I.terminated="terminated"}(g.PoolEventType||(g.PoolEventType={}))},5033:function(I,g,C){"use strict";var A=C(6670).default,i=C(4837).default,c=C(7868).default,G=C(7329).default,l=this&&this.__awaiter||function(I,g,C,A){return new(C||(C=Promise))((function(i,c){function G(I){try{b(A.next(I))}catch(g){c(g)}}function l(I){try{b(A.throw(I))}catch(g){c(g)}}function b(I){var g;I.done?i(I.value):(g=I.value,g instanceof C?g:new C((function(I){I(g)}))).then(G,l)}b((A=A.apply(I,g||[])).next())}))},b=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0}),g.Pool=g.Thread=g.PoolEventType=void 0;var Z=b(C(6087)),t=C(3889),o=C(7793),n=C(6086),u=C(41);Object.defineProperty(g,"PoolEventType",{enumerable:!0,get:function(){return u.PoolEventType}});var d=C(6629);Object.defineProperty(g,"Thread",{enumerable:!0,get:function(){return d.Thread}});var m=1;function e(I){return new Promise((function(g){return setTimeout(g,I)}))}function B(I,g){return I.reduce((function(I,C){return[].concat(G(I),G(g(C)))}),[])}var X=function(){function I(g,C){var A=this;i(this,I),this.eventSubject=new t.Subject,this.initErrors=[],this.isClosing=!1,this.nextTaskID=1,this.taskQueue=[];var c="number"===typeof C?{size:C}:C||{},G=c.size,l=void 0===G?n.defaultPoolSize:G;this.debug=Z.default("threads:pool:".concat((c.name||String(m++)).replace(/\W/g," ").trim().replace(/\s+/g,"-"))),this.options=c,this.workers=function(I,g){return function(I){for(var g=[],C=0;C<I;C++)g.push(C);return g}(g).map((function(){return{init:I(),runningTasks:[]}}))}(g,l),this.eventObservable=t.multicast(t.Observable.from(this.eventSubject)),Promise.all(this.workers.map((function(I){return I.init}))).then((function(){return A.eventSubject.next({type:u.PoolEventType.initialized,size:A.workers.length})}),(function(I){A.debug("Error while initializing pool worker:",I),A.eventSubject.error(I),A.initErrors.push(I)}))}return c(I,[{key:"findIdlingWorker",value:function(){var I=this.options.concurrency,g=void 0===I?1:I;return this.workers.find((function(I){return I.runningTasks.length<g}))}},{key:"runPoolTask",value:function(I,g){return l(this,void 0,void 0,A().mark((function C(){var i,c;return A().wrap((function(C){for(;;)switch(C.prev=C.next){case 0:return i=this.workers.indexOf(I)+1,this.debug("Running task #".concat(g.id," on worker #").concat(i,"...")),this.eventSubject.next({type:u.PoolEventType.taskStart,taskID:g.id,workerID:i}),C.prev=3,C.t0=g,C.next=7,I.init;case 7:return C.t1=C.sent,C.next=10,C.t0.run.call(C.t0,C.t1);case 10:c=C.sent,this.debug("Task #".concat(g.id," completed successfully")),this.eventSubject.next({type:u.PoolEventType.taskCompleted,returnValue:c,taskID:g.id,workerID:i}),C.next=19;break;case 15:C.prev=15,C.t2=C.catch(3),this.debug("Task #".concat(g.id," failed")),this.eventSubject.next({type:u.PoolEventType.taskFailed,taskID:g.id,error:C.t2,workerID:i});case 19:case"end":return C.stop()}}),C,this,[[3,15]])})))}},{key:"run",value:function(I,g){return l(this,void 0,void 0,A().mark((function C(){var i,c=this;return A().wrap((function(C){for(;;)switch(C.prev=C.next){case 0:i=l(c,void 0,void 0,A().mark((function C(){var c;return A().wrap((function(C){for(;;)switch(C.prev=C.next){case 0:return c=function(){I.runningTasks=I.runningTasks.filter((function(I){return I!==i}))},C.next=3,e(0);case 3:return C.prev=3,C.next=6,this.runPoolTask(I,g);case 6:return C.prev=6,c(),this.isClosing||this.scheduleWork(),C.finish(6);case 10:case"end":return C.stop()}}),C,this,[[3,,6,10]])}))),I.runningTasks.push(i);case 2:case"end":return C.stop()}}),C)})))}},{key:"scheduleWork",value:function(){this.debug("Attempt de-queueing a task in order to run it...");var I=this.findIdlingWorker();if(I){var g=this.taskQueue.shift();if(!g)return this.debug("Task queue is empty"),void this.eventSubject.next({type:u.PoolEventType.taskQueueDrained});this.run(I,g)}}},{key:"taskCompletion",value:function(I){var g=this;return new Promise((function(C,A){var i=g.events().subscribe((function(g){g.type===u.PoolEventType.taskCompleted&&g.taskID===I?(i.unsubscribe(),C(g.returnValue)):g.type===u.PoolEventType.taskFailed&&g.taskID===I?(i.unsubscribe(),A(g.error)):g.type===u.PoolEventType.terminated&&(i.unsubscribe(),A(Error("Pool has been terminated before task was run.")))}))}))}},{key:"settled",value:function(){var I=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return l(this,void 0,void 0,A().mark((function g(){var C,i,c,G=this;return A().wrap((function(g){for(;;)switch(g.prev=g.next){case 0:if(C=function(){return B(G.workers,(function(I){return I.runningTasks}))},i=[],c=this.eventObservable.subscribe((function(I){I.type===u.PoolEventType.taskFailed&&i.push(I.error)})),!(this.initErrors.length>0)){g.next=5;break}return g.abrupt("return",Promise.reject(this.initErrors[0]));case 5:if(!I||0!==this.taskQueue.length){g.next=9;break}return g.next=8,o.allSettled(C());case 8:return g.abrupt("return",i);case 9:return g.next=11,new Promise((function(I,g){var C=G.eventObservable.subscribe({next:function(g){g.type===u.PoolEventType.taskQueueDrained&&(C.unsubscribe(),I(void 0))},error:g})}));case 11:return g.next=13,o.allSettled(C());case 13:return c.unsubscribe(),g.abrupt("return",i);case 15:case"end":return g.stop()}}),g,this)})))}},{key:"completed",value:function(){var I=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return l(this,void 0,void 0,A().mark((function g(){var C,i,c,G=this;return A().wrap((function(g){for(;;)switch(g.prev=g.next){case 0:return C=this.settled(I),i=new Promise((function(I,g){var A=G.eventObservable.subscribe({next:function(i){i.type===u.PoolEventType.taskQueueDrained?(A.unsubscribe(),I(C)):i.type===u.PoolEventType.taskFailed&&(A.unsubscribe(),g(i.error))},error:g})})),g.next=4,Promise.race([C,i]);case 4:if(!((c=g.sent).length>0)){g.next=7;break}throw c[0];case 7:case"end":return g.stop()}}),g,this)})))}},{key:"events",value:function(){return this.eventObservable}},{key:"queue",value:function(I){var g=this,C=this.options.maxQueuedJobs,A=void 0===C?1/0:C;if(this.isClosing)throw Error("Cannot schedule pool tasks after terminate() has been called.");if(this.initErrors.length>0)throw this.initErrors[0];var i=this.nextTaskID++,c=this.taskCompletion(i);c.catch((function(I){g.debug("Task #".concat(i," errored:"),I)}));var G={id:i,run:I,cancel:function(){-1!==g.taskQueue.indexOf(G)&&(g.taskQueue=g.taskQueue.filter((function(I){return I!==G})),g.eventSubject.next({type:u.PoolEventType.taskCanceled,taskID:G.id}))},then:c.then.bind(c)};if(this.taskQueue.length>=A)throw Error("Maximum number of pool tasks queued. Refusing to queue another one.\nThis usually happens for one of two reasons: We are either at peak workload right now or some tasks just won't finish, thus blocking the pool.");return this.debug("Queueing task #".concat(G.id,"...")),this.taskQueue.push(G),this.eventSubject.next({type:u.PoolEventType.taskQueued,taskID:G.id}),this.scheduleWork(),G}},{key:"terminate",value:function(I){return l(this,void 0,void 0,A().mark((function g(){var C=this;return A().wrap((function(g){for(;;)switch(g.prev=g.next){case 0:if(this.isClosing=!0,I){g.next=4;break}return g.next=4,this.completed(!0);case 4:return this.eventSubject.next({type:u.PoolEventType.terminated,remainingQueue:G(this.taskQueue)}),this.eventSubject.complete(),g.next=8,Promise.all(this.workers.map((function(I){return l(C,void 0,void 0,A().mark((function g(){return A().wrap((function(g){for(;;)switch(g.prev=g.next){case 0:return g.t0=d.Thread,g.next=3,I.init;case 3:return g.t1=g.sent,g.abrupt("return",g.t0.terminate.call(g.t0,g.t1));case 5:case"end":return g.stop()}}),g)})))})));case 8:case"end":return g.stop()}}),g,this)})))}}]),I}();function y(I,g){return new X(I,g)}X.EventType=u.PoolEventType,y.EventType=u.PoolEventType,g.Pool=y},8273:function(I,g,C){"use strict";var A=C(8726).default,i=C(6843).default,c=C(6670).default,G=this&&this.__awaiter||function(I,g,C,A){return new(C||(C=Promise))((function(i,c){function G(I){try{b(A.next(I))}catch(g){c(g)}}function l(I){try{b(A.throw(I))}catch(g){c(g)}}function b(I){var g;I.done?i(I.value):(g=I.value,g instanceof C?g:new C((function(I){I(g)}))).then(G,l)}b((A=A.apply(I,g||[])).next())}))},l=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0}),g.spawn=void 0;var b=l(C(6087)),Z=C(3889),t=C(7003),o=C(4642),n=C(6179),u=C(5893),d=C(3339),m=b.default("threads:master:messages"),e=b.default("threads:master:spawn"),B=b.default("threads:master:thread-utils"),X="undefined"!==typeof process&&{NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}.THREADS_WORKER_INIT_TIMEOUT?Number.parseInt({NODE_ENV:"production",PUBLIC_URL:"",WDS_SOCKET_HOST:void 0,WDS_SOCKET_PATH:void 0,WDS_SOCKET_PORT:void 0,FAST_REFRESH:!0}.THREADS_WORKER_INIT_TIMEOUT,10):1e4;function y(I,g,C){return G(this,void 0,void 0,c().mark((function A(){var i,G,l;return c().wrap((function(A){for(;;)switch(A.prev=A.next){case 0:return G=new Promise((function(I,A){i=setTimeout((function(){return A(Error(C))}),g)})),A.next=3,Promise.race([I,G]);case 3:return l=A.sent,clearTimeout(i),A.abrupt("return",l);case 6:case"end":return A.stop()}}),A)})))}function V(I){return new Promise((function(g,C){I.addEventListener("message",(function A(i){var c;m("Message from worker before finishing initialization:",i.data),(c=i.data)&&"init"===c.type?(I.removeEventListener("message",A),g(i.data)):function(I){return I&&"uncaughtError"===I.type}(i.data)&&(I.removeEventListener("message",A),C(t.deserialize(i.data.error)))}))}))}function h(I,g){return new Z.Observable((function(C){var A=function(I){var g={type:u.WorkerEventType.message,data:I.data};C.next(g)},i=function(I){B("Unhandled promise rejection event in thread:",I);var g={type:u.WorkerEventType.internalError,error:Error(I.reason)};C.next(g)};I.addEventListener("message",A),I.addEventListener("unhandledrejection",i),g.then((function(){var g={type:u.WorkerEventType.termination};I.removeEventListener("message",A),I.removeEventListener("unhandledrejection",i),C.next(g),C.complete()}))}))}function a(I){var g=this,C=o.createPromiseWithResolver(),A=i(C,2),l=A[0],b=A[1];return{terminate:function(){return G(g,void 0,void 0,c().mark((function g(){return c().wrap((function(g){for(;;)switch(g.prev=g.next){case 0:return B("Terminating worker"),g.next=3,I.terminate();case 3:b();case 4:case"end":return g.stop()}}),g)})))},termination:l}}function s(I,g,C,i){var c,G=C.filter((function(I){return I.type===u.WorkerEventType.internalError})).map((function(I){return I.error}));return Object.assign(I,(A(c={},n.$errors,G),A(c,n.$events,C),A(c,n.$terminate,i),A(c,n.$worker,g),c))}g.spawn=function(I,g){return G(this,void 0,void 0,c().mark((function C(){var A,i,G,l,b,Z,t,o,n,u;return c().wrap((function(C){for(;;)switch(C.prev=C.next){case 0:return e("Initializing new thread"),A=g&&g.timeout?g.timeout:X,C.next=4,y(V(I),A,"Timeout: Did not receive an init message from worker after ".concat(A,"ms. Make sure the worker calls expose()."));case 4:if(i=C.sent,G=i.exposed,l=a(I),b=l.termination,Z=l.terminate,t=h(I,b),"function"!==G.type){C.next=13;break}return o=d.createProxyFunction(I),C.abrupt("return",s(o,I,t,Z));case 13:if("module"!==G.type){C.next=18;break}return n=d.createProxyModule(I,G.methods),C.abrupt("return",s(n,I,t,Z));case 18:throw u=G.type,Error("Worker init message states unexpected type of expose(): ".concat(u));case 20:case"end":return C.stop()}}),C)})))}},6629:function(I,g,C){"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.Thread=void 0;var A=C(6179);function i(I){throw Error(I)}g.Thread={errors:function(I){return I[A.$errors]||i("Error observable not found. Make sure to pass a thread instance as returned by the spawn() promise.")},events:function(I){return I[A.$events]||i("Events observable not found. Make sure to pass a thread instance as returned by the spawn() promise.")},terminate:function(I){return I[A.$terminate]()}}},2365:function(I,g,C){"use strict";var A=C(1187).default,i=C(4837).default,c=C(7868).default,G=C(36).default,l=C(8136).default,b=C(9663).default,Z=C(9823).default,t=C(6982).default;Object.defineProperty(g,"__esModule",{value:!0}),g.ObservablePromise=void 0;var o=C(3889),n=function(){},u=function(I){return I},d=function(I){return Promise.resolve().then(I)};function m(I){throw I}var e=function(I){Z(C,I);var g=t(C);function C(I){var A;return i(this,C),(A=g.call(this,(function(g){var C=G(A),i=Object.assign(Object.assign({},g),{complete:function(){g.complete(),C.onCompletion()},error:function(I){g.error(I),C.onError(I)},next:function(I){g.next(I),C.onNext(I)}});try{return A.initHasRun=!0,I(i)}catch(c){i.error(c)}}))).initHasRun=!1,A.fulfillmentCallbacks=[],A.rejectionCallbacks=[],A.firstValueSet=!1,A.state="pending",A}return c(C,[{key:"onNext",value:function(I){this.firstValueSet||(this.firstValue=I,this.firstValueSet=!0)}},{key:"onError",value:function(I){this.state="rejected",this.rejection=I;var g,C=A(this.rejectionCallbacks);try{var i=function(){var C=g.value;d((function(){return C(I)}))};for(C.s();!(g=C.n()).done;)i()}catch(c){C.e(c)}finally{C.f()}}},{key:"onCompletion",value:function(){var I=this;this.state="fulfilled";var g,C=A(this.fulfillmentCallbacks);try{var i=function(){var C=g.value;d((function(){return C(I.firstValue)}))};for(C.s();!(g=C.n()).done;)i()}catch(c){C.e(c)}finally{C.f()}}},{key:"then",value:function(I,g){var C=this,A=I||u,i=g||m,c=!1;return new Promise((function(I,g){var G=function(C){if(!c){c=!0;try{I(i(C))}catch(A){g(A)}}};return C.initHasRun||C.subscribe({error:G}),"fulfilled"===C.state?I(A(C.firstValue)):"rejected"===C.state?(c=!0,I(i(C.rejection))):(C.fulfillmentCallbacks.push((function(g){try{I(A(g))}catch(C){G(C)}})),void C.rejectionCallbacks.push(G))}))}},{key:"catch",value:function(I){return this.then(void 0,I)}},{key:"finally",value:function(I){var g=I||n;return this.then((function(I){return g(),I}),(function(){return g()}))}}],[{key:"from",value:function(I){return function(I){return I&&"function"===typeof I.then}(I)?new C((function(g){I.then((function(I){g.next(I),g.complete()}),(function(I){g.error(I)}))})):l(b(C),"from",this).call(this,I)}}]),C}(o.Observable);g.ObservablePromise=e},7793:function(I,g){"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.allSettled=void 0,g.allSettled=function(I){return Promise.all(I.map((function(I){var g=Promise.resolve(I);try{return g.then((function(I){return{status:"fulfilled",value:I}}),(function(I){return{status:"rejected",reason:I}}))}catch(C){return Promise.reject(C)}})))}},4642:function(I,g){"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.createPromiseWithResolver=void 0;var C=function(){};g.createPromiseWithResolver=function(){var I,g=!1,A=C;return[new Promise((function(C){g?C(I):A=C})),function(C){g=!0,A(I=C)}]}},7705:function(I,g){"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.DefaultSerializer=g.extendSerializer=void 0,g.extendSerializer=function(I,g){var C=I.deserialize.bind(I),A=I.serialize.bind(I);return{deserialize:function(I){return g.deserialize(I,C)},serialize:function(I){return g.serialize(I,A)}}};var C=function(I){return Object.assign(Error(I.message),{name:I.name,stack:I.stack})},A=function(I){return{__error_marker:"$$error",message:I.message,name:I.name,stack:I.stack}};g.DefaultSerializer={deserialize:function(I){return(g=I)&&"object"===typeof g&&"__error_marker"in g&&"$$error"===g.__error_marker?C(I):I;var g},serialize:function(I){return I instanceof Error?A(I):I}}},6179:function(I,g){"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.$worker=g.$transferable=g.$terminate=g.$events=g.$errors=void 0,g.$errors=Symbol("thread.errors"),g.$events=Symbol("thread.events"),g.$terminate=Symbol("thread.terminate"),g.$transferable=Symbol("thread.transferable"),g.$worker=Symbol("thread.worker")},2644:function(I,g,C){"use strict";var A=C(8726).default;Object.defineProperty(g,"__esModule",{value:!0}),g.Transfer=g.isTransferDescriptor=void 0;var i=C(6179);g.isTransferDescriptor=function(I){return I&&"object"===typeof I&&I[i.$transferable]},g.Transfer=function(I,g){var C,c;if(!g){if(!(c=I)||"object"!==typeof c)throw Error();g=[I]}return A(C={},i.$transferable,!0),A(C,"send",I),A(C,"transferables",g),C}},5893:function(I,g,C){"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.WorkerEventType=void 0;C(6179);!function(I){I.internalError="internalError",I.message="message",I.termination="termination"}(g.WorkerEventType||(g.WorkerEventType={}))},9235:function(I,g){"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.WorkerMessageType=g.MasterMessageType=void 0,function(I){I.cancel="cancel",I.run="run"}(g.MasterMessageType||(g.MasterMessageType={})),function(I){I.error="error",I.init="init",I.result="result",I.running="running",I.uncaughtError="uncaughtError"}(g.WorkerMessageType||(g.WorkerMessageType={}))},2617:function(I,g){"use strict";Object.defineProperty(g,"__esModule",{value:!0});g.default={isWorkerRuntime:function(){var I="undefined"!==typeof self&&"undefined"!==typeof Window&&self instanceof Window;return!("undefined"===typeof self||!self.postMessage||I)},postMessageToMaster:function(I,g){self.postMessage(I,g)},subscribeToMasterMessages:function(I){var g=function(g){I(g.data)};return self.addEventListener("message",g),function(){self.removeEventListener("message",g)}}}},9488:function(I,g,C){"use strict";var A=C(6670).default,i=C(7329).default,c=this&&this.__awaiter||function(I,g,C,A){return new(C||(C=Promise))((function(i,c){function G(I){try{b(A.next(I))}catch(g){c(g)}}function l(I){try{b(A.throw(I))}catch(g){c(g)}}function b(I){var g;I.done?i(I.value):(g=I.value,g instanceof C?g:new C((function(I){I(g)}))).then(G,l)}b((A=A.apply(I,g||[])).next())}))},G=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0}),g.expose=g.isWorkerRuntime=g.Transfer=g.registerSerializer=void 0;var l=G(C(8732)),b=C(7003),Z=C(2644),t=C(9235),o=G(C(2617)),n=C(7003);Object.defineProperty(g,"registerSerializer",{enumerable:!0,get:function(){return n.registerSerializer}});var u=C(2644);Object.defineProperty(g,"Transfer",{enumerable:!0,get:function(){return u.Transfer}}),g.isWorkerRuntime=o.default.isWorkerRuntime;var d=!1,m=new Map,e=function(I){return I&&I.type===t.MasterMessageType.run},B=function(I){return l.default(I)||function(I){return I&&"object"===typeof I&&"function"===typeof I.subscribe}(I)};function X(I){return Z.isTransferDescriptor(I)?{payload:I.send,transferables:I.transferables}:{payload:I,transferables:void 0}}function y(I,g){var C=X(g),A=C.payload,i=C.transferables,c={type:t.WorkerMessageType.error,uid:I,error:b.serialize(A)};o.default.postMessageToMaster(c,i)}function V(I,g,C){var A=X(C),i=A.payload,c=A.transferables,G={type:t.WorkerMessageType.result,uid:I,complete:!!g||void 0,payload:i};o.default.postMessageToMaster(G,c)}function h(I,g){var C={type:t.WorkerMessageType.running,uid:I,resultType:g};o.default.postMessageToMaster(C)}function a(I){try{var g={type:t.WorkerMessageType.uncaughtError,error:b.serialize(I)};o.default.postMessageToMaster(g)}catch(C){console.error("Not reporting uncaught error back to master thread as it occured while reporting an uncaught error already.\nLatest error:",C,"\nOriginal error:",I)}}function s(I,g,C){return c(this,void 0,void 0,A().mark((function c(){var G,l,Z,t;return A().wrap((function(A){for(;;)switch(A.prev=A.next){case 0:A.prev=0,G=g.apply(void 0,i(C)),A.next=7;break;case 4:return A.prev=4,A.t0=A.catch(0),A.abrupt("return",y(I,A.t0));case 7:if(l=B(G)?"observable":"promise",h(I,l),!B(G)){A.next=14;break}Z=G.subscribe((function(g){return V(I,!1,b.serialize(g))}),(function(g){y(I,b.serialize(g)),m.delete(I)}),(function(){V(I,!0),m.delete(I)})),m.set(I,Z),A.next=24;break;case 14:return A.prev=14,A.next=17,G;case 17:t=A.sent,V(I,!0,b.serialize(t)),A.next=24;break;case 21:A.prev=21,A.t1=A.catch(14),y(I,b.serialize(A.t1));case 24:case"end":return A.stop()}}),c,null,[[0,4],[14,21]])})))}g.expose=function(I){if(!o.default.isWorkerRuntime())throw Error("expose() called in the master thread.");if(d)throw Error("expose() called more than once. This is not possible. Pass an object to expose() if you want to expose multiple functions.");if(d=!0,"function"===typeof I)o.default.subscribeToMasterMessages((function(g){e(g)&&!g.method&&s(g.uid,I,g.args.map(b.deserialize))})),function(){var I={type:t.WorkerMessageType.init,exposed:{type:"function"}};o.default.postMessageToMaster(I)}();else{if("object"!==typeof I||!I)throw Error("Invalid argument passed to expose(). Expected a function or an object, got: ".concat(I));o.default.subscribeToMasterMessages((function(g){e(g)&&g.method&&s(g.uid,I[g.method],g.args.map(b.deserialize))})),function(I){var g={type:t.WorkerMessageType.init,exposed:{type:"module",methods:I}};o.default.postMessageToMaster(g)}(Object.keys(I).filter((function(g){return"function"===typeof I[g]})))}o.default.subscribeToMasterMessages((function(I){if((A=I)&&A.type===t.MasterMessageType.cancel){var g=I.uid,C=m.get(g);C&&(C.unsubscribe(),m.delete(g))}var A}))},"undefined"!==typeof self&&"function"===typeof self.addEventListener&&o.default.isWorkerRuntime()&&(self.addEventListener("error",(function(I){setTimeout((function(){return a(I.error||I)}),250)})),self.addEventListener("unhandledrejection",(function(I){var g=I.reason;g&&"string"===typeof g.message&&setTimeout((function(){return a(g)}),250)}))),"undefined"!==typeof process&&"function"===typeof process.on&&o.default.isWorkerRuntime()&&(process.on("uncaughtException",(function(I){setTimeout((function(){return a(I)}),250)})),process.on("unhandledRejection",(function(I){I&&"string"===typeof I.message&&setTimeout((function(){return a(I)}),250)})))},5077:function(I,g){"use strict";var C=this&&this.__awaiter||function(I,g,C,A){return new(C||(C=Promise))((function(i,c){function G(I){try{b(A.next(I))}catch(g){c(g)}}function l(I){try{b(A.throw(I))}catch(g){c(g)}}function b(I){var g;I.done?i(I.value):(g=I.value,g instanceof C?g:new C((function(I){I(g)}))).then(G,l)}b((A=A.apply(I,g||[])).next())}))},A=this&&this.__generator||function(I,g){var C,A,i,c,G={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return c={next:l(0),throw:l(1),return:l(2)},"function"===typeof Symbol&&(c[Symbol.iterator]=function(){return this}),c;function l(c){return function(l){return function(c){if(C)throw new TypeError("Generator is already executing.");for(;G;)try{if(C=1,A&&(i=2&c[0]?A.return:c[0]?A.throw||((i=A.return)&&i.call(A),0):A.next)&&!(i=i.call(A,c[1])).done)return i;switch(A=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return G.label++,{value:c[1],done:!1};case 5:G.label++,A=c[1],c=[0];continue;case 7:c=G.ops.pop(),G.trys.pop();continue;default:if(!(i=(i=G.trys).length>0&&i[i.length-1])&&(6===c[0]||2===c[0])){G=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){G.label=c[1];break}if(6===c[0]&&G.label<i[1]){G.label=i[1],i=c;break}if(i&&G.label<i[2]){G.label=i[2],G.ops.push(c);break}i[2]&&G.ops.pop(),G.trys.pop();continue}c=g.call(I,G)}catch(l){c=[6,l],A=0}finally{C=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,l])}}};Object.defineProperty(g,"__esModule",{value:!0}),g.LazyLoader=g.FluenceConnection=void 0;var i=function(){};g.FluenceConnection=i;var c=function(){function I(I){this.loadValue=I,this.value=null}return I.prototype.getValue=function(){if(null==this.value)throw new Error("Value has not been loaded. Call `start` method to load the value.");return this.value},I.prototype.start=function(){return C(this,void 0,void 0,(function(){var I;return A(this,(function(g){switch(g.label){case 0:return null!==this.value?[2]:(I=this,[4,this.loadValue()]);case 1:return I.value=g.sent(),[2]}}))}))},I.prototype.stop=function(){return C(this,void 0,void 0,(function(){return A(this,(function(I){return[2]}))}))},I}();g.LazyLoader=c},2064:function(I,g,C){"use strict";var A=this&&this.__awaiter||function(I,g,C,A){return new(C||(C=Promise))((function(i,c){function G(I){try{b(A.next(I))}catch(g){c(g)}}function l(I){try{b(A.throw(I))}catch(g){c(g)}}function b(I){var g;I.done?i(I.value):(g=I.value,g instanceof C?g:new C((function(I){I(g)}))).then(G,l)}b((A=A.apply(I,g||[])).next())}))},i=this&&this.__generator||function(I,g){var C,A,i,c,G={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return c={next:l(0),throw:l(1),return:l(2)},"function"===typeof Symbol&&(c[Symbol.iterator]=function(){return this}),c;function l(c){return function(l){return function(c){if(C)throw new TypeError("Generator is already executing.");for(;G;)try{if(C=1,A&&(i=2&c[0]?A.return:c[0]?A.throw||((i=A.return)&&i.call(A),0):A.next)&&!(i=i.call(A,c[1])).done)return i;switch(A=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return G.label++,{value:c[1],done:!1};case 5:G.label++,A=c[1],c=[0];continue;case 7:c=G.ops.pop(),G.trys.pop();continue;default:if(!(i=(i=G.trys).length>0&&i[i.length-1])&&(6===c[0]||2===c[0])){G=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){G.label=c[1];break}if(6===c[0]&&G.label<i[1]){G.label=i[1],i=c;break}if(i&&G.label<i[2]){G.label=i[2],G.ops.push(c);break}i[2]&&G.ops.pop(),G.trys.pop();continue}c=g.call(I,G)}catch(l){c=[6,l],A=0}finally{C=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,l])}}};Object.defineProperty(g,"__esModule",{value:!0}),g.MarineBackgroundRunner=void 0;var c=C(1901),G=C(913),l=function(){function I(I,g,C){this.workerLoader=I,this.controlModuleLoader=g,this.logFunction=C}return I.prototype.start=function(){return A(this,void 0,void 0,(function(){var I,g,C;return i(this,(function(A){switch(A.label){case 0:return this.workerThread?[2]:[4,this.workerLoader.start()];case 1:return A.sent(),[4,this.controlModuleLoader.start()];case 2:return A.sent(),I=this.workerLoader.getValue(),g=this.controlModuleLoader.getValue(),C=this,[4,(0,G.spawn)(I,{timeout:99999999})];case 3:return C.workerThread=A.sent(),this.workerThread.onLogMessage().subscribe(this.logFunction),[4,this.workerThread.init(g)];case 4:return A.sent(),[2]}}))}))},I.prototype.createService=function(I,g,C){if(!this.workerThread)throw"Worker is not initialized";var A=C?(0,c.logLevelToEnv)(C):{};return this.workerThread.createService(I,g,void 0,A)},I.prototype.callService=function(I,g,C,A){if(!this.workerThread)throw"Worker is not initialized";return this.workerThread.callService(I,g,C,A)},I.prototype.stop=function(){return A(this,void 0,void 0,(function(){return i(this,(function(I){switch(I.label){case 0:return this.workerThread?[4,this.workerThread.terminate()]:[2];case 1:return I.sent(),[4,G.Thread.terminate(this.workerThread)];case 2:return I.sent(),[2]}}))}))},I}();g.MarineBackgroundRunner=l},5338:function(I,g,C){"use strict";var A=this&&this.__extends||function(){var I=function(g,C){return I=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(I,g){I.__proto__=g}||function(I,g){for(var C in g)Object.prototype.hasOwnProperty.call(g,C)&&(I[C]=g[C])},I(g,C)};return function(g,C){if("function"!==typeof C&&null!==C)throw new TypeError("Class extends value "+String(C)+" is not a constructor or null");function A(){this.constructor=g}I(g,C),g.prototype=null===C?Object.create(C):(A.prototype=C.prototype,new A)}}(),i=this&&this.__awaiter||function(I,g,C,A){return new(C||(C=Promise))((function(i,c){function G(I){try{b(A.next(I))}catch(g){c(g)}}function l(I){try{b(A.throw(I))}catch(g){c(g)}}function b(I){var g;I.done?i(I.value):(g=I.value,g instanceof C?g:new C((function(I){I(g)}))).then(G,l)}b((A=A.apply(I,g||[])).next())}))},c=this&&this.__generator||function(I,g){var C,A,i,c,G={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return c={next:l(0),throw:l(1),return:l(2)},"function"===typeof Symbol&&(c[Symbol.iterator]=function(){return this}),c;function l(c){return function(l){return function(c){if(C)throw new TypeError("Generator is already executing.");for(;G;)try{if(C=1,A&&(i=2&c[0]?A.return:c[0]?A.throw||((i=A.return)&&i.call(A),0):A.next)&&!(i=i.call(A,c[1])).done)return i;switch(A=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return G.label++,{value:c[1],done:!1};case 5:G.label++,A=c[1],c=[0];continue;case 7:c=G.ops.pop(),G.trys.pop();continue;default:if(!(i=(i=G.trys).length>0&&i[i.length-1])&&(6===c[0]||2===c[0])){G=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){G.label=c[1];break}if(6===c[0]&&G.label<i[1]){G.label=i[1],i=c;break}if(i&&G.label<i[2]){G.label=i[2],G.ops.push(c);break}i[2]&&G.ops.pop(),G.trys.pop();continue}c=g.call(I,G)}catch(l){c=[6,l],A=0}finally{C=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,l])}}},G=this&&this.__importDefault||function(I){return I&&I.__esModule?I:{default:I}};Object.defineProperty(g,"__esModule",{value:!0}),g.InlinedWorkerLoader=g.WasmWebLoader=g.loadWasmFromServer=void 0;var l=C(913),b=C(2016),Z=C(5077),t=C(8698),o=G(C(8031)),n=function(I){var g=new SharedArrayBuffer(I.length);return new Uint8Array(g).set(I,0),g};g.loadWasmFromServer=function(I){return i(void 0,void 0,void 0,(function(){var g,C,A;return c(this,(function(i){switch(i.label){case 0:return g=window.location.origin+"/"+I,[4,fetch(g)];case 1:return[4,i.sent().arrayBuffer()];case 2:return C=i.sent(),new Uint8Array(C),A=b.Buffer.from(C),crossOriginIsolated?[2,n(A)]:[2,A]}}))}))};var u=function(I){function C(C){return I.call(this,(function(){return(0,g.loadWasmFromServer)(C)}))||this}return A(C,I),C}(Z.LazyLoader);g.WasmWebLoader=u;var d=function(I){function g(){return I.call(this,(function(){var I=(0,t.fromBase64)(o.default);return Promise.resolve(l.BlobWorker.fromText(I))}))||this}return A(g,I),g}(Z.LazyLoader);g.InlinedWorkerLoader=d},8031:function(I,g){"use strict";Object.defineProperty(g,"__esModule",{value:!0}),g.default=""},948:function(I){I.exports=function(I,g){(null==g||g>I.length)&&(g=I.length);for(var C=0,A=new Array(g);C<g;C++)A[C]=I[C];return A},I.exports.__esModule=!0,I.exports.default=I.exports},8860:function(I){I.exports=function(I){if(Array.isArray(I))return I},I.exports.__esModule=!0,I.exports.default=I.exports},141:function(I,g,C){var A=C(948);I.exports=function(I){if(Array.isArray(I))return A(I)},I.exports.__esModule=!0,I.exports.default=I.exports},36:function(I){I.exports=function(I){if(void 0===I)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return I},I.exports.__esModule=!0,I.exports.default=I.exports},4837:function(I){I.exports=function(I,g){if(!(I instanceof g))throw new TypeError("Cannot call a class as a function")},I.exports.__esModule=!0,I.exports.default=I.exports},1238:function(I,g,C){var A=C(5887),i=C(3496);function c(g,C,G){return i()?(I.exports=c=Reflect.construct.bind(),I.exports.__esModule=!0,I.exports.default=I.exports):(I.exports=c=function(I,g,C){var i=[null];i.push.apply(i,g);var c=new(Function.bind.apply(I,i));return C&&A(c,C.prototype),c},I.exports.__esModule=!0,I.exports.default=I.exports),c.apply(null,arguments)}I.exports=c,I.exports.__esModule=!0,I.exports.default=I.exports},7868:function(I,g,C){var A=C(7803);function i(I,g){for(var C=0;C<g.length;C++){var i=g[C];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(I,A(i.key),i)}}I.exports=function(I,g,C){return g&&i(I.prototype,g),C&&i(I,C),Object.defineProperty(I,"prototype",{writable:!1}),I},I.exports.__esModule=!0,I.exports.default=I.exports},1187:function(I,g,C){var A=C(6306);I.exports=function(I,g){var C="undefined"!==typeof Symbol&&I[Symbol.iterator]||I["@@iterator"];if(!C){if(Array.isArray(I)||(C=A(I))||g&&I&&"number"===typeof I.length){C&&(I=C);var i=0,c=function(){};return{s:c,n:function(){return i>=I.length?{done:!0}:{done:!1,value:I[i++]}},e:function(I){throw I},f:c}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var G,l=!0,b=!1;return{s:function(){C=C.call(I)},n:function(){var I=C.next();return l=I.done,I},e:function(I){b=!0,G=I},f:function(){try{l||null==C.return||C.return()}finally{if(b)throw G}}}},I.exports.__esModule=!0,I.exports.default=I.exports},6982:function(I,g,C){var A=C(9663),i=C(3496),c=C(8998);I.exports=function(I){var g=i();return function(){var C,i=A(I);if(g){var G=A(this).constructor;C=Reflect.construct(i,arguments,G)}else C=i.apply(this,arguments);return c(this,C)}},I.exports.__esModule=!0,I.exports.default=I.exports},8726:function(I,g,C){var A=C(7803);I.exports=function(I,g,C){return(g=A(g))in I?Object.defineProperty(I,g,{value:C,enumerable:!0,configurable:!0,writable:!0}):I[g]=C,I},I.exports.__esModule=!0,I.exports.default=I.exports},8136:function(I,g,C){var A=C(1502);function i(){return"undefined"!==typeof Reflect&&Reflect.get?(I.exports=i=Reflect.get.bind(),I.exports.__esModule=!0,I.exports.default=I.exports):(I.exports=i=function(I,g,C){var i=A(I,g);if(i){var c=Object.getOwnPropertyDescriptor(i,g);return c.get?c.get.call(arguments.length<3?I:C):c.value}},I.exports.__esModule=!0,I.exports.default=I.exports),i.apply(this,arguments)}I.exports=i,I.exports.__esModule=!0,I.exports.default=I.exports},9663:function(I){function g(C){return I.exports=g=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(I){return I.__proto__||Object.getPrototypeOf(I)},I.exports.__esModule=!0,I.exports.default=I.exports,g(C)}I.exports=g,I.exports.__esModule=!0,I.exports.default=I.exports},9823:function(I,g,C){var A=C(5887);I.exports=function(I,g){if("function"!==typeof g&&null!==g)throw new TypeError("Super expression must either be null or a function");I.prototype=Object.create(g&&g.prototype,{constructor:{value:I,writable:!0,configurable:!0}}),Object.defineProperty(I,"prototype",{writable:!1}),g&&A(I,g)},I.exports.__esModule=!0,I.exports.default=I.exports},9310:function(I){I.exports=function(I){return-1!==Function.toString.call(I).indexOf("[native code]")},I.exports.__esModule=!0,I.exports.default=I.exports},3496:function(I){I.exports=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(I){return!1}},I.exports.__esModule=!0,I.exports.default=I.exports},4187:function(I){I.exports=function(I){if("undefined"!==typeof Symbol&&null!=I[Symbol.iterator]||null!=I["@@iterator"])return Array.from(I)},I.exports.__esModule=!0,I.exports.default=I.exports},9118:function(I){I.exports=function(I,g){var C=null==I?null:"undefined"!=typeof Symbol&&I[Symbol.iterator]||I["@@iterator"];if(null!=C){var A,i,c,G,l=[],b=!0,Z=!1;try{if(c=(C=C.call(I)).next,0===g){if(Object(C)!==C)return;b=!1}else for(;!(b=(A=c.call(C)).done)&&(l.push(A.value),l.length!==g);b=!0);}catch(t){Z=!0,i=t}finally{try{if(!b&&null!=C.return&&(G=C.return(),Object(G)!==G))return}finally{if(Z)throw i}}return l}},I.exports.__esModule=!0,I.exports.default=I.exports},8677:function(I){I.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},I.exports.__esModule=!0,I.exports.default=I.exports},6006:function(I){I.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},I.exports.__esModule=!0,I.exports.default=I.exports},8998:function(I,g,C){var A=C(3758).default,i=C(36);I.exports=function(I,g){if(g&&("object"===A(g)||"function"===typeof g))return g;if(void 0!==g)throw new TypeError("Derived constructors may only return object or undefined");return i(I)},I.exports.__esModule=!0,I.exports.default=I.exports},6670:function(I,g,C){var A=C(3758).default;function i(){"use strict";I.exports=i=function(){return g},I.exports.__esModule=!0,I.exports.default=I.exports;var g={},C=Object.prototype,c=C.hasOwnProperty,G=Object.defineProperty||function(I,g,C){I[g]=C.value},l="function"==typeof Symbol?Symbol:{},b=l.iterator||"@@iterator",Z=l.asyncIterator||"@@asyncIterator",t=l.toStringTag||"@@toStringTag";function o(I,g,C){return Object.defineProperty(I,g,{value:C,enumerable:!0,configurable:!0,writable:!0}),I[g]}try{o({},"")}catch(H){o=function(I,g,C){return I[g]=C}}function n(I,g,C,A){var i=g&&g.prototype instanceof m?g:m,c=Object.create(i.prototype),l=new p(A||[]);return G(c,"_invoke",{value:r(I,C,l)}),c}function u(I,g,C){try{return{type:"normal",arg:I.call(g,C)}}catch(H){return{type:"throw",arg:H}}}g.wrap=n;var d={};function m(){}function e(){}function B(){}var X={};o(X,b,(function(){return this}));var y=Object.getPrototypeOf,V=y&&y(y(K([])));V&&V!==C&&c.call(V,b)&&(X=V);var h=B.prototype=m.prototype=Object.create(X);function a(I){["next","throw","return"].forEach((function(g){o(I,g,(function(I){return this._invoke(g,I)}))}))}function s(I,g){function C(i,G,l,b){var Z=u(I[i],I,G);if("throw"!==Z.type){var t=Z.arg,o=t.value;return o&&"object"==A(o)&&c.call(o,"__await")?g.resolve(o.__await).then((function(I){C("next",I,l,b)}),(function(I){C("throw",I,l,b)})):g.resolve(o).then((function(I){t.value=I,l(t)}),(function(I){return C("throw",I,l,b)}))}b(Z.arg)}var i;G(this,"_invoke",{value:function(I,A){function c(){return new g((function(g,i){C(I,A,g,i)}))}return i=i?i.then(c,c):c()}})}function r(I,g,C){var A="suspendedStart";return function(i,c){if("executing"===A)throw new Error("Generator is already running");if("completed"===A){if("throw"===i)throw c;return R()}for(C.method=i,C.arg=c;;){var G=C.delegate;if(G){var l=Y(G,C);if(l){if(l===d)continue;return l}}if("next"===C.method)C.sent=C._sent=C.arg;else if("throw"===C.method){if("suspendedStart"===A)throw A="completed",C.arg;C.dispatchException(C.arg)}else"return"===C.method&&C.abrupt("return",C.arg);A="executing";var b=u(I,g,C);if("normal"===b.type){if(A=C.done?"completed":"suspendedYield",b.arg===d)continue;return{value:b.arg,done:C.done}}"throw"===b.type&&(A="completed",C.method="throw",C.arg=b.arg)}}}function Y(I,g){var C=g.method,A=I.iterator[C];if(void 0===A)return g.delegate=null,"throw"===C&&I.iterator.return&&(g.method="return",g.arg=void 0,Y(I,g),"throw"===g.method)||"return"!==C&&(g.method="throw",g.arg=new TypeError("The iterator does not provide a '"+C+"' method")),d;var i=u(A,I.iterator,g.arg);if("throw"===i.type)return g.method="throw",g.arg=i.arg,g.delegate=null,d;var c=i.arg;return c?c.done?(g[I.resultName]=c.value,g.next=I.nextLoc,"return"!==g.method&&(g.method="next",g.arg=void 0),g.delegate=null,d):c:(g.method="throw",g.arg=new TypeError("iterator result is not an object"),g.delegate=null,d)}function W(I){var g={tryLoc:I[0]};1 in I&&(g.catchLoc=I[1]),2 in I&&(g.finallyLoc=I[2],g.afterLoc=I[3]),this.tryEntries.push(g)}function S(I){var g=I.completion||{};g.type="normal",delete g.arg,I.completion=g}function p(I){this.tryEntries=[{tryLoc:"root"}],I.forEach(W,this),this.reset(!0)}function K(I){if(I){var g=I[b];if(g)return g.call(I);if("function"==typeof I.next)return I;if(!isNaN(I.length)){var C=-1,A=function g(){for(;++C<I.length;)if(c.call(I,C))return g.value=I[C],g.done=!1,g;return g.value=void 0,g.done=!0,g};return A.next=A}}return{next:R}}function R(){return{value:void 0,done:!0}}return e.prototype=B,G(h,"constructor",{value:B,configurable:!0}),G(B,"constructor",{value:e,configurable:!0}),e.displayName=o(B,t,"GeneratorFunction"),g.isGeneratorFunction=function(I){var g="function"==typeof I&&I.constructor;return!!g&&(g===e||"GeneratorFunction"===(g.displayName||g.name))},g.mark=function(I){return Object.setPrototypeOf?Object.setPrototypeOf(I,B):(I.__proto__=B,o(I,t,"GeneratorFunction")),I.prototype=Object.create(h),I},g.awrap=function(I){return{__await:I}},a(s.prototype),o(s.prototype,Z,(function(){return this})),g.AsyncIterator=s,g.async=function(I,C,A,i,c){void 0===c&&(c=Promise);var G=new s(n(I,C,A,i),c);return g.isGeneratorFunction(C)?G:G.next().then((function(I){return I.done?I.value:G.next()}))},a(h),o(h,t,"Generator"),o(h,b,(function(){return this})),o(h,"toString",(function(){return"[object Generator]"})),g.keys=function(I){var g=Object(I),C=[];for(var A in g)C.push(A);return C.reverse(),function I(){for(;C.length;){var A=C.pop();if(A in g)return I.value=A,I.done=!1,I}return I.done=!0,I}},g.values=K,p.prototype={constructor:p,reset:function(I){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(S),!I)for(var g in this)"t"===g.charAt(0)&&c.call(this,g)&&!isNaN(+g.slice(1))&&(this[g]=void 0)},stop:function(){this.done=!0;var I=this.tryEntries[0].completion;if("throw"===I.type)throw I.arg;return this.rval},dispatchException:function(I){if(this.done)throw I;var g=this;function C(C,A){return G.type="throw",G.arg=I,g.next=C,A&&(g.method="next",g.arg=void 0),!!A}for(var A=this.tryEntries.length-1;A>=0;--A){var i=this.tryEntries[A],G=i.completion;if("root"===i.tryLoc)return C("end");if(i.tryLoc<=this.prev){var l=c.call(i,"catchLoc"),b=c.call(i,"finallyLoc");if(l&&b){if(this.prev<i.catchLoc)return C(i.catchLoc,!0);if(this.prev<i.finallyLoc)return C(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return C(i.catchLoc,!0)}else{if(!b)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return C(i.finallyLoc)}}}},abrupt:function(I,g){for(var C=this.tryEntries.length-1;C>=0;--C){var A=this.tryEntries[C];if(A.tryLoc<=this.prev&&c.call(A,"finallyLoc")&&this.prev<A.finallyLoc){var i=A;break}}i&&("break"===I||"continue"===I)&&i.tryLoc<=g&&g<=i.finallyLoc&&(i=null);var G=i?i.completion:{};return G.type=I,G.arg=g,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(G)},complete:function(I,g){if("throw"===I.type)throw I.arg;return"break"===I.type||"continue"===I.type?this.next=I.arg:"return"===I.type?(this.rval=this.arg=I.arg,this.method="return",this.next="end"):"normal"===I.type&&g&&(this.next=g),d},finish:function(I){for(var g=this.tryEntries.length-1;g>=0;--g){var C=this.tryEntries[g];if(C.finallyLoc===I)return this.complete(C.completion,C.afterLoc),S(C),d}},catch:function(I){for(var g=this.tryEntries.length-1;g>=0;--g){var C=this.tryEntries[g];if(C.tryLoc===I){var A=C.completion;if("throw"===A.type){var i=A.arg;S(C)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(I,g,C){return this.delegate={iterator:K(I),resultName:g,nextLoc:C},"next"===this.method&&(this.arg=void 0),d}},g}I.exports=i,I.exports.__esModule=!0,I.exports.default=I.exports},5887:function(I){function g(C,A){return I.exports=g=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(I,g){return I.__proto__=g,I},I.exports.__esModule=!0,I.exports.default=I.exports,g(C,A)}I.exports=g,I.exports.__esModule=!0,I.exports.default=I.exports},6843:function(I,g,C){var A=C(8860),i=C(9118),c=C(6306),G=C(8677);I.exports=function(I,g){return A(I)||i(I,g)||c(I,g)||G()},I.exports.__esModule=!0,I.exports.default=I.exports},1502:function(I,g,C){var A=C(9663);I.exports=function(I,g){for(;!Object.prototype.hasOwnProperty.call(I,g)&&null!==(I=A(I)););return I},I.exports.__esModule=!0,I.exports.default=I.exports},7329:function(I,g,C){var A=C(141),i=C(4187),c=C(6306),G=C(6006);I.exports=function(I){return A(I)||i(I)||c(I)||G()},I.exports.__esModule=!0,I.exports.default=I.exports},974:function(I,g,C){var A=C(3758).default;I.exports=function(I,g){if("object"!==A(I)||null===I)return I;var C=I[Symbol.toPrimitive];if(void 0!==C){var i=C.call(I,g||"default");if("object"!==A(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===g?String:Number)(I)},I.exports.__esModule=!0,I.exports.default=I.exports},7803:function(I,g,C){var A=C(3758).default,i=C(974);I.exports=function(I){var g=i(I,"string");return"symbol"===A(g)?g:String(g)},I.exports.__esModule=!0,I.exports.default=I.exports},3758:function(I){function g(C){return I.exports=g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(I){return typeof I}:function(I){return I&&"function"==typeof Symbol&&I.constructor===Symbol&&I!==Symbol.prototype?"symbol":typeof I},I.exports.__esModule=!0,I.exports.default=I.exports,g(C)}I.exports=g,I.exports.__esModule=!0,I.exports.default=I.exports},6306:function(I,g,C){var A=C(948);I.exports=function(I,g){if(I){if("string"===typeof I)return A(I,g);var C=Object.prototype.toString.call(I).slice(8,-1);return"Object"===C&&I.constructor&&(C=I.constructor.name),"Map"===C||"Set"===C?Array.from(I):"Arguments"===C||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(C)?A(I,g):void 0}},I.exports.__esModule=!0,I.exports.default=I.exports},2975:function(I,g,C){var A=C(9663),i=C(5887),c=C(9310),G=C(1238);function l(g){var C="function"===typeof Map?new Map:void 0;return I.exports=l=function(I){if(null===I||!c(I))return I;if("function"!==typeof I)throw new TypeError("Super expression must either be null or a function");if("undefined"!==typeof C){if(C.has(I))return C.get(I);C.set(I,g)}function g(){return G(I,arguments,A(this).constructor)}return g.prototype=Object.create(I.prototype,{constructor:{value:g,enumerable:!1,writable:!0,configurable:!0}}),i(g,I)},I.exports.__esModule=!0,I.exports.default=I.exports,l(g)}I.exports=l,I.exports.__esModule=!0,I.exports.default=I.exports},6257:function(I,g,C){"use strict";C.d(g,{Z:function(){return i}});var A=C(2641);function i(){i=function(){return I};var I={},g=Object.prototype,C=g.hasOwnProperty,c=Object.defineProperty||function(I,g,C){I[g]=C.value},G="function"==typeof Symbol?Symbol:{},l=G.iterator||"@@iterator",b=G.asyncIterator||"@@asyncIterator",Z=G.toStringTag||"@@toStringTag";function t(I,g,C){return Object.defineProperty(I,g,{value:C,enumerable:!0,configurable:!0,writable:!0}),I[g]}try{t({},"")}catch(R){t=function(I,g,C){return I[g]=C}}function o(I,g,C,A){var i=g&&g.prototype instanceof d?g:d,G=Object.create(i.prototype),l=new S(A||[]);return c(G,"_invoke",{value:s(I,C,l)}),G}function n(I,g,C){try{return{type:"normal",arg:I.call(g,C)}}catch(R){return{type:"throw",arg:R}}}I.wrap=o;var u={};function d(){}function m(){}function e(){}var B={};t(B,l,(function(){return this}));var X=Object.getPrototypeOf,y=X&&X(X(p([])));y&&y!==g&&C.call(y,l)&&(B=y);var V=e.prototype=d.prototype=Object.create(B);function h(I){["next","throw","return"].forEach((function(g){t(I,g,(function(I){return this._invoke(g,I)}))}))}function a(I,g){function i(c,G,l,b){var Z=n(I[c],I,G);if("throw"!==Z.type){var t=Z.arg,o=t.value;return o&&"object"==(0,A.Z)(o)&&C.call(o,"__await")?g.resolve(o.__await).then((function(I){i("next",I,l,b)}),(function(I){i("throw",I,l,b)})):g.resolve(o).then((function(I){t.value=I,l(t)}),(function(I){return i("throw",I,l,b)}))}b(Z.arg)}var G;c(this,"_invoke",{value:function(I,C){function A(){return new g((function(g,A){i(I,C,g,A)}))}return G=G?G.then(A,A):A()}})}function s(I,g,C){var A="suspendedStart";return function(i,c){if("executing"===A)throw new Error("Generator is already running");if("completed"===A){if("throw"===i)throw c;return K()}for(C.method=i,C.arg=c;;){var G=C.delegate;if(G){var l=r(G,C);if(l){if(l===u)continue;return l}}if("next"===C.method)C.sent=C._sent=C.arg;else if("throw"===C.method){if("suspendedStart"===A)throw A="completed",C.arg;C.dispatchException(C.arg)}else"return"===C.method&&C.abrupt("return",C.arg);A="executing";var b=n(I,g,C);if("normal"===b.type){if(A=C.done?"completed":"suspendedYield",b.arg===u)continue;return{value:b.arg,done:C.done}}"throw"===b.type&&(A="completed",C.method="throw",C.arg=b.arg)}}}function r(I,g){var C=g.method,A=I.iterator[C];if(void 0===A)return g.delegate=null,"throw"===C&&I.iterator.return&&(g.method="return",g.arg=void 0,r(I,g),"throw"===g.method)||"return"!==C&&(g.method="throw",g.arg=new TypeError("The iterator does not provide a '"+C+"' method")),u;var i=n(A,I.iterator,g.arg);if("throw"===i.type)return g.method="throw",g.arg=i.arg,g.delegate=null,u;var c=i.arg;return c?c.done?(g[I.resultName]=c.value,g.next=I.nextLoc,"return"!==g.method&&(g.method="next",g.arg=void 0),g.delegate=null,u):c:(g.method="throw",g.arg=new TypeError("iterator result is not an object"),g.delegate=null,u)}function Y(I){var g={tryLoc:I[0]};1 in I&&(g.catchLoc=I[1]),2 in I&&(g.finallyLoc=I[2],g.afterLoc=I[3]),this.tryEntries.push(g)}function W(I){var g=I.completion||{};g.type="normal",delete g.arg,I.completion=g}function S(I){this.tryEntries=[{tryLoc:"root"}],I.forEach(Y,this),this.reset(!0)}function p(I){if(I){var g=I[l];if(g)return g.call(I);if("function"==typeof I.next)return I;if(!isNaN(I.length)){var A=-1,i=function g(){for(;++A<I.length;)if(C.call(I,A))return g.value=I[A],g.done=!1,g;return g.value=void 0,g.done=!0,g};return i.next=i}}return{next:K}}function K(){return{value:void 0,done:!0}}return m.prototype=e,c(V,"constructor",{value:e,configurable:!0}),c(e,"constructor",{value:m,configurable:!0}),m.displayName=t(e,Z,"GeneratorFunction"),I.isGeneratorFunction=function(I){var g="function"==typeof I&&I.constructor;return!!g&&(g===m||"GeneratorFunction"===(g.displayName||g.name))},I.mark=function(I){return Object.setPrototypeOf?Object.setPrototypeOf(I,e):(I.__proto__=e,t(I,Z,"GeneratorFunction")),I.prototype=Object.create(V),I},I.awrap=function(I){return{__await:I}},h(a.prototype),t(a.prototype,b,(function(){return this})),I.AsyncIterator=a,I.async=function(g,C,A,i,c){void 0===c&&(c=Promise);var G=new a(o(g,C,A,i),c);return I.isGeneratorFunction(C)?G:G.next().then((function(I){return I.done?I.value:G.next()}))},h(V),t(V,Z,"Generator"),t(V,l,(function(){return this})),t(V,"toString",(function(){return"[object Generator]"})),I.keys=function(I){var g=Object(I),C=[];for(var A in g)C.push(A);return C.reverse(),function I(){for(;C.length;){var A=C.pop();if(A in g)return I.value=A,I.done=!1,I}return I.done=!0,I}},I.values=p,S.prototype={constructor:S,reset:function(I){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(W),!I)for(var g in this)"t"===g.charAt(0)&&C.call(this,g)&&!isNaN(+g.slice(1))&&(this[g]=void 0)},stop:function(){this.done=!0;var I=this.tryEntries[0].completion;if("throw"===I.type)throw I.arg;return this.rval},dispatchException:function(I){if(this.done)throw I;var g=this;function A(C,A){return G.type="throw",G.arg=I,g.next=C,A&&(g.method="next",g.arg=void 0),!!A}for(var i=this.tryEntries.length-1;i>=0;--i){var c=this.tryEntries[i],G=c.completion;if("root"===c.tryLoc)return A("end");if(c.tryLoc<=this.prev){var l=C.call(c,"catchLoc"),b=C.call(c,"finallyLoc");if(l&&b){if(this.prev<c.catchLoc)return A(c.catchLoc,!0);if(this.prev<c.finallyLoc)return A(c.finallyLoc)}else if(l){if(this.prev<c.catchLoc)return A(c.catchLoc,!0)}else{if(!b)throw new Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return A(c.finallyLoc)}}}},abrupt:function(I,g){for(var A=this.tryEntries.length-1;A>=0;--A){var i=this.tryEntries[A];if(i.tryLoc<=this.prev&&C.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var c=i;break}}c&&("break"===I||"continue"===I)&&c.tryLoc<=g&&g<=c.finallyLoc&&(c=null);var G=c?c.completion:{};return G.type=I,G.arg=g,c?(this.method="next",this.next=c.finallyLoc,u):this.complete(G)},complete:function(I,g){if("throw"===I.type)throw I.arg;return"break"===I.type||"continue"===I.type?this.next=I.arg:"return"===I.type?(this.rval=this.arg=I.arg,this.method="return",this.next="end"):"normal"===I.type&&g&&(this.next=g),u},finish:function(I){for(var g=this.tryEntries.length-1;g>=0;--g){var C=this.tryEntries[g];if(C.finallyLoc===I)return this.complete(C.completion,C.afterLoc),W(C),u}},catch:function(I){for(var g=this.tryEntries.length-1;g>=0;--g){var C=this.tryEntries[g];if(C.tryLoc===I){var A=C.completion;if("throw"===A.type){var i=A.arg;W(C)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(I,g,C){return this.delegate={iterator:p(I),resultName:g,nextLoc:C},"next"===this.method&&(this.arg=void 0),u}},I}},2641:function(I,g,C){"use strict";function A(I){return A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(I){return typeof I}:function(I){return I&&"function"==typeof Symbol&&I.constructor===Symbol&&I!==Symbol.prototype?"symbol":typeof I},A(I)}C.d(g,{Z:function(){return A}})}},g={};function C(A){var i=g[A];if(void 0!==i)return i.exports;var c=g[A]={exports:{}};return I[A].call(c.exports,c,c.exports,C),c.exports}C.d=function(I,g){for(var A in g)C.o(g,A)&&!C.o(I,A)&&Object.defineProperty(I,A,{enumerable:!0,get:g[A]})},C.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(I){if("object"===typeof window)return window}}(),C.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},C.r=function(I){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},function(){"use strict";var I=C(6257);function g(I,g,C,A,i,c,G){try{var l=I[c](G),b=l.value}catch(Z){return void C(Z)}l.done?g(b):Promise.resolve(b).then(A,i)}var A=C(2064),i=C(5338),c=C(6329),G="function"===typeof atob,l="function"===typeof Buffer,b=("function"===typeof TextDecoder&&new TextDecoder,"function"===typeof TextEncoder&&new TextEncoder,Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=")),Z=function(I){var g={};return I.forEach((function(I,C){return g[I]=C})),g}(b),t=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,o=String.fromCharCode.bind(String),n="function"===typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):function(I){var g=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(I){return I};return new Uint8Array(Array.prototype.slice.call(I,0).map(g))},u=function(I){return I.replace(/[^A-Za-z0-9\+\/]/g,"")},d=function(I){if(I=I.replace(/\s+/g,""),!t.test(I))throw new TypeError("malformed base64.");I+="==".slice(2-(3&I.length));for(var g,C,A,i="",c=0;c<I.length;)g=Z[I.charAt(c++)]<<18|Z[I.charAt(c++)]<<12|(C=Z[I.charAt(c++)])<<6|(A=Z[I.charAt(c++)]),i+=64===C?o(g>>16&255):64===A?o(g>>16&255,g>>8&255):o(g>>16&255,g>>8&255,255&g);return i},m=G?function(I){return atob(u(I))}:l?function(I){return Buffer.from(I,"base64").toString("binary")}:d,e=l?function(I){return n(Buffer.from(I,"base64"))}:function(I){return n(m(I),(function(I){return I.charCodeAt(0)}))},B=function(I){return e(X(I))},X=function(I){return u(I.replace(/[-_]/g,(function(I){return"-"==I?"+":"/"})))},y="12D3KooWNzutuy8WHXDKFqFsATvCR6j9cj2FijYbnd47geRKaQZS",V=function(I){return B(I)},h=function(){var C,G=(C=(0,I.Z)().mark((function g(){var C,G,l,b,Z,t,o;return(0,I.Z)().wrap((function(I){for(;;)switch(I.prev=I.next){case 0:return C=new i.WasmWebLoader("avm.wasm"),G=new i.WasmWebLoader("marine-js.wasm"),l=new i.InlinedWorkerLoader,b=new A.MarineBackgroundRunner(l,G,(function(){})),I.next=6,b.start();case 6:return I.next=8,C.start();case 8:return I.next=10,C.getValue();case 10:return Z=I.sent,I.next=13,b.createService(Z,"avm");case 13:return t='(seq\n            (par \n                (call "'.concat(y,'" ("local_service_id" "local_fn_name") [] result_1)\n                (call "remote_peer_id" ("service_id" "fn_name") [] g)\n            )\n            (call "').concat(y,'" ("local_service_id" "local_fn_name") [] result_2)\n        )'),I.next=16,(0,c.callAvm)((function(I){return b.callService("avm","invoke",I,void 0)}),{currentPeerId:y,initPeerId:y,timestamp:Date.now(),ttl:1e4},t,V(""),V(""),[]);case 16:return o=I.sent,I.next=19,b.stop();case 19:return I.abrupt("return",o);case 20:case"end":return I.stop()}}),g)})),function(){var I=this,A=arguments;return new Promise((function(i,c){var G=C.apply(I,A);function l(I){g(G,i,c,l,b,"next",I)}function b(I){g(G,i,c,l,b,"throw",I)}l(void 0)}))});return function(){return G.apply(this,arguments)}}();window.MAIN=h}()}();
//# sourceMappingURL=main.782b7b60.js.map