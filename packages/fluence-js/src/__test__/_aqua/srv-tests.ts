/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.5-342
 *
 */
import { Fluence, FluencePeer } from '../../index';
import { CallParams, callFunction, registerService } from '../../internal/compilerSupport/v3';

// Services

// Functions

export function service_removed(file_path: string, config?: { ttl?: number }): Promise<string>;

export function service_removed(peer: FluencePeer, file_path: string, config?: { ttl?: number }): Promise<string>;

export function service_removed(...args: any) {
    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "file_path") [] file_path)
                          )
                          (call %init_peer_id% ("single_module_srv" "read_file") [file_path] wasm)
                         )
                         (call %init_peer_id% ("single_module_srv" "create") [wasm] id)
                        )
                        (call %init_peer_id% ("single_module_srv" "remove") [wasm])
                       )
                       (xor
                        (call %init_peer_id% (id "greeting") ["test"] dontcare)
                        (null)
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [%last_error%.$.message!])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'service_removed',
            arrow: {
                tag: 'arrow',
                domain: {
                    tag: 'labeledProduct',
                    fields: {
                        file_path: {
                            tag: 'scalar',
                            name: 'string',
                        },
                    },
                },
                codomain: {
                    tag: 'unlabeledProduct',
                    items: [
                        {
                            tag: 'scalar',
                            name: 'string',
                        },
                    ],
                },
            },
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}

export function happy_path(file_path: string, config?: { ttl?: number }): Promise<string>;

export function happy_path(peer: FluencePeer, file_path: string, config?: { ttl?: number }): Promise<string>;

export function happy_path(...args: any) {
    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "file_path") [] file_path)
                         )
                         (call %init_peer_id% ("single_module_srv" "read_file") [file_path] wasm)
                        )
                        (call %init_peer_id% ("single_module_srv" "create") [wasm] id)
                       )
                       (call %init_peer_id% (id "greeting") ["test"] greeting)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [greeting])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'happy_path',
            arrow: {
                tag: 'arrow',
                domain: {
                    tag: 'labeledProduct',
                    fields: {
                        file_path: {
                            tag: 'scalar',
                            name: 'string',
                        },
                    },
                },
                codomain: {
                    tag: 'unlabeledProduct',
                    items: [
                        {
                            tag: 'scalar',
                            name: 'string',
                        },
                    ],
                },
            },
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}
