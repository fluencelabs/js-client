/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.0-285
 *
 */
import { Fluence, FluencePeer } from '../../index';
import { CallParams, callFunction, registerService } from '../../internal/compilerSupport/v3';

// Services

export interface GreetingDef {
    greeting: (name: string, callParams: CallParams<'name'>) => string | Promise<string>;
    greeting_record: (
        callParams: CallParams<null>,
    ) => { num: number; str: string } | Promise<{ num: number; str: string }>;
}
export function registerGreeting(service: GreetingDef): void;
export function registerGreeting(serviceId: string, service: GreetingDef): void;
export function registerGreeting(peer: FluencePeer, service: GreetingDef): void;
export function registerGreeting(peer: FluencePeer, serviceId: string, service: GreetingDef): void;

export function registerGreeting(...args: any) {
    registerService(args, {
        defaultServiceId: 'greeting',
        functions: {
            tag: 'labeledProduct',
            fields: {
                greeting: {
                    tag: 'arrow',
                    domain: {
                        tag: 'labeledProduct',
                        fields: {
                            name: {
                                tag: 'scalar',
                                name: 'string',
                            },
                        },
                    },
                    codomain: {
                        tag: 'unlabeledProduct',
                        items: [
                            {
                                tag: 'scalar',
                                name: 'string',
                            },
                        ],
                    },
                },
                greeting_record: {
                    tag: 'arrow',
                    domain: {
                        tag: 'nil',
                    },
                    codomain: {
                        tag: 'unlabeledProduct',
                        items: [
                            {
                                tag: 'struct',
                                name: 'GreetingRecord',
                                fields: {
                                    num: {
                                        tag: 'scalar',
                                        name: 'i32',
                                    },
                                    str: {
                                        tag: 'scalar',
                                        name: 'string',
                                    },
                                },
                            },
                        ],
                    },
                },
            },
        },
    });
}

// Functions

export function call(arg: string, config?: { ttl?: number }): Promise<string>;

export function call(peer: FluencePeer, arg: string, config?: { ttl?: number }): Promise<string>;

export function call(...args: any) {
    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "arg") [] arg)
                         )
                         (call %init_peer_id% ("greeting" "greeting") [arg] res1)
                        )
                        (call %init_peer_id% ("greeting" "greeting") [res1] res2)
                       )
                       (call %init_peer_id% ("greeting" "greeting") [res2] res3)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res3])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'call',
            arrow: {
                tag: 'arrow',
                domain: {
                    tag: 'labeledProduct',
                    fields: {
                        arg: {
                            tag: 'scalar',
                            name: 'string',
                        },
                    },
                },
                codomain: {
                    tag: 'unlabeledProduct',
                    items: [
                        {
                            tag: 'scalar',
                            name: 'string',
                        },
                    ],
                },
            },
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}
