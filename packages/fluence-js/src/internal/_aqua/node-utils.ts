/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.5-342
 *
 */
 import { Fluence, FluencePeer } from '../../index';
 import { CallParams, callFunction, registerService } from '../../internal/compilerSupport/v3';


// Services

export interface NodeUtilsDef {
    read_file: (path: string, callParams: CallParams<'path'>) => { content: string | null; error: string | null; success: boolean; } | Promise<{ content: string | null; error: string | null; success: boolean; }>;
}
export function registerNodeUtils(service: NodeUtilsDef): void;
export function registerNodeUtils(serviceId: string, service: NodeUtilsDef): void;
export function registerNodeUtils(peer: FluencePeer, service: NodeUtilsDef): void;
export function registerNodeUtils(peer: FluencePeer, serviceId: string, service: NodeUtilsDef): void;
       

export function registerNodeUtils(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "node_utils",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "read_file" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "path" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "ReadFileResult",
                            "fields" : {
                                "content" : {
                                    "tag" : "option",
                                    "type" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                },
                                "error" : {
                                    "tag" : "option",
                                    "type" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                },
                                "success" : {
                                    "tag" : "scalar",
                                    "name" : "bool"
                                }
                            }
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions

