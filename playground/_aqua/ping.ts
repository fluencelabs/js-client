/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.0-287
 *
 */
import { Fluence, FluencePeer } from '../../src';
import { CallParams, callFunction, registerService } from '../../src/internal/compilerSupport/v3';

// Services

export interface OpDef {
    identity: (arg0: string, callParams: CallParams<'arg0'>) => string | Promise<string>;
}
export function registerOp(service: OpDef): void;
export function registerOp(serviceId: string, service: OpDef): void;
export function registerOp(peer: FluencePeer, service: OpDef): void;
export function registerOp(peer: FluencePeer, serviceId: string, service: OpDef): void;

export function registerOp(...args: any) {
    registerService(args, {
        defaultServiceId: 'op',
        functions: {
            tag: 'labeledProduct',
            fields: {
                identity: {
                    tag: 'arrow',
                    domain: {
                        tag: 'unlabeledProduct',
                        items: [
                            {
                                tag: 'scalar',
                                name: 'string',
                            },
                        ],
                    },
                    codomain: {
                        tag: 'unlabeledProduct',
                        items: [
                            {
                                tag: 'scalar',
                                name: 'string',
                            },
                        ],
                    },
                },
            },
        },
    });
}

// Functions

export function ping(arg: string, config?: { ttl?: number }): Promise<string>;

export function ping(peer: FluencePeer, arg: string, config?: { ttl?: number }): Promise<string>;

export function ping(...args: any) {
    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "arg") [] arg)
                       )
                       (xor
                        (call -relay- ("op" "identity") [arg])
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [arg])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'ping',
            arrow: {
                tag: 'arrow',
                domain: {
                    tag: 'labeledProduct',
                    fields: {
                        arg: {
                            tag: 'scalar',
                            name: 'string',
                        },
                    },
                },
                codomain: {
                    tag: 'unlabeledProduct',
                    items: [
                        {
                            tag: 'scalar',
                            name: 'string',
                        },
                    ],
                },
            },
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}
