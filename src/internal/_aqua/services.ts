/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.5.3-258
 *
 */
import { Fluence, FluencePeer } from '../../';
import { CallParams, callFunction, registerService } from '../../internal/compilerSupport/v2';

// Services

export interface SigDef {
    get_pub_key: (callParams: CallParams<null>) => string | Promise<string>;
    sign: (
        data: number[],
        callParams: CallParams<'data'>,
    ) =>
        | { error: string | null; signature: number[] | null; success: boolean }
        | Promise<{ error: string | null; signature: number[] | null; success: boolean }>;
    verify: (
        signature: number[],
        data: number[],
        callParams: CallParams<'signature' | 'data'>,
    ) => boolean | Promise<boolean>;
}
export function registerSig(service: SigDef): void;
export function registerSig(serviceId: string, service: SigDef): void;
export function registerSig(peer: FluencePeer, service: SigDef): void;
export function registerSig(peer: FluencePeer, serviceId: string, service: SigDef): void;

export function registerSig(...args: any) {
    registerService(args, {
        defaultServiceId: 'sig',
        functions: [
            {
                functionName: 'get_pub_key',
                argDefs: [],
                returnType: {
                    tag: 'primitive',
                },
            },
            {
                functionName: 'sign',
                argDefs: [
                    {
                        name: 'data',
                        argType: {
                            tag: 'primitive',
                        },
                    },
                ],
                returnType: {
                    tag: 'primitive',
                },
            },
            {
                functionName: 'verify',
                argDefs: [
                    {
                        name: 'signature',
                        argType: {
                            tag: 'primitive',
                        },
                    },
                    {
                        name: 'data',
                        argType: {
                            tag: 'primitive',
                        },
                    },
                ],
                returnType: {
                    tag: 'primitive',
                },
            },
        ],
    });
}

// Functions
